<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试题二</title>
      <link href="/2022/09/18/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BA%8C/"/>
      <url>/2022/09/18/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1><strong>一、</strong> <strong>框架</strong></h1><h2 id="4-1、Spring"><strong>4.1、Spring</strong></h2><h4 id="S-pring-有哪些主要模块【重点】"><strong>S****pring 有哪些主要模块【重点】</strong></h4><p>IOC +  AOP</p><h4 id="IOC和DI【重点】"><strong>IOC和DI【重点】</strong></h4><p>l IOC(控制反转); 对象交由spring创建和管理。</p><p>l DI(依赖注入): 对象中的属性赋值，体现出来的就是对象与对象之间的关系。比如controller依赖service。</p><p>l IOC和DI的关系.</p><p>​IOC就是容器,DI就是注入【对象中的属性赋值】这一行为。所以说,ioc和di即是相辅相成的搭档.最重要的是,他们都是为了实现解耦而服务的.</p><p>l DI是如何实现的：依赖注入的方式</p><p>​Spring支持 setter注入 和 构造器注入、@Autowired自动注入【底层是反射】</p><h4 id="Spring-AOP【重点】"><strong>Spring AOP【重点】</strong></h4><p>Spring AOP的面向切面编程【它可以在不改动原来代码的基础上对方法进行增强】,一般用于项目中公共代码的抽取 ,比如事务管理、日志、缓存、统一异常处理等。</p><p>它的底层是使用动态代理实现的。</p><p>Spring AOP的动态代理主要有两种方式实现,JDK动态代理和cglib动态代理.</p><p><strong>JDK动态代理</strong>通过反射来接受被代理的类,但是被代理的类必须<strong>实现接口</strong>,核心是InvacationHandler和Proxy类。</p><p>cglib动态代理是一个代码生成的类库,可以在运行时动态生成某个类的子类.所以,<strong>cglib是通过继承的方式</strong>做的动态代理。</p><p>因此如果某个类被标记为final,那么它是无法使用cglib做动态代理的.</p><p>AOP怎么用:</p><p>1、 确定切点表达式：【 execution( )  ||  @annotation()  】</p><p>2、 编写通知类，编写通知的方法，类上加注解 @Aspect，方法上确定通知类型：</p><p>JointPoint、ProceedingJoinPoint</p><p>l 前置通知:某方法调用前发出通知.</p><p>l 后置通知:某方法完成之后发出通知.</p><p>l 返回后通知:方法正常返回后,调用通知.在方法,正常退出发出通知.</p><p>l 异常通知:抛出异常后通知:在方法抛出异常退出时执行的通知.在方法调用时,异常退出发出通知.</p><p>l 环绕通知:通知包裹在被通知的方法的周围.</p><p>JDK动态代理：基于接口实现</p><p>Proxy.newProxyInstance</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps22.jpg)</p><p>Cglib：基于extends继承</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps23.jpg)</p><h4 id="Spring中Bean的作用域【重点】"><strong>Spring中Bean的作用域【重点】</strong></h4><p>Spring IOC容器在根据配置创建一个Bean对象实例时,可以为Bean指定实例的作用范围.</p><p><strong>l</strong> <strong>S****ingleton(单例模式)</strong></p><p>IOC容器仅创建一个Bean实例,IOC容器每次返回的是同一个Bean实例.</p><p><strong>l</strong> <strong>P****rototype(原型模式)</strong></p><p>IOC容器仅创建多个Bean实例,IOC容器每次返回的是一个新的实例.</p><p>l request(HTTP请求)</p><p>该属性仅对HTTP请求产生作用,每次HTTP请求都会创建一个新的Bean,适用于WebApplicationContext.</p><p>l session(会话)</p><p>该属性仅用于HTTP Session,同一个session共享一个Bean实例.不同session使用不同的实例.</p><p>l global-session(全局会话,在spring5.x中已移除)</p><p>该属性仅用于HTTP Session,同session作用域不同的时候,所有session共享一个Bean实例.</p><p>总结：基本使用的都是singleton，而且spring默认就是singleton。</p><p>面试官可能会说这个singleton会不会存在并发线程安全问题，问题是存在的。</p><p>并发线程问题发生的条件： 多线程并发访问【写】共享数据。</p><p>一般不会在controller、service中定义成员去共享【存储或操作】数据。</p><h4 id="Spring框架实现实例化和依赖注入的方式"><strong>Spring框架实现实例化和依赖注入的方式</strong></h4><p>l Bean的实例化方式:</p><p>一、无参构造实例化Bean</p><p>二、静态工厂方式实例化Bean</p><p>三、实例工厂方式实例化Bean</p><p>l 依赖注入:</p><p>一、基于构造函数的注入</p><p>二、基于set方法的注入</p><p>三、基于注解 @Autoware的依赖注入</p><p>四、基于自动装配的注入</p><h4 id="Spring常用注解"><strong>Spring常用注解</strong></h4><p>实例化Bean相关的注解：</p><p>l @Component:用于标记在一个类上,表示当前类是spring的一个组件。</p><p>l @Controller：用于标记在一个类上,代表这个类是控制层组件。</p><p>l @Service:用于标记在一个类上,代表这个类是业务层组件。</p><p>l @Repository:用于标记在一个类上,代表这个类是数据访问层组件。</p><p>l @Bean</p><p>依赖注入相关的注解</p><p>l @Autowired</p><p>l @Value</p><p>事务相关的注解：</p><p>l @Transactional:写在类上用于指定当前类中的方法支持事务,写在方法上表示当前的方法支持事务</p><h4 id="BeanFactory类图结构"><strong>BeanFactory类图结构</strong></h4><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps24.png)</p><p><strong>BeanFactory</strong>    <strong>VS   A****pplicationContext</strong></p><p><strong>A****pplicationContext：所有的Bean在启动的时候都进行了加载</strong></p><p><strong>BeanFactory ：Bean在使用的时候才会加载</strong></p><p><strong>BeanFactory【容器】</strong>  <strong>VS  F****actoryBean【创建bean放入容器】</strong></p><h4 id="SpringBean的生命周期"><strong>Spring<strong><strong>B</strong></strong>ean的生命周期</strong></h4><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps25.jpg)</p><p>首先实例化Bean，其实就是通过反射来创建Bean；然后就是Bean的属性的填充；在后面就是Bean的初始化动作，我记得，这里面有一些以Aware结尾的接口、还有一个BeanPostProcessor，如果你的类实现了这些接口，这些接口的方法会在这个阶段执行。当然你自定义的init-method初始化方法，也会在这个阶段执行。</p><p>等这些都完成后，整个bean的初始化动作就完成了。这个使用你就可以使用这个Bean了。</p><p>当然了，当你关闭容器会被销毁，会进行一些相应的操作操作。</p><p>BeanPostProcessor后置处理器，作用是在Bean对象在实例化和<a href="https://so.csdn.net/so/search?q=%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5&amp;spm=1001.2101.3001.7020">依赖注入</a>完毕后，在显示调用初始化方法的前后添加我们自己的逻辑。</p><p><strong>总结：</strong></p><p><strong>创建的时候执行初始化方法</strong> <strong>init-method</strong>**【<strong><strong>@PostConstruct</strong></strong>】。**</p><p><strong>在容器销毁的时候，执行销毁方法destroy</strong>**-method****【@<strong><strong>PreDestroy</strong></strong>】**</p><h4 id="Spring-怎么解决循环依赖问题【重要】"><strong>Spring 怎么解决循环依赖问题【重要】</strong></h4><p>spring对循环依赖的处理有三种情况：</p><p>Ø 构造器的循环依赖：这种依赖spring是处理不了的，直 接抛出BeanCurrentlylnCreationException异常。</p><p>Ø 单例模式下的setter循环依赖：通过“三级缓存”处理循环依赖。</p><p>Ø 非单例循环依赖：无法处理。</p><p>我知道，就是A依赖B，B依赖A这种情况吗。我之前看过，它好像使用spring的三级缓存来解决的，具体这块我记不清了。</p><p>Spring在单例模式下的setter方法依赖注入引起的循环依赖问题，主要是通过二级缓存和三级缓存来解决的，其中三级缓存是主要功臣。解决的核心原理就是：在对象实例化之后，依赖注入之前，Spring提前暴露的Bean实例的引用在第三级缓存中进行存储。</p><h4 id="Spring-框架中用到了哪些设计模式"><strong>Spring 框架中用到了哪些设计模式</strong></h4><p>Ø 工厂设计模式 : Spring使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象。</p><p>Ø 代理设计模式 : Spring AOP 功能的实现。</p><p>Ø 单例设计模式 : Spring 中的 Bean 默认都是单例的。</p><h4 id="Spring事务传播行为"><strong>Spring事务传播行为</strong></h4><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps26.jpg)</p><p>事务传播行为指的就是当一个事务方法（当前事务）被另一个事务方法（调用者）调用时，这个事务方法（当前事务）对另一个事务方法（调用者）的态度。</p><p>简单说就是：事务方法A调用了事务方法B，B需要怎么应对。</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps27.jpg)</p><p><strong>Ø</strong> <strong>PROPAGATION_REQUIRED: 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。</strong></p><p>Ø PROPAGATION_SUPPORTS: 支持当前事务，如果当前没有事务，就以非事务方式执行。</p><p>Ø PROPAGATION_MANDATORY: 支持当前事务，如果当前没有事务，就抛出异常。</p><p><strong>Ø</strong> <strong>PROPAGATION_REQUIRES_NEW: 新建事务，如果当前存在事务，把当前事务挂起。</strong></p><p>Ø PROPAGATION_NOT_SUPPORTED: 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</p><p>Ø PROPAGATION_NEVER: 以非事务方式执行，如果当前存在事务，则抛出异常。</p><p>Ø PROPAGATION_NESTED:如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。</p><h4 id="Spring事务的使用方式"><strong>Spring事务的使用方式</strong></h4><p>1、 编程式事务：自己编写代码，调用spring事务相关api，控制事务。</p><p>2、声明式事务：使用注解@Transactional注解</p><h4 id="Spring-事务失效"><strong>Spring****事务失效</strong></h4><p>Spring事务底层是使用的aop来实现的，而aop底层又是基于动态代理实现的，所以调用的Service对象不在是原生的对象，而是代理对象，并且必须是代理对象。</p><p>Aop实现大概的思路就是如果方法抛出异常就回滚事务，正常执行就提交事务。</p><p>1、但是不是所有的异常都回滚</p><p>Spring的事务管理默认只对出现运行期异常(java.lang.RuntimeException及其子类)进行回滚。</p><p>如果一个方法抛出Exception或者Checked异常，Spring事务管理默认不进行回滚。</p><p>如果需要这些异常也回滚，我们可以在异常注解上添加：@Transaction(RollbackFor=Exception.class)</p><p>2、 你在代码中把异常吃掉了。 Try catch 捕获了。</p><p>3、 自身调用问题</p><p>如果service类的代码中存在内部方法的相互调用，此时如果是service中A方法内部调用B方法，B方法上的事务注解会失效。内部调用默认是 this.B()，此时this代表的是service的原始对象，而不是代理对象。所以此时@Transactional注解失效。</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps28.jpg)</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps29.jpg)</p><p>update方法上面没有加 @Transactional 注解，调用有 @Transactional 注解的 updateOrder 方法，updateOrder 方法上的事务管用吗？</p><p>不管用</p><p>再来看下面这个例子：</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps30.jpg)</p><p>这次在 update 方法上加了 @Transactional，updateOrder 加了 REQUIRES_NEW 新开启一个事务，那么新开的事务管用么？</p><p>这两个例子的答案是：不管用！</p><h2 id="4-2、SpringMVC"><strong>4.2、SpringMVC</strong></h2><h4 id="SpringMVC-执行流程"><strong>S<strong><strong>prin</strong></strong>gMVC****执行流程</strong></h4><p>前端控制器、处理器映射器、处理器适配器、处理器【controller中的方法】、视图解析器</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps31.jpg)</p><h4 id="SpringMVC常用注解"><strong>SpringMVC常用注解</strong></h4><p>Ø @RequestMapping:是一个用于处理请求地址映射的注解,可用于类或方法上。</p><p>@GetMapping @PostMaping @PutMapping @DeleteMapping</p><p>Ø @RequestParam:用于将指定的请求参数赋给方法中的形参.</p><p>Ø @PathVariable:可以获取URL中的动态参数.</p><p>Ø @RequestBody:用于读取request请求的body中的json数据.</p><p>Ø @ResponseBody:用于将controller方法返回的对象,用json格式响应给客户端.</p><p>Ø @RestController:@Controller+@ResponseBody,用于标记在一个类上.</p><h4 id="SpringMVC-获取参数的几种方式"><strong>S<strong><strong>pring</strong></strong>MVC****获取参数的几种方式</strong></h4><p>1、通过Controller方法的形参来接受参数。只不过传参的方式有三种：</p><p>url地址传参：username=zs    @RequestParam</p><p>请求路径传参: /user/1    @PathVariable</p><p>请求体json格式传参     @RequestBody</p><p>2、其次我们还可以通过Servlet原生对象来获取参数。但是这个基本不用</p><p>HttpServletRequest对象获取参数。</p><h4 id="SpringMVC的统一异常处理"><strong>SpringMVC的统一异常处理</strong></h4><p>Ø 方式一：编写异常处理类，类似加 @ControllerAdvice 或者 @RestControllerAdvice</p><p>在类中编写异常处理方法，方法上加 @ExceptionHandler(Exception.class)</p><p>Ø 方式二：编写异常处理类：实现接口 HandlerExceptionResolver</p><p>基本使用的都是方式一。</p><h4 id="SpringMVC-文件上传"><strong>S<strong><strong>pring</strong></strong>MVC****文件上传</strong></h4><p>MultipartFile 接收文件  -&gt;  FileUpload提供api去做的 -&gt; 解析request请求体传递的文件内容</p><p>设置文件大小：</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps32.jpg)</p><h4 id="SpringMVC拦截器"><strong>SpringMVC拦截器</strong></h4><p>HandlerInterceptor 接口</p><p>preHandle( )：该方法在控制器的处理请求方法前执行，其返回值表示是否中断后续操作，返回 true 表示继续向下执行，返回 false 表示中断后续操作。</p><p>postHandle( )：该方法在控制器的处理请求方法调用之后、解析视图之前执行，可以通过此方法对请求域中的模型和视图做进一步的修改。</p><p>afterCompletion( )：该方法在控制器的处理请求方法执行完成后执行，即视图渲染结束后执行，可以通过此方法实现一些资源清理、记录日志信息等工作。</p><p>实际开发中有无用过拦截器：</p><p>用过：xxx项目中用过，拦截请求，获取请求头中的用户id，存储到ThreadLocal，方便后续代码获取当前登录用户信息。</p><h2 id="4-3、Springboot"><strong>4.3、Springboot</strong></h2><h4 id="spring-boot-有哪些方式可以实现热部署？"><strong>spring boot 有哪些方式可以实现热部署？</strong></h4><p>使用 devtools 启动热部署，添加 devtools 库，在配置文件中把 spring. devtools. restart. enabled 设置为 true；<br>使用 Intellij Idea 编辑器，勾上自动编译或手动重新编译。</p><h4 id="SpringBoot-的常用注解有哪些？"><strong>SpringBoot 的常用注解有哪些？</strong></h4><p>@SpringBootApplication:</p><p>包含@Configuration、@EnableAutoConfiguration、@ComponentScan通常用在主类上；</p><p>@ComponentScan:组件扫描。个人理解相当于，如果扫描到有@Component @Controller @Service等这些注解的类，则把这些类注册为bean*；<br>@Configuration:指出该类是 Bean 配置的信息源，相当于XML中的，一般加在主类上；</p><p>@Bean:相当于XML中的,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理；</p><p>@Import：用来导入其他配置类。</p><p>@ImportResource：用来加载xml配置文件。</p><p>@ControllerAdvice：包含@Component。可以被扫描到。统一处理异常。</p><p>@ExceptionHandler（Exception.class）：用在方法上面表示遇到这个异常就执行以下方法。</p><h4 id="SpringBoot-有哪几种读取配置的方式？"><strong>SpringBoot 有哪几种读取配置的方式？</strong></h4><p>方式一： 通过@Value(“${spring.datasource.url}”)这样的方式读取<br>方式二：通过@ConfigurationProperties(prefix = “spring.datasource”)这种写法系统会依据prefix前缀自动注入配置数据到数据实体变量,这种方式不错,但是存在缺陷,我们编写的PropertyPlaceholderConfigurer扩展字段会无效,所以如果只是单纯的读取配置而不需要额外操作时可使用这方式最简单</p><p>方式三： 我们可以直接注入Environment对象示例并读取properties对象属性environment.getProperty(“spring.datasource.database”);与方式一的本质差不多,我们不需要编写对应字段的模型对象,但是对于程序可阅读性不好友,复用率不高</p><p>方式四： 通过系统启动时候初始化Listener,使用PropertiesLoaderUtils工具类读取指定配置文件并获得Properties配置对象,我们可以随时随地使用该对象的属性,这种方式比较少用,针对比较自定义的配置数据可使用该方式</p><h4 id="SpringBoot-配置加载顺序？"><strong>SpringBoot 配置加载顺序？</strong></h4><p>在不指定要被加载文件时，默认的加载顺序：由里向外加载，所以最外层的最后被加载，会覆盖里层的属性，加载顺序依次为：</p><p>l 位于与jar包同级目录下的config文件夹，</p><p>l 位于与jar包同级目录下</p><p>l idea 环境下，resource文件夹下的config文件夹</p><p>l idea 环境下，resource文件夹下  （1-&gt;4, 外-&gt;里）</p><h4 id="Spring-Boot-如何定义多套不同环境配置"><strong>Spring Boot 如何定义多套不同环境配置</strong></h4><p>一、Spring Boot 环境设置机制</p><p>spring.profiles.active 属性可以为我们指定当前设置的环境，以此来选择我们的配置文件。例如我们有配置文件</p><p>application.yml</p><p>application-dev.yml</p><p>application-test.yml</p><p>application-prod.yml</p><p>当执行 java -jar xxx.jar --spring.profiles.actvie=test 此时，系统将启用 application.yml 和 application-test.yml配置文件。</p><p>当执行 java -jar xxx.jar --spring.profiles.actvie=prod 此时，系统将启用 application.yml 和 application-prod.yml 配置文件。</p><p>二、配置多环境</p><p>正如 第一 点所述，我们配置不同的配置文件</p><p>application.yml</p><p>application-dev.yml（开发环境）</p><p>application-test.yml（测试环境）</p><p>application-uat.yml（预发布环境）</p><p>application-prod.yml（生产环境）</p><p>三、指定环境</p><p>1 在 cmd 命令中指定</p><p>java -jar xxx.jar --spring.profiles.actvie=dev</p><p>2 在 application.yml 中指定</p><p>spring:  profiles:    active: dev</p><h2 id="4-4、Mybatis-Mybatis-plus"><strong>4.4、Mybatis &amp; Mybatis-plus</strong></h2><h4 id="Mybatis中-和-的区别"><strong>Mybatis中#和$的区别</strong></h4><p>#{}传参能防止sql注入.</p><p>${}传参是字符串拼接.</p><p>#可以防止sql注入，所以一般都是使用#传参。但是有些情况必须使用$传参，当前传递的参数中包含sql关键字。</p><p>select * from tb_sys_log_${}</p><p>select  ${colParam}    from xxx    例如   colParam: username,password</p><h4 id="常用的动态SQL"><strong>常用的动态SQL</strong></h4><p>记住常用的动态sql标签:</p><where><p><if test=””></if></p></where>  <set><p>​    <if test=””> username = #{username}</if></p></set><p><forEach></forEach></p><p>一般用于 where id in  ( 1,2,3,…)</p><p>还可以用于批量添加： insert into xxx (…)  values  (…),(…),(…),(…),…</p><p><sql>  +  <include></p><h4 id="使用MyBatis的mapper接口和xml映射文件的规范"><strong>使用<strong><strong>MyBatis的mapper</strong></strong>接口和xml映射文件的规范</strong></h4><p>Mapper接口方法名和mapper.xml中定义的每个sql的id相同；</p><p>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同；</p><p>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType或者ResultMap的类型相同；</p><p>Mapper.xml文件中的namespace即是mapper接口的类路径。</p><h4 id="Mybatis的ResultType和ResultMap的区别"><strong>Mybatis的ResultType和ResultMap的区别</strong></h4><p>1、都是用于指定mapper接口方法返回结果的类型。</p><p>2、ResultType一般用于指定基本类型或者实体类类型。</p><p>3、ResultMap用于指定实体类类型，需要自定义，在自定义的时候可以指定实体类的属性和表中字段的映射关系。所以ResultMap一般用于查询结果封装的时候实体类的属性名和表中字段名不一致的问题。它还可以用于封装多表查询的结果。</p><h4 id="M-ybatis多个参数传递，使用注解-Param"><strong>M****ybatis多个参数传递，使用注解@<strong><strong>P</strong></strong>aram</strong></h4><p>queryByXXX(@Param(“name”)String name,@Param(“item”)String item)</p><p>select * from xxx where name = #{name} and item=#{item}</p><h4 id="Mybatis如何实现分页"><strong>Mybatis如何实现分页</strong></h4><p>使用PageHelper分页插件实现，使用这个插件可以帮助我们屏蔽数据库的差异。</p><p>PageHelper.startPage( page , pageSize );</p><h4 id="Mybatis的一二级缓存【非必须】"><strong>M<strong><strong>ybatis</strong></strong>的一二级缓存【非必须】</strong></h4><p>mybatis包含了一个非常强大的查询缓存特性，它可以将我们的查询结果进行缓存，缓存可以极大的提高查询的效率</p><p>mybatis系统当中默认定义了两级缓存：一级缓存和二级缓存</p><p>一级缓存：默认情况之下，只有一级缓存开启（sqlSession级别的缓存）</p><p>二级缓存：需要手动开启配置，是namespace级别的缓存</p><h4 id="Mybatis主键返回"><strong>Mybatis主键返回</strong></h4><p>获取数据库自增的主键。</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps33.png)</p><h4 id="Mybatis执行过程【非必须】"><strong>M<strong><strong>ybatis</strong></strong>执行过程【非必须】</strong></h4><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps34.jpg)</p><p>7：  ParameterHandler  对请求参数的封装：#{ }  ${ }</p><p>8：  ResultSetHandler  执行结果的封装</p><p>Mybatis的mapper接口方法支持重载吗？</p><p>不支持，mapper接口的方法名和mapper映射文件中的sql表的id是一直的，而sql标签的id是不能重复的。</p><h4 id="Mybatis和Mybatis-plus的区别">**M<strong><strong>ybatis和Mybatis</strong></strong>-**<strong>plus的区别</strong></h4><h1><strong>二、</strong> <strong>数据库【必须】</strong></h1><p><strong>1.</strong> <strong>SQL****语句</strong></p><p>基本查询：</p><p>select</p><p>from</p><p>where</p><p>group by</p><p>having</p><p>order by</p><p>limit</p><p>左外连接：</p><p>select     from   A   left  join B  on A.xx = B.xx</p><p>​                     left  join C  on</p><p>​                     … …</p><p>内连接：</p><p>select     from   A   join B  on A.xx = B.xx</p><p>​                     join C  on</p><p>​                     … …</p><p>隐式内连接：</p><p>Select   from   A,B,…   where  A.xx=B.xx  and …</p><p>子查询：</p><p>常用的函数：</p><p>sum  avg  min  max  count  group_concat</p><p>case  when  条件  then  取值</p><p>​      when  条件  then  取值</p><p>​      else  取值  end</p><p>ifnull(表达式1,表达式2 )：</p><p>concat(“”,””,””,…)  字符串拼接</p><p><strong>2.</strong> <strong>事务的特性和隔离级别</strong></p><p>事务的特性：</p><p>l 原子性（Atomicity）</p><p>​原子性指事务是不可分割的整体，事务中的操作要么都发生，要么都不发生</p><p>l 一致性（Consistency）</p><p>​事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p><p>数据不能平白无故的增加或者消失。</p><p>l 隔离性（Isolation）</p><p>​事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p><p>l 持久性（Durability）</p><p>​持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的。</p><p>隔离级别：</p><p>l 未提交读 read uncommitted</p><p>​会发生 脏读、不可重复读、虚读</p><p>l 已提交读read committed//Oracle   SQL Server（系统事务）</p><p>​解决脏读，但是不可重复读和虚读有可能发生</p><p>l 重复读repeatable read//Mysql</p><p>​解决脏读和不可重复读，但是虚读有可能发生.</p><p>l 串行化serializable</p><p>​避免脏读，不可重复读，虚读的发生</p><p>不考虑隔离性会产生的问题：</p><p>l 脏读：脏读是读到了别的事务回滚前【未提交】的脏数据。</p><p>l 不可重复读：事务A首先读取了一条数据，然后执行逻辑的时候，事务B将这条数据改变了，然后事务A再次读取的时候，发现数据不匹配了，就是所谓的不可重复读了</p><p>l 幻读：事务A首先根据条件索引得到N条数据，然后事务B改变了这N条数据之外的M条或者增添了M条符合事务A搜索条件的数据，导致事务A再次搜索发现有N+M条数据了，就产生了幻读。</p><p><strong>3.</strong> <strong>InnoDB，MyISAM存储引擎特性</strong></p><p>存储引擎真正的负责了MySQL中数据的存储和提取</p><p>l InnoDB</p><p>InnoDB存储引擎是Mysql的默认存储引擎。InnoDB提供了事务支持。</p><p>l MyISAM</p><p>MyISAM 不支持事务、也不支持外键，其优势是访问的速度快。</p><p><strong>4.</strong> <strong>CHAR和<strong><strong>VARCHAR</strong></strong>的区别：</strong></p><p>char类型的长度是固定的，不足会使用空格填充；varchar的长度是可变的；</p><p>char检索速度快，容易造成空间浪费。而varchar不会；</p><p>char的最大长度255，而varchar的是65533。</p><p><strong>5.</strong> <strong>delete、drop、truncate****区别</strong></p><p>l truncate 和 delete只删除数据，不删除表结构 ,drop删除表结构，并且释放所占的空间。</p><p>l 删除数据的速度，drop&gt; truncate &gt; delete</p><p>l delete属于DML语言，需要事务管理，commit之后才能生效。drop和truncate属于DDL语言，操作立刻生效，不可回滚。</p><p>l 使用场合：</p><p>Ø 当你不再需要该表时， 用 drop;</p><p>Ø 当你仍要保留该表，但要删除所有记录时， 用 truncate;</p><p>Ø 当你要删除部分记录时（always with a where clause), 用 delete.</p><p><strong>6.</strong> <strong>mysql 中 in 和 exists 区别</strong></p><p>mysql中的in语句是把外表和内表作hash 连接，而exists语句是对外表作loop循环，每次loop循环再对内表进行查询。一直大家都认为exists比in语句的效率要高，这种说法其实是不准确的。这个是要区分环境的。</p><p>如果查询的两个表大小相当，那么用in和exists差别不大。<br>如果两个表中一个较小，一个是大表，则子查询表大的用exists，子查询表小的用in：<br>not in 和not exists如果查询语句使用了not in 那么内外表都进行全表扫描，没有用到索引；而not extsts 的子查询依然能用到表上的索引。所以无论那个表大，用not exists都比not in要快。<br>1.EXISTS只返回TRUE或FALSE，不会返回UNKNOWN。</p><p>2.IN当遇到包含NULL的情况，那么就会返回UNKNOWN。</p><p><strong>7.</strong> <strong>数据库的三范式是什么</strong></p><p>第一范式（1NF）：原子性（存储的数据应该具有“不可再分性”）</p><p>第二范式（2NF）：唯一性 (消除非主键部分依赖联合主键中的部分字段)（一定要在第一范式已经满足的情况下）</p><p>第三范式（3NF）：独立性，消除传递依赖(非主键值不依赖于另一个非主键值)</p><p><a href="https://blog.csdn.net/A_art_xiang/article/details/113880638">(71条消息) 数据库设计的三范式超详细详解_秃了也弱了。的博客-CSDN博客_数据库三范式</a></p><p><strong>8.</strong> <strong>S<strong><strong>QL</strong></strong>优化</strong></p><p><strong>总体方针：</strong></p><p>Ø 通过慢查询日志去寻找，哪些sql执行效率低。Mysql会将那些查询慢【时间阈值】的sql记录下来。</p><p>SHOW VARIABLES LIKE “%slow%”</p><p>SET GLOBAL XXX = ?</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps35.jpg)</p><p>Ø 使用explain分析低效率的sql执行计划。</p><p>Ø 针对低效率的sql执行计划分析，给出相应的解决方案</p><p>没有索引</p><p>索引失效</p><p>数据量太大</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps36.jpg)</p><p>重点关注</p><p>type</p><p>possible_keys : 可能用到的索引</p><p>key：实际用到的索引</p><p>rows：</p><p>key_len:</p><p><strong>情形一、没有索引：</strong></p><p>思路：针对查询的列创建索引，提高查询效率；但是索引太多，mysql也会出现选择困难，所以建立索引要有效，无效的索引需要删除。但是索引会降低增删改的效率。</p><p>策略：</p><p>Ø 针对那些经常用于where条件查询的字段构建索引，针对经常排序的字段也可以构建索引。</p><p>Ø 尽量选择较小的列</p><p>Ø 创建索引列的值区分度要高【select count(distinct 列名)/ count(列名)*100 from xxx】</p><p><strong>情形二、索引失效：</strong></p><p>1、 索引列上使用函数或者运算，会导致索引失效</p><p>2、 左模糊查询 like ‘%xxx’，会导致索引失效</p><p>3、 组合索引，违反左前缀原则</p><p>create index 索引名称  on tableName(col1,col2,col3)</p><p>col1</p><p>col1,col2</p><p>col1,col2,col3</p><p>select * from xxx where  col1 = ?  or col2 = ?</p><p>select * from xxx where col1 = ? and col2 = ?</p><p>select * from xxx where col1 like ‘%xx’ and col2 = ?</p><p>select * from xxx where col3 = ? and col2 = ? and col1=?</p><p>4、 不等于查询，会导致索引失效</p><p>5、 or 查询</p><p>select * from xxx where  col1 = ?  or col2 = ?</p><p>col1 和 col2 都要单独创建索引</p><p>情形三、数据量太大：</p><p>1、分页查询优化</p><p>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。</p><p>select * from table 100000,10  (page-1)*10 = 100000=&gt; 10001</p><p>select * from table t where <a href="http://t.id">t.id</a> in（ select id from table order by id limit 100000，10） ;</p><p>对于主键自增的表，可以把limit查询缓存某个位置的查询 1 2 3 4 … 10000</p><p>select * from table where id &gt; 100000 limit 10;</p><p>select * from table limit 100000,10</p><p>2、分库分表：使用MyCat中间件实现。</p><p>3、使用其他技术解决：</p><p>可以考虑使用ElasticSearch或者MongoDB来代替mysql。</p><p><strong>9.</strong> <strong>分库分表方案</strong></p><p>l 一开始上来就是32个库，每个库32个表，1024张表这个分法，</p><p>基本上国内的互联网肯定都是够用了</p><p>无论是并发支撑还是数据量支撑都没问题</p><p>l 如果每个库正常承载的写入并发量是1000，那么32个库就可以承载32 * 1000 = 32000的写并发，如果每个库承载1500的写并发，32 * 1500 = 48000的写并发，接近5万/s的写入并发，前面再加一个MQ，削峰，每秒写入MQ 8万条数据，每秒消费5万条数据。1024张表，假设每个表放500万数据，在MySQL里可以放50亿条数据。每秒的5万写并发，总共50亿条数据，对于国内大部分的互联网公司来说都够了。</p><p>l 此方案最多可以扩展到32个数据库服务器，每个数据库服务器是一个库。如果还是不够？最多可以扩展到1024个数据库服务器，每个数据库服务器上面一个库一个表。因为最多是1024个表么。</p><p>服务器升级流程：</p><p>l 设定好几台数据库服务器，每台服务器上几个库，每个库多少个表，推荐是32库 * 32表，对于大部分公司来说，可能几年都够了</p><p>l 路由的规则，orderId 模 32 = 库，orderId / 32 模 32 = 表</p><p>l 扩容的时候，申请增加更多的数据库服务器，装好mysql，倍数扩容，4台服务器，扩到8台服务器，16台服务器</p><p>l 由dba负责将原先数据库服务器的库，迁移到新的数据库服务器上去，很多工具，库迁移，比较便捷</p><p>l 我们这边就是修改一下配置，调整迁移的库所在数据库服务器的地址</p><p>l 重新发布系统，上线，原先的路由规则变都不用变，直接可以基于2倍的数据库服务器的资源，继续进行线上系统的提供服务</p><p><strong>10.</strong> <strong>MySQL 索引是怎么实现的？</strong></p><p>索引是满足某种特定查找算法的数据结构，而这些数据结构会以某种方式指向数据，从而实现高效查找数据。</p><p>具体来说 MySQL 中的索引，不同的数据引擎实现有所不同，但目前主流的数据库引擎的索引都是 B+ 树实现的，B+ 树的搜索效率，可以到达二分法的性能，找到数据区域之后就找到了完整的数据结构了，所有索引的性能也是更好的。</p><p><strong>11.</strong> <strong>Mysql支持的索引类型</strong></p><p>l index  ----  普通索引,数据可以重复，没有任何限制。</p><p>l unique   ---- 唯一索引,要求索引列的值必须唯一，但允许有空值；如果是组合索引，那么列值的组合必须唯一。</p><p>l primary key ---- 主键索引,是一种特殊的唯一索引，一个表只能有一个主键，不允许有空值，一般是在创建表的同时创建主键索引。</p><p>l 组合索引 ----  在多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。</p><p>l fulltext ---- 全文索引,是对于大表的文本域：char，varchar，text列才能创建全文索引，主要用于查找文本中的关键字，并不是直接与索引中的值进行比较。</p><p><strong>12.</strong> <strong>索引失效问题</strong></p><p>7种引起索引失效的情境</p><p>l 如果条件中有or，即使其中有部分条件带索引也不会使用(这也是为什么尽量少用or的原因)，例子中user_id无索引。注意：要想使用or，又想让索引生效，只能将or条件中的每个列都加上索引</p><p>l 对于复合索引，如果不使用前列，后续列也将无法使用，类电话簿。</p><p>l like查询是以%开头</p><p>l 存在索引列的数据类型隐形转换，则用不上索引，比如列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引</p><p>l where 子句里对索引列上有数学运算，用不上索引</p><p>l where 子句里对有索引列使用函数，用不上索引</p><p>l 如果mysql估计使用全表扫描要比使用索引快,则不使用索引</p><p><strong>13.</strong> <strong>左连接 ，右连接，内连接和全外连接的4者区别</strong></p><p><strong>l</strong> <strong>left join （左连接）</strong>：返回包括左表中的所有记录和右表中连接字段相等的记录。</p><p>l right join （右连接）：返回包括右表中的所有记录和左表中连接字段相等的记录。</p><p><strong>l</strong> <strong>inner join （等值连接或者叫内连接）</strong>：只返回两个表中连接字段相等的行。</p><p>l full join （全外连接）：返回左右表中所有的记录和左右表中连接字段相等的记录[mysql不支持]。</p><p><strong>14.</strong> <strong>一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 MySQL 数据库，又插入了一条数据，此时 id 是几？</strong></p><p>l 表类型如果是 MyISAM ，那 id 就是 8。</p><p>l 表类型如果是 InnoDB，那 id 就是 6。<br>InnoDB 表只会把自增主键的最大 id 记录在内存中，所以重启之后会导致最大 id 丢失。</p><p><strong>15.</strong> <strong>说一下 MySQL 的行锁和表锁？【非必须】</strong></p><p>MyISAM 只支持表锁，InnoDB 支持表锁和行锁，默认为行锁。</p><p>表级锁：开销小，加锁快，不会出现死锁。锁定粒度大，发生锁冲突的概率最高，并发量最低。<br>行级锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率小，并发度最高。</p><p><strong>16.</strong> <strong>说一下乐观锁和悲观锁？【非必须】</strong></p><p>乐观锁：每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在提交更新的时候会判断一下在此期间别人有没有去更新这个数据。</p><p>悲观锁：每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻止，直到这个锁被释放。</p><p>数据库的乐观锁需要自己实现，在表里面添加一个 version 字段，每次修改成功值加 1，这样每次修改的时候先对比一下，自己拥有的 version 和数据库现在的 version 是否一致，如果不一致就不修改，这样就实现了乐观锁。</p><p><strong>17.</strong> <strong>高并发下，如何做到安全的修改同一行数据。</strong></p><p>使用悲观锁 悲观锁本质是当前只有一个线程执行操作，结束了唤醒其他线程进行处理。也可以缓存队列中锁定主键。</p><p><strong>18.</strong> <strong>数据库会死锁吗，举一个死锁的例子</strong></p><p>产生死锁的原因主要是：</p><p>（1）系统资源不足。<br>（2）进程运行推进的顺序不合适。<br>（3）资源分配不当等。</p><p>如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。其次，进程运行推进顺序与速度不同，也可能产生死锁。</p><p>产生死锁的四个必要条件：</p><p>（1） 互斥条件：一个资源每次只能被一个进程使用。<br>（2） 请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br>（3） 不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。<br>（4） 循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</p><p>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。</p><p><strong>19.</strong> <strong>聚集索引和非聚集索引的区别</strong></p><p>聚簇索引就是索引和记录紧密在一起。<br>非聚簇索引 索引文件和数据文件分开存放，索引文件的叶子页只保存了主键值，要定位记录还要去查找相应的数据块。</p><p><a href="https://blog.csdn.net/xishilife/article/details/120256375">(48条消息) 聚簇索引和非聚簇索引的区别_xishilife的博客-CSDN博客_聚簇索引和非聚簇索引的区别</a></p><p><strong>20.</strong> <strong>mysql数据碎片处理</strong></p><p>在长期的数据更改过程中, 索引文件和数据文件,都将产生空洞,形成碎片.我们可以通过一个nop操作(不产生对数据实质影响的操作), 来修改表.比如: 表的引擎为innodb , 可以 alter table xxx engine innodb。也可以使用optimize table 表名 来进行修复.</p><p>注意: 修复表的数据及索引碎片,就会把所有的数据文件重新整理一遍,使之对齐.这个过程,如果表的行数比较大,也是非常耗费资源的操作.所以不能频繁的修复.如果表的Update操作很频率,可以按周/月,来修复.</p><p>如果不频繁,可以更长的周期来做修复.</p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="/2022/09/18/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/09/18/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1><strong>一、</strong> <strong>JAVA基础部分</strong></h1><h2 id="1-1、基础内容【必须】"><strong>1.1、基础内容【必须】</strong></h2><h4 id="1-JDK-和-JRE-有什么区别？"><strong>1.</strong> <strong>JDK 和 JRE 有什么区别？</strong></h4><p>JDK：Java Development Kit 的简称，Java 开发工具包，提供了 Java 的开发环境和运行环境。</p><p>JRE：Java Runtime Environment 的简称，Java 运行环境，为 Java 的运行提供了所需环境。</p><p>**具体来说 JDK 其实包含了 JRE，同时还包含了编译 Java 源码的编译器 Javac，还包含了很多 Java 程序调试和分析的工具。**简单来说：如果你需要运行 Java 程序，只需安装 JRE 就可以了，如果你需要编写 Java 程序，需要安装 JDK。</p><h4 id="2-抽象类与接口区别"><strong>2.</strong> <strong>抽象类与接口区别</strong></h4><p>Ø 抽象类可以有构造方法，接口中不能有构造方法</p><p>Ø 抽象类中可以有普通成员变量，接口中没有普通成员变量</p><p>Ø 抽象类中可以包含非抽象的普通方法，接口中的所有方法必须都是抽象的</p><p>Ø 抽象类中的抽象方法的访问类型可以是public，protected，但接口中的抽象方法只能是public类型的，并且默认即为public abstract类型</p><p>Ø 抽象类中可以包含静态方法，接口中不能包含静态方法</p><p>Ø 抽象类和接口中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以任意，但接口中定义的变量只能是public static final类型，并且默认即为public static final类型</p><p>Ø 一个类可以实现多个接口，但只能继承一个抽象类。</p><p>Ø 接口关注的是功能，抽象类关注的抽象现实中事物</p><p>关键点：抽象类可以有构造方法，接口中不能有构造方法、抽象类中可以有普通成员变量，接口中没有普通成员变量、一个类可以实现多个接口，但只能继承一个抽象类。</p><h4 id="3-和-equals-的区别是什么？"><strong>3.</strong> <strong>== 和 equals 的区别是什么？</strong></h4><p>== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；</p><p>equals 默认情况下是引用比较，只是很多类重新了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。</p><h4 id="4-Stream常用方法："><strong>4.</strong> <strong>Stream常用方法：</strong></h4><p>Ø map: 用作类型转换 如把集合里面的字符串转为大写,或者一个对象的集合取几个字段转为新的对象集合</p><p>Ø filter: 过滤 符合条件的集合元素保存下来,不符合条件的去掉</p><p>Ø flatMap:合并集合,比如List<Album> Album里面有一LIst<Track> 对象,这个时候就能不通过循环的方式把 List<Album> 里的每一个元素的 trasks 对象组装成一个新的集合</p><p>Ø reduce: reduce可以做累加运算, .reduce(0, (a,b)-&gt; a+b);</p><p>Ø count: count和size一样返回的是元素的个数</p><p>Ø max,min: 求最大值和最小值,这两个方法需要传入一个comparator比较器,Comparator比较器有一个comparing() 方法</p><p>Ø anyMatch表示，判断的条件里，任意一个元素成功，返回true</p><p>Ø allMatch表示，判断条件里的元素，所有的都是，返回true</p><p>map、filter</p><h4 id="5-final-在-Java-中有什么作用？"><strong>5.</strong> <strong>final 在 Java 中有什么作用？</strong></h4><p>final 修饰的类叫最终类，该类不能被继承。<br>final 修饰的方法不能被重写。<br>final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。</p><h4 id="6-String-类的常用方法都有那些？"><strong>6.</strong> <strong>String 类的常用方法都有那些？</strong></h4><p><strong>indexOf()：返回指定字符的索引。</strong></p><p>charAt()：返回指定索引处的字符。</p><p><strong>replace()：字符串替换。</strong></p><p>trim()：去除字符串两端空白。</p><p><strong>split()：分割字符串，返回一个分割后的字符串数组。</strong></p><p>getBytes()：返回字符串的 byte 类型数组。</p><p>length()：返回字符串长度。</p><p>toLowerCase()：将字符串转成小写字母。</p><p>toUpperCase()：将字符串转成大写字符。</p><p><strong>substring()：截取字符串。</strong></p><p>equals()：字符串比较。</p><h4 id="7-字符串中replace和replaceAll的区别？"><strong>7.</strong> <strong>字符串中replace和replaceAll的区别？</strong></h4><p>Ø replace的第一个参数是char和CharSequence,即可以支持字符和字符串的替换。</p><p>Ø replaceAll的第一个参数是regex，即基于规则表达式的替换。</p><h4 id="8-String-StringBuilder-StringBuffer三者的区别"><strong>8.</strong> <strong>String,</strong>    <strong>StringBuilder,StringBuffer三者的区别</strong></h4><p>l String和StringBuilder的本质区别</p><p>String是一个不可改变的字符序列.</p><p>StringBuilder是一个可以改变的字符序列.</p><p>l 常见的字符拼接,该选择谁</p><p>推荐使用StringBuilder,因为拼接的效率高</p><p>l StringBuilder和StringBuffer的区别</p><p>一、StringBuilder和StringBuffer的功能是完全一致的.</p><p>二、不同点</p><p>StringBuffer是jdk1.0出现的,线程安全(同步):效率低.</p><p>StringBuilder是jdk1.5出现的,线程不安全(不同步):效率高.</p><h4 id="9-JAVA反射机制提供了什么功能"><strong>9.</strong> <strong>JAVA反射机制提供了什么功能</strong></h4><p><strong>Java反射机制提供如下功能</strong>：</p><p>Ø 在运行时判断任意一个对象所属的类</p><p>Ø 在运行时构造任意一个类的对象</p><p>Ø 在运行时判段任意一个类所具有的成员变量和方法</p><p>Ø 在运行时调用任一个对象的方法</p><p>Ø 在运行时创建新类对象</p><p>Ø 在使用Java的反射功能时，基本首先都要获取类的Class对象，再通过Class对象获取其他的对象。</p><p>Class  à    Contructor  +  Field  +  Method</p><h4 id="10-常见的异常类有哪些？"><strong>10.</strong> <strong>常见的异常类有哪些？</strong></h4><p>Ø NullPointerException 空指针异常【少做空判断】</p><p>Ø ClassNotFoundException 指定类不存在【包冲突】</p><p>Ø NumberFormatException 字符串转换为数字异常【1a23：检查：正则判断，hutool工具类】</p><p>Ø IndexOutOfBoundsException 数组下标越界异常</p><p>Ø ClassCastException 数据类型转换异常</p><p>Ø FileNotFoundException 文件未找到异常</p><p>Ø NoSuchMethodException 方法不存在异常</p><p>Ø IOException IO 异常</p><p>Ø SocketException Socket 异常</p><h4 id="11-Java中异常处理机制"><strong>11.</strong> <strong>Java中异常处理机制</strong></h4><p>l 什么是异常</p><p>异常指的就是程序的不正常,简单理解就是程序所发生的错误.</p><p>l 异常的体系结构&amp;分类</p><p>一、分类</p><ol><li><p>编译时异常:指的就是编译期间,编译器检测到某段代码可能会发生某些问题,需要程序员提前给代码做出错误的解决方案,否则编译是不通过的.(例如FileReader)</p></li><li><p>运行时异常:指的是编译通过了,但运行时出现的错误.</p></li></ol><p>**二、**<strong>体系结构</strong></p><p>Throwable</p><p>Error：严重性错误</p><p>Exception：</p><p>RuntimeException:  运行时异常</p><p>!RuntimeException: 编译时异常</p><p>l 异常产生的原理</p><p>java对异常默认的处理方式,是将问题抛出给上一级</p><p>抛出之前,java会根据错误产生的异常类,创建出该类的对象,底层并通过throw关键字将异常抛出给上一级,不断向上抛出,直到抛给了JVM虚拟机,虚拟机拿到问题之后,就会将错误的原因和所在的位置,打印在控制台.</p><p>l 异常的处理方式</p><p>一、问题可以自己处理掉的</p><p>try…catch处理方式:自己将问题处理掉,不会影响到后续代码的继续执行.</p><p>二、问题自己处理不掉的</p><p>throws抛出处理方式：如果发现问题自己无法完美结局,就可以通过throw关键字,将异常对象抛出给调用者,但如果使用throw抛出异常对象,则方法上面必须进行throws的声明,告知调用者此方法存在异常.</p><p>细节:如果抛出的对象是RuntimeException,则方法上面无需throws声明.</p><p>总结：逐层上抛，在springmvc中使用统一异常处理来处理。</p><p>@ControllerAdvice + @ExceptinHandler(xxx.class)</p><h4 id="12-Java中finally和return执行顺序"><strong>12.</strong> <strong>Java中finally和return执行顺序</strong></h4><p><a href="https://blog.csdn.net/u014082714/article/details/106050735">(48条消息) Java中finally和return执行顺序_liuhmmjj的博客-CSDN博客_finally return执行顺序</a></p><p>Ø finally语句在return语句执行之后 return返回之前执行的</p><p>Ø finally块中的return语句会覆盖try块中的return返回</p><p>Ø 如果finally语句中没有return语句覆盖返回值，那么原来的返回值可能因为finally里的修改而改变也可能不变</p><p>Ø try块里的return语句在异常的情况下不会被执行，这样具体返回哪个看情况</p><p>Ø 当发生异常后，catch中的return执行情况与未发生异常时try中return的执行情况完全一样</p><h4 id="13-常见的基本排序"><strong>13.</strong> <strong>常见的基本排序</strong></h4><p>l 冒泡排序</p><p>public void bubbleSort(int[] arr) { //从小到大</p><p>​int temp = 0;</p><p>​for(int i = 0; i &lt; arr.length -1; i++){ //控制趟数，到倒数第二个为止</p><p>​for(int j = arr.length-1; j&gt;i; j–){ //从最后一个值开始冒泡，将后面的小值与前面的大值进行交换，并且保证循环到前面已经排序完的索引为止</p><p>​if(arr[j-1] &gt; arr[j]){</p><p>​temp = arr[j];</p><p>​arr[j] = arr[j-1];</p><p>​arr[j-1] = temp;</p><p>​}</p><p>​}</p><p>​}</p><p>}</p><p>l 选择排序：</p><p>public void selectionSort(int[] arr){</p><p>​int temp = 0;</p><p>​int k = 0; //存储最小值的索引</p><p>​for(int i = 0; i&lt;arr.lengrh - 1; i++){ //控制趟数，到倒数第二个为止</p><p>​k = i;</p><p>​for(int j = i; j&lt;arr.length;j++){  //将第一个数默认为最小值，将其索引赋值给k，从k索引开始，将后面每个数与k索引对应的值比较，如果值小了，就将其索引赋值给k</p><p>​if(arr[j] &lt; arr[k]){</p><p>​k = j;</p><p>​}</p><p>​}</p><p>​//遍历完后，k就指向了最小的值，将其与i对应的值交换(也可 以先做个判断，判断k的索引是否有变化，无变化可以不交换)</p><p>​temp = arr[k];</p><p>​arr[k] = arr[i];</p><p>​arr[i] = temp;</p><p>​}</p><p>​</p><p>}</p><p>总结：记住一两个常见的排序【冒泡】</p><h2 id="1-2-、JVM虚拟机-类加载"><strong>1.2</strong>**、JVM虚拟机&amp;类加载**</h2><h4 id="1-Java-内存区域【必须，记住结果】"><strong>1.</strong> <strong>Java 内存区域【必须，记住结果】</strong></h4><p>Java 虚拟机在执行 Java 程序的过程中会把他所管理的内存划分为若干个不同的数据区域。Java 虚拟机规范将 JVM 所管理的内存分为以下几个运行时数据区：程序计数器、Java 虚拟机栈、本地方法栈、Java 堆、元数据区。</p><p>JDK8 之前，Hotspot 中方法区的实现是永久代（Perm），JDK8 开始使用元空间（Metaspace），以前永久代所有内容的字符串常量移至堆内存，其他内容移至元空间，元空间直接在本地内存分配。</p><p>为什么要使用元空间取代永久代的实现？</p><p>\1. 字符串存在永久代中，容易出现性能问题和内存溢出。</p><p>\2. 类及方法的信息等比较难确定其大小，因此对于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老年代溢出。</p><p>\3. 永久代会为 GC 带来不必要的复杂度，并且回收效率偏低。</p><p>\4. 将 HotSpot 与 JRockit 合二为一。</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps1.jpg)</p><h4 id="2-JAVA中垃圾回收机制【记住常见的垃圾回收算法】"><strong>2.</strong> <strong>JAVA中垃圾回收机制【记住常见的垃圾回收算法】</strong></h4><p>l 什么样的对象会被当做垃圾回收</p><p>当一个对象的引用(地址)没有变量去记录的时候,该对象就会成为垃圾对象,并在垃圾回收器空闲的时候对其进行清扫.</p><p>l 如何检验对象是否被回收</p><p>可以重写Object类中的finalize方法</p><p>这个方法在垃圾回收器执行的时候,被回收器自动调用执行的.</p><p>l 怎样通知垃圾回收器回收对象</p><p>可以调用system类的静态方法gc().通知垃圾回收器去清理垃圾.</p><p>1、标记清除算法</p><p>特点： 简单、收集速度快，但会有空间碎片，空间碎片会导致后面的GC频率增加。</p><p>适合场景：只有小部分对象需要进行回收的，适用于老年代的垃圾回收，因为老年代一般存活对象会比回收对象要多。</p><p>2、标记复制算法</p><p>特点：收集速度快，可以避免空间碎片，但是有空间浪费，存活对象较多的情况下复制对象的过程等会非常耗时，而且需要担保机制。</p><p>适合场景： 只有少量对象存活的场景，这也正是新生代对象的特点，所以一般新生代的垃圾回收器基本都会选择标记复制法。</p><p>3、标记整理算法</p><p>特点： 相对于标记复制法不会浪费内存空间，相对标记清除法则可以避免空间碎片，但是速度比其他两个算法慢。</p><p>适合场景： 内存吃紧，又要避免空间碎片的场景，老年代想要避免空间碎片问题的话通常会使用标记整理法。</p><h4 id="3-类加载过程【必须】"><strong>3.</strong> <strong>类加载过程【必须】</strong></h4><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps2.jpg)加载 -&gt; 验证 -&gt; 准备 -&gt; 解析 -&gt; 初始化：</p><p>Ø 加载:</p><p>1.获取类的二进制字节流</p><p>2.将字节流代表的静态存储结构转化为方法区运行时数据结构，在堆中生成class字节码对象</p><p>Ø 验证:连接过程的第一步,确保class文件的字节流中的信息符合当前虚拟机的要求,不会危害虚拟机的安全</p><p>Ø 准备:为类的静态变量分配内存并将其初始化为默认值</p><p>Ø 解析:虚拟机将常量池内符号引用替换成直接引用的过程</p><p>Ø 初始化:执行类构造器的init的过程</p><h4 id="4-类的实例化方法调用顺序"><strong>4.</strong> <strong>类的实例化<strong><strong>方法调用</strong></strong>顺序</strong></h4><p>此题考察的是类加载器实例化时进行的操作步骤（加载–&gt;连接-&gt;初始化）。<br>父类静态代变量、<br>父类静态代码块、<br>子类静态变量、<br>子类静态代码块、<br>父类非静态变量（父类实例成员变量）、<br>父类构造函数、<br>子类非静态变量（子类实例成员变量）、<br>子类构造函数。</p><h4 id="5-对象创建过程"><strong>5.</strong> <strong>对象创建过程</strong></h4><p>Ø JVM会先去方法区下找有没有所创建对象的类存在，有就可以创建对象了，没有则把该类加载到方法区</p><p>Ø 在创建类的对象时，首先会先去堆内存中分配空间</p><p>Ø 当空间分配完后，加载对象中所有的非静态成员变量到该空间下</p><p>Ø 所有的非静态成员变量加载完成之后，对所有的非静态成员进行默认初始化</p><p>Ø 所有的非静态成员默认初始化完成之后，调用相应的构造方法到栈中</p><p>Ø 在栈中执行构造函数时，先执行隐式，再执行构造方法中书写的代码</p><p>Ø 执行顺序：静态代码库，构造代码块，构造方法</p><p>Ø 当整个构造方法全部执行完，此对象创建完成，并把堆内存中分配的空间地址赋给对象名（此时对象名就指向了该空间）</p><h4 id="6-Java-内存溢出"><strong>6.</strong> <strong>Java****内存溢出</strong></h4><p><a href="https://blog.csdn.net/zuishengmengsi1990/article/details/120093015">(48条消息) 9.内存溢出_zuishengmengsi1990的博客-CSDN博客</a></p><p>Ø Java堆溢出：</p><p>​Java堆用于存储对象实例，只要不断地创建对象，当对象数量到达最大堆的容量限制后就会产生内存溢出异常。最常见的内存溢出就是存在大的容器，而没法回收，比如：Map，List等。</p><p>java.lang.OutOfMemoryError: Java heap space</p><p>Ø 虚拟机栈和本地方法栈溢出</p><p>​如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常，请见情况：递归调用，无法退出。</p><p>​如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常，线程创建过多导致，每个线程需要申请栈空间。</p><p>java.lang.OutOfMemoryError: unable to create new native thread</p><p>Ø 元数据区域的内存溢出：</p><p>java.lang.OutOfMemoryError: Metaspace</p><p>元数据区域或方法区是用于存放Class的相关信息，如类名、访问修饰符、常量池、字段描述、方法描述等。我们可以通过在运行时产生大量的类去填满方法区，直到溢出，如：代理的使用(CGlib)、大量JSP或动态产生JSP文件的应用（JSP第一次运行时需要编译为Java的Servlet类）、基于OSGi的应用（即使是同一个类文件，被不同的加载器加载也会视为不同的类）等</p><p>Ø 运行时常量池的内存溢出：</p><p>String.intern()是一个Native方法，它的作用是：如果字符串常量池中已经包含一个等于此String对象的字符串，则返回代表池中这个字符串的String对象；否则，将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。</p><p>java.lang.OutOfMemoryError : PermGen space</p><p>Ø 直接内存溢出</p><p>使用这个unsafe类的native方法allocateMemory去直接申请内存导致的内存溢出。</p><p>总结：记住前两个！！</p><h4 id="7-java内存泄漏"><strong>7.</strong> <strong>java内存泄漏</strong></h4><p><a href="https://zhuanlan.zhihu.com/p/368830445">Java 内存泄漏原因、解决办法及泄漏排查 - 知乎 (zhihu.com)</a></p><h2 id="1-4-、多线程【必须】"><strong>1.4</strong>**、多线程【必须】**</h2><h4 id="1-线程和进程的区别？"><strong>1.</strong> <strong>线程和进程的区别？</strong></h4><p>Ø 进程：进程指正在运行的程序。确切的来说，当一个程序进入内存运行，即变成一个进程，进程是处于运行过程中的程序，并且具有一定独立功能。</p><p>Ø 线程：线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。</p><p><strong>简而言之：一个程序运行后至少有一个进程，一个进程中可以包含多个线程</strong></p><h4 id="2-创建线程的方式"><strong>2.</strong> <strong>创建线程的方式</strong></h4><p>l 继承Thread类</p><p>优点:代码简单</p><p>缺点:该类无法继承别的类</p><p>l 实现Runnable接口</p><p>优点:继承其他类.统一实现该接口的实例可以共享资源.</p><p>缺点:代码复杂.</p><p>l 实现Callable接口</p><p>Callable中的call()方法有返回值,其他和Runnable的run()方法一样.</p><p>l 线程池方式</p><p>优点:实现自动化装配,易于管理,循环利用资源.</p><p>总结：</p><p>new Thread</p><p>new Thread的子类</p><p>而Runnable 和 Callable 是线程需要执行的任务</p><p>线程启动： start()【是的】 vs  run()【不是】</p><p>Runnable和 Callable 的区别，Callabe可以有返回值。</p><h4 id="3-Java中wait方法和sleep方法的不同之处"><strong>3.</strong> <strong>Java中wait方法和sleep方法的不同之处</strong></h4><p><strong>共同点：</strong></p><p>​wait() ，wait(long) 和 sleep(long) 的效果都是让当前线程暂时放弃 CPU 的使用权，进入阻塞状态</p><p><strong>不同点：</strong></p><p>Ø 方法归属不同</p><p>sleep(long) 是 Thread 的静态方法，而 wait()，wait(long) 都是 Object 的成员方法，每个对象都有</p><p>Ø 醒来时机不同</p><p>执行 sleep(long) 和 wait(long) 的线程都会在等待相应毫秒后醒来</p><p>wait(long) 和 wait() 还可以被 notify 唤醒，wait() 如果不唤醒就一直等下去</p><p>它们都可以被打断唤醒</p><p>Ø 锁特性不同（重点）</p><p>wait 方法的调用必须先获取 wait 对象的锁，而 sleep 则无此限制；</p><p>wait 方法执行后会释放对象锁，允许其它线程获得该对象锁（我放弃 cpu，但你们还可以用）；</p><p>而 sleep 如果在 synchronized 代码块中执行，并不会释放对象锁（我放弃 cpu，你们也用不了）。</p><h4 id="4-线程的状态"><strong>4.</strong> <strong>线程的状态</strong></h4><p>Ø 就绪(Runnable):线程准备运行，不一定立马就能开始执行。</p><p>Ø 运行中(Running)：进程正在执行线程的代码。</p><p>Ø 等待中(Waiting):线程处于阻塞的状态，等待外部的处理结束。</p><p>Ø 睡眠中(Sleeping)：线程被强制睡眠。</p><p>Ø 阻塞：</p><p>I/O阻塞(Blocked on I/O)：等待I/O操作完成。</p><p>同步阻塞(Blocked on Synchronization)：等待获取锁。</p><p>Ø 死亡(Dead)：线程完成了执行。</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps3.jpg)</p><p><strong>总结：</strong></p><p>start  -&gt;  运行    -&gt;   结束</p><p>运行 -&gt;  wait() / join() 【等待】  -&gt;  notify()/notifyAll()   -&gt; 运行</p><p>运行 -&gt;  sleep(10)/wait(10)/join(10) 【超时等待】  -&gt;  notify()/notifyAll()/超时  -&gt; 运行</p><p>运行 -&gt;  synchroinzied 争锁  【阻塞】  -&gt;  获取锁   -&gt; 运行</p><h4 id="5-线程池的种类-【必须】"><strong>5.</strong> <strong>线程池的种类</strong>**【必须】**</h4><p>Ø newCachedThreadPool创建一个<strong>可缓存线程池</strong>，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p><p>Ø newFixedThreadPool 创建一个<strong>定长线程池</strong>，可控制线程最大并发数，超出的线程会在队列中等待。</p><p>Ø newScheduledThreadPool 创建一个<strong>定长线程池，支持定时及周期性任务执行</strong>。</p><p>Ø newSingleThreadExecutor 创建一个<strong>单线程化的线程池</strong>，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行</p><p>因为在项目中，线程的创建和销毁非常消耗资源，所以使用在多线程场景的时候会使用线程池，根据自己业务逻辑的需求，使用不同的线程池。</p><p><strong>一个都不建议使用！！！！</strong></p><p>总结：</p><p>java.util.concurrent：JUC，java并发包，用于多线程开发！！！</p><p>Executors：用于创建线程池对象的工具类：</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps4.jpg)</p><p>ThreadPoolExecutor  线程池类，要记住！！</p><h4 id="6-线程池的核心参数？【必须】"><strong>6.</strong> <strong>线程池的核心参数？【必须】</strong></h4><p>自己找！！看tlias上的视频</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps5.jpg)</p><h4 id="7-线程池都有哪些状态？"><strong>7.</strong> <strong>线程池都有哪些状态？</strong></h4><p>Ø RUNNING：这是最正常的状态，接受新的任务，处理等待队列中的任务。</p><p>Ø SHUTDOWN：不接受新的任务提交，但是会继续处理等待队列中的任务。</p><p>Ø STOP：不接受新的任务提交，不再处理等待队列中的任务，中断正在执行任务的线程。</p><p>Ø TIDYING：所有的任务都销毁了，workCount 为 0，线程池的状态在转换为 TIDYING 状态时，会执行钩子方法 terminated()。</p><p>Ø TERMINATED：terminated()方法结束后，线程池的状态就会变成这个</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps6.jpg)</p><h4 id="8-线程同步"><strong>8.</strong> <strong>线程同步</strong></h4><p>Ø 线程同步：实现共享数据的一致性，让多个线程有序的访问共享资源，而不是同时操作共享资源</p><p>Ø 方法同步：用关键字 synchonized 可将方法声明为同步</p><p>Ø 同步代码块：synchornized 获取的是参数中的对象锁，synchornized(obj){}</p><p>Ø 同步类的属性：在类中声明多个object对象，对每个代码块分别操作类的不同属性加锁的时候就分别使用object对象来作为锁，这样能保证多个线程同时运行，分别操作不同的对象</p><p>Ø synchronized 静态方法与非静态方法：非静态同步方法的锁对象是this，静态的同步方法的锁对象是当前类的字节码对象</p><p>Ø 当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本</p><p><a href="https://blog.csdn.net/bird_tp/article/details/108537524">(48条消息) java如何实现线程同步_bird_tp的博客-CSDN博客_java线程同步</a><a href="https://blog.csdn.net/bird_tp/article/details/108537524">(48条消息) java如何实现线程同步_bird_tp的博客-CSDN博客_java线程同步</a></p><h4 id="9-volatile与synchronized的区别，底层实现"><strong>9.</strong> <strong>volatile与synchronized的区别，底层实现</strong></h4><p>l 首先两者都是用来确保数据的一致性的，volatile它能够使变量在值发生改变时尽快让其他线程知道，为什么要这么做呢？编译器为了加快程序运行速度，对一些变量的写操作会现在寄存器或者是cpu缓存上进行，最后才写入内存，这个过程，变量的新值对其他线程是不可见的，而volatile的作用就是使它修饰的变量的读写操作都必须在内存中进行</p><p>区别：</p><p>l Volatile本质是告诉jvm当前变量在寄存器中的值是不安全的需要从内存中读取，sychronized则是锁定当前变量，只有当前线程可以访问到该变量其他线程被阻塞</p><p>l Volatile只能作用于变量，synchronized则是可以使用在变量和方法上</p><p>l Volatile仅能实现变量的修改可见性,但不具备原子特性,而synchronized则可以保证变量的修改可见性和原子性</p><p>l volatile不会造成线程的阻塞,而synchronized可能会造成线程的阻塞</p><p>l volatile标记的变量不会被编译器优化,而synchronized标记的变量可以被编译器优化</p><p>注意事项：</p><p>l 在使用volatile关键字时要慎重，并不是只要简单类型变量使用volatile修饰，对这个变量的所有操作都是原来操作，当变量的值由自身的上一个决定时，如n=n+1、n++ 等，volatile关键字将失效，只有当变量的值和自身上一个值无关时对该变量的操作才是原子级别的，如n = m + 1，这个就是原级别的。所以在使用volatile关键时一定要谨慎，如果自己没有把握，可以使用synchronized来代替volatile</p><h4 id="10-什么是死锁？【必须】"><strong>10.</strong> <strong>什么是死锁？【必须】</strong></h4><p>当线程 A 持有独占锁a，并尝试去获取独占锁 b 的同时，线程 B 持有独占锁 b，并尝试获取独占锁 a 的情况下，就会发生 AB 两个线程由于互相持有对方需要的锁，而发生的阻塞现象，我们称为死锁。</p><h4 id="11-怎么防止死锁？【必须】"><strong>11.</strong> <strong>怎么防止死锁？【必须】</strong></h4><p>l 尽量使用 tryLock(long timeout, TimeUnit unit)的方法(ReentrantLock、ReentrantReadWriteLock)，设置超时时间，超时可以退出防止死锁。</p><p>l 尽量使用 Java.util.concurrent 并发类代替自己手写锁。</p><p>l 尽量降低锁的使用粒度，尽量不要几个功能用同一把锁。</p><p>l 尽量减少同步的代码块。</p><h2 id="1-5-、IO模型【3年左右】"><strong>1.5</strong>**、I<strong><strong>O</strong></strong>模型【3年左右】**</h2><h4 id="IO对比总结"><strong>IO对比总结</strong></h4><p>Ø IO 的方式通常分为几种：同步阻塞的 BIO、同步非阻塞的 NIO、异步非阻塞的 AIO。</p><p>Ø BIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，但程序直观简单易理解。</p><p>Ø NIO 方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4 开始支持。</p><p>Ø AIO 方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。</p><p>举个例子：</p><p>Ø 同步阻塞：你到饭馆点餐，然后在那等着，啥都干不了，饭馆没做好，你就必须等着！</p><p>Ø 同步非阻塞：你在饭馆点完餐，就去玩儿了。不过玩一会儿，就回饭馆问一声：好了没 啊！</p><p>Ø 异步非阻塞：饭馆打电话说，我们知道您的位置，一会给你送过来，安心玩儿就可以了， 类似于现在的外卖。</p><p><a href="https://www.jianshu.com/p/670033e5b916">8. Java-IO模型（BIO、NIO、AIO） - 简书 (jianshu.com)</a></p><h2 id="1-6-、Java容器【必须】"><strong>1.6</strong>**、Java容器【必须】**</h2><h4 id="1-Java-容器都有哪些？"><strong>1.</strong> <strong>Java 容器都有哪些？</strong></h4><p>Java 容器分为 Collection 和 Map 两大类，其下又有很多子类，如下所示：</p><p>Collection：List【ArrayList】  Set【HashSet】</p><p>List、ArrayList、LinkedList、Vector、Stack、Set、HashSet、LinkedHashSet、TreeSet</p><p>Map：</p><p>HashMap、LinkedHashMap、TreeMap、ConcurrentHashMap、Hashtable</p><h4 id="2-数组与链表的区别？"><strong>2.</strong> <strong>数组与链表的区别？</strong></h4><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps7.png)</p><p>1、存取方式上，数组可以顺序存取或者随机存取，而链表只能顺序存取；</p><p>2、存储位置上，数组逻辑上相邻的元素在物理存储位置上也相邻，而链表不一定；</p><p>3、存储空间上，链表由于带有指针域，存储密度不如数组大；</p><p>4、按序号查找时，数组可以随机访问，时间复杂度为O(1)，而链表不支持随机访问，平均需要O(n)；</p><p>5、按值查找时，若数组无序，数组和链表时间复杂度均为O(n)，但是当数组有序时，可以采用折半查找将时间复杂度降为O(logn)；</p><p>6、插入和删除时，数组平均需要移动n/2个元素，而链表只需修改指针即可；</p><p>7、空间分配方面：<br>　　数组在静态存储分配情形下，存储元素数量受限制，动态存储分配情形下，虽然存储空间可以扩充，但需要移动大量元素，导致操作效率降低，而且如果内存中没有更大块连续存储空间将导致分配失败；<br>　　链表存储的节点空间只在需要的时候申请分配，只要内存中有空间就可以分配，操作比较灵活高效；</p><p><strong>总结：</strong></p><p>​<strong>数组随机访问性强，查找速度快，但是插入和删除效率低</strong>**；而且数组大小固定，不能动态扩展，数组要求必须有连续的内存空间，内存空间要求高。**</p><p>​<strong>链表插入删除速度快，大小不固定，拓展很灵活。但是不能随机查找</strong>**，必须从第一个开始遍历，查找效率低**</p><h4 id="3-Map集合几种遍历方式"><strong>3.</strong> <strong>Map集合几种遍历方式?</strong></h4><p>第一种: 通过Map.keySet获取key的Set集合，之后在通过key进行遍历</p><p>第二种: 通过Map.values获取所有value，之后再进行遍历</p><p>第三种: 通过Map.entrySet获取Set集合，之后通过iterator进行遍历</p><p>第四种: 直接通过foreach对Map.entrySet获取的Set集合进遍历</p><h4 id="4-List集合的特性"><strong>4.</strong> <strong>List集合的特性</strong></h4><p>有序可重复的集合</p><h4 id="5-如何实现数组和-List-之间的转换？"><strong>5.</strong> <strong>如何实现数组和 List 之间的转换？</strong></h4><p>数组转 List：使用 Arrays.asList(array) 进行转换。</p><p>List 转数组：使用 List 自带的 toArray() 方法。</p><h4 id="6-ArrayList-和-LinkedList-有什么区别"><strong>6.</strong> <strong>ArrayList 和 LinkedList 有什么区别</strong></h4><p><strong>Ø</strong> <strong>ArrayList是实现了基于动态数组的数据结构，LinkedList是基于链表结构。</strong></p><p>Ø 对于随机访问的get和set方法，ArrayList要优于LinkedList，因为LinkedList要移动指针。</p><p>Ø 对于新增和删除操作add和remove，LinkedList比较占优势，因为ArrayList要移动数据。</p><p>总结：抓住第一个问题！！</p><h4 id="7-list、set和map的区别"><strong>7.</strong> <strong>list、set和map的区别</strong></h4><p>list和set是实现了collection接口的。</p><p>List：1.可以允许重复的对象。</p><p>2.可以插入多个null元素。</p><p>​    3.是一个有序容器，保持了每个元素的插入顺序，输出的顺序就是插入的顺序。</p><p>4.常用的实现类有 ArrayList、LinkedList 和 Vector。ArrayList 最为流行，它提供了使用索引的随意访问，而 LinkedList 则对于经常需要从 List 中添加或删除元素的场合更为合适。</p><p>Set：</p><p>1.不允许重复对象</p><p>\2. 无序容器，你无法保证每个元素的存储顺序，TreeSet通过 Comparator  或者 Comparable 维护了一个排序顺序。</p><p>​    \3. 只允许一个 null 元素Set 接口最流行的几个实现类是 HashSet、LinkedHashSet 以及 TreeSet。最流行的是基于 HashMap 实现的 HashSet；TreeSet 还实现了 SortedSet 接口，因此 TreeSet 是一个根据其 compare() 和 compareTo() 的定义进行排序的有序容器。</p><p>Map不是collection的子接口或者实现类。Map是一个接口。</p><p>1.Map 的 每个 Entry 都持有两个对象，也就是一个键一个值，Map 可能会持有相同的值对象但键对象必须是唯一的。</p><p>2.TreeMap 也通过 Comparator或者Comparable 维护了一个排序顺序。</p><p>3.Map 里你可以拥有随意个 null 值但最多只能有一个 null 键。</p><p>4.Map 接口最流行的几个实现类是 HashMap、LinkedHashMap、Hashtable 和 TreeMap。（HashMap、TreeMap最常用）</p><p><strong>总结：</strong></p><p><strong>list和set都是实现了<strong><strong>collection</strong></strong>接口的集合，其中list是有序可重复的，而set是无须不可重复的；</strong></p><p><strong>而<strong><strong>M</strong></strong>ap是一个独立的接口，不是<strong><strong>collection</strong></strong>的子接口，map中存储的是key</strong>**-**<strong>value键值对的数据。</strong></p><h4 id="8-HashMap的特性"><strong>8.</strong> <strong>HashMap的特性</strong></h4><p>l Map集合的特点</p><p>一、Map是一个双列集合,将键映射到值的对象.</p><p>二、Map集合的数据结构,只针对键有效,跟值没关系.</p><p>三、一个映射不能包含重复的键,每个键最多只能映射一个值.</p><p>l HashMap的数据结构</p><p>一、哈希表结构:数组+链表</p><p>二、通过哈希表结构配合对象的hashCode和equals方法就可以确保键的唯一性.</p><p>l HashMap和Hashtable的区别</p><p>一、HashMap是jdk1.2版本出现的,允许存储null键和null值</p><p>不同步(线程不安全):效率高</p><p>二、Hashtable是jdk1.0版本出现的,不允许存储null键和null值</p><p>同步(线程安全):效率低</p><h4 id="9-A-rrayList的扩容规则？"><strong>9.</strong> <strong>A****rrayList的扩容规则？</strong></h4><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps8.jpg)</p><h4 id="10-说一下-HashMap-的实现原理？【重中之重】"><strong>10.</strong> <strong>说一下 HashMap 的实现原理？【重中之重】</strong></h4><p>HashMap 基于 Hash 算法实现的，我们通过 put(key,value)存储，get(key)来获取。当传入 key 时，HashMap 会根据 key. hashCode() 计算出 hash 值，根据 hash 值将 value 保存在 bucket 里。当计算出的 hash 值相同时，我们称之为 hash 冲突，HashMap 的做法是用链表和红黑树存储相同 hash 值的 value。当 hash 冲突的个数比较少时，使用链表否则使用红黑树。</p><h4 id="11-说一下-HashSet-的实现原理？"><strong>11.</strong> <strong>说一下 HashSet 的实现原理？</strong></h4><p>HashSet 是基于 HashMap 实现的，HashSet 底层使用 HashMap 来保存所有元素，因此 HashSet 的实现比较简单，相关 HashSet 的操作，基本上都是直接调用底层 HashMap 的相关方法来完成，HashSet 不允许重复的值。</p><h4 id="12-CurrentHashMap了解吗"><strong>12.</strong> <strong>CurrentHashMap了解吗?</strong></h4><p>HashMap是线程不安全的 , 但是效率高 , HashTable是线程安全的 , 但是效率低.有没有一种对象是即是线程安全的 , 同时执行效率可以达到HashMap呢?</p><p>CurrentHashMap可以做到。底层实现通过分段加锁进行实现 , hashmap底层是数组加上链表实现的 , 那么一个线程来操作数据,只是操作数组中一个索引的数据. 如果此时对整个数组加锁,其他线程操作不了这个数组,所以效率低.其实线程也就操作数组的一个索引,对这个索引进行加锁 , 而锁对象就是这个索引所对应的值,其他线程来修改其他索引数据时,拿到的是其他索引的锁对象,从而提高了效率.</p><h2 id="1-7-、Java设计模式"><strong>1.7</strong>**、J<strong><strong>ava</strong></strong>设计模式**</h2><h4 id="1-常见设计模式"><strong>1.</strong> <strong>常见设计模式</strong></h4><p><strong>Ø</strong> <strong>工厂模式</strong>：一个抽象接口的实现，多个抽象接口的实现类，spring的beanFactory就是工厂模式   <a href="https://blog.csdn.net/qq_39504520/article/details/106364731">(48条消息) 工厂设计模式_coyhzx的博客-CSDN博客_工厂设计模式</a></p><p><strong>Ø</strong> <strong>单例模式</strong>：在内存中，保证对象的实例只有一个。</p><p>Ø 装饰者模式：对一个类进行装饰，增强其方法行为，如Java中的IO流就使用了装饰者模式</p><p><strong>Ø</strong> <strong>代理模式</strong>：比如sping AOP使用动态代理</p><p>Ø 适配器模式：io流，通过继承实现将一个接口适配到另一个接口，InputStreamReader类继承Reader接口，但要创建它们必须在构造函数中传入一个InputStream的实例，InputStreamReader的作用也就是将InputStream适配到Reader</p><p>Ø 状态模式：允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。</p><h4 id="2-单例设计模式中懒汉式和饿汉式的区别"><strong>2.</strong> <strong>单例设计模式中懒汉式和饿汉式的区别</strong></h4><p>l 饿汉式：</p><p><a href="//xn--fsq25gkxn7jnn8siz3b.xn--7brpxu1hg9cbzvg15a">//饿汉式单例类.在类初始化时</a>，已经自行实例化</p><p>public class Singleton1 {</p><p>​    private Singleton1() {}</p><p>​    private static final Singleton1 single = new Singleton1();</p><p>​    //静态工厂方法</p><p>​    public static Singleton1 getInstance() {</p><p>​        return single;</p><p>​    }</p><p>}</p><p>l 懒汉式：</p><p><a href="//xn--fsq25gkxn1wczws3ux.xn--4gq80bfmx2h0wg3uhclee6tg4kpiznndu4smlv1j6a">//懒汉式单例类.在第一次调用的时候实例化自己</a></p><p>public class Singleton {</p><p>​    private Singleton() {}</p><p>​    private static Singleton single=null;</p><p>​    //静态工厂方法</p><p>​    public static Singleton getInstance() {</p><p>​         if (single == null) {</p><p>​             single = new Singleton();</p><p>​         }</p><p>​        return single;</p><p>​    }</p><p>}</p><p>l 饿汉式就是类一旦加载，就把单例初始化完成，保证getInstance()的时候，单例就已经存在。</p><p>l 懒汉式比较懒，只有当调用getInstance的时候，才会去初始化这个单例</p><p>区别：</p><p>l 饿汉式是线程安全的，懒汉式是线程不安全的（即一个进程内有多个线程在在同时使用时可能会产生多个实例，可创建个静态内部类，产生一个单例对象，通过静态内部类返回获取这个对象）</p><p><a href="https://baijiahao.baidu.com/s?id=1712870063861265422&amp;wfr=spider&amp;for=pc">单例设计模式精讲 (baidu.com)</a></p><p>总结：能说出两三个以上的设计模式，重点掌握工厂和单例设计模式。</p><h1><strong>二、</strong> <strong>WEB</strong></h1><p><strong>1.</strong> <strong>cookie和session的区别与联系【必须】</strong></p><p>一、cookie数据存放在客户的浏览器上,session数据存放在服务器上.</p><p>二、很多浏览器限制站点最多保存20个cookie,单个cookie保存的数据不能超过4k.</p><p>三、cookie不是很安全,考虑安全应当使用session.</p><p>四、可以考虑将登录信息等重要信息存放为session,其它信息如果需要保留,可以放在cookie中.</p><p>五、session会在一定时间内保存在服务器上.</p><p>六、session会在浏览器关闭或者一段时间内销毁,也可以通过setMaxInactiveInterval(int)方法进行设置,或是通过invalidate()方法强制结束当前会话.cookie可以通过setMaxAge(int)方法设置缓存在客户端的时间.</p><p>七、一般情况下,session生成的sessionid都是保存在cookie中.</p><p><strong>总结:</strong></p><p><strong>cookie:在客户端保存数据,不安全.只能保存字符串,且是少量数据.</strong></p><p><strong>session:在服务器端保存数据,安全.可以保存对象数据,数据无限制.</strong></p><p>Session是基于cookie的，session的id是存在cookie中的</p><p><strong>2.</strong> <strong>如果客户端禁止cookie，session 还能用吗？【必须】</strong></p><p>可以用，session 只是依赖 cookie 存储 sessionid，如果 cookie 被禁用了，可以使用 url 中添加 sessionid 的方式保证 session 能正常使用。</p><p>url重写！！</p><p><strong>3.</strong> <strong>Get方法和Post方法区别【必须】</strong></p><p>get:查询、请求参数 不安全,提交的数据量小</p><p>post:添加或更新数据、提交数据比较安全、提交的数据量无限制.</p><p>一、get方法用于信息获取,他是安全的,而post方法是用于修改服务器上资源的请求.</p><p>二、get请求的数据会附在url之后,而post方法提交的数据则放置在http报文实体的主体里,所以post方法的安全性比get方法要高.</p><p>三、get方法传输的数据量一般限制在2kb,post方法对于数据大小是无限制的.</p><p><strong>4.</strong> <strong>servlet的生命周期及常用方法</strong></p><p>l init()方法:在servlet的生命周期中,仅执行一次init()方法.</p><p>l service()方法:它是servlet的核心,每当客户请求一个httpservlet对象,该对象的service()方法就要调用,而且传递给这个方法一个”请求”对象和一个”响应”对象作为参数.</p><p>l destory()方法:仅执行一次,在服务器端停止且卸载servlet时执行该方法.</p><p>解决servlet线程安全</p><p>一、继承SingleThreadModel,消耗服务器内存,降低性能.并且过时,不推荐.</p><p>二、尽量避免使用全局变量,推荐.</p><p>三、通过使用ThreadLocal.</p><p><strong>5.</strong> <strong>过滤器有哪些作用，以及过滤器的生命周期？【必须】</strong></p><p>生命周期：每个Filter在tomcat启动时进行初始化，每个Filter只有一个实例对象</p><p>l Init:在服务器启动时会创建Filter实例</p><p>l doFilter:这个方法会在用户每次访问“目标资源”时执行</p><p>l destroy():服务器关闭时销毁Filter对象</p><p>作用：</p><p>l 验证客户是否来自可信网络</p><p>l 对客户提交的数据进行重新编码</p><p>l 过滤掉客户的某些不应该出现的词汇</p><p>l 验证用户是否可以登录</p><p>l 验证客户的浏览器是否支持当前的应用</p><p>l 记录系统日志</p><p><strong>6.</strong> <strong>转发和重定向的区别</strong></p><p>一、重定向是浏览器发送请求并收到响应以后再次向一个新地址发请求;转发是服务器收到请求后为了完成响应转到另一个资源.</p><p>二、重定向中有两次请求对象,不共享数据;转发只产生一次请求对象且在组件间共享数据.</p><p>三、重定向后地址栏地址改变,而转发不会.</p><p>四、重定向的新地址可以是任意地址;转发必须是同一个应用内的某个资源.</p><p>获取servlet的转发和响应重定向的方式</p><p>l 转发的方法:</p><p>通过HttpServletRequest的getRequestDispatcher()方法获得</p><p>通过ServletContext的getRequestDispatcher()方法获得</p><p>l 重定向的方法:</p><p>HttpServletResponse的sendRedirect()方法.</p><p><strong>7.</strong> <strong>ajax书写方式及内部主要参数</strong></p><p>主要参数:</p><p>一、url:要求为String类型的参数,发送请求的地址.</p><p>二、data:要求为Object或String类型,发送到服务器的数据.</p><p>三、type:要求为String类型,请求方式get或post.</p><p>四、datatype:要求为String类型,预期服务器返回的类型.</p><p>五、timeout:要求为number类型,设置请求超时时间.</p><p>六、async:要求为boolean类型,异步为true(默认),同步为false.</p><p>七、cache:要求为boolean类型,默认为true,是否从浏览器缓存中加载信息.</p><p>八、beforesend:要求为Function类型的参数.例如添加自定义http头.</p><p>ajax的优缺点:</p><p>l 优点:减轻服务器的负担,按需取数据,最大程度的减少冗余请求,局部刷新页面,减少用户心理和实际的等待时间,带来更好的用户体验.</p><p>l 缺点:ajax大量的使用了JavaScript和ajax引擎,这些取决于浏览器的支持,在编写的时候考虑对浏览器的兼容性.ajax只是局部刷新,所以页面的后退按钮是没有用的.</p><p><strong>8.</strong> <strong>Jquery常用选择器</strong></p><p>Jquery选择器总共有四大类:</p><p>基本选择器、层级选择器、过滤选择器和表单选择器.</p><p>l 基本选择器是Jquery最常用的选择器,也是最简单的选择器,他通过元素id,class和标签名来查找dom元素.</p><p>l 层级选择器是通过dom元素间的层次关系来获取元素,主要层次关系包括父子、后代、相邻、兄弟关系.</p><p>l 过滤选择器主要是通过特定的过滤规则筛选出所需的dom元素,过滤规则与css中的伪类选择器语法相同,即选择器都以一个冒号开头.</p><p>一、Jquery基本过滤选择器</p><p>二、Jquery内容过滤选择器</p><p>三、Jquery可见性过滤选择器</p><p>四、Jquery属性过滤选择器</p><p>五、Jquery子元素过滤选择器</p><p>六、Jquery表单对象属性过滤选择器</p><p>l 表单选择器:我们可以极其方便的获取表单的某个或某类型的元素.</p><p><strong>9.</strong> <strong>JSP和Servlet的区别</strong></p><p>l 什么是JSP:Java Server Pages(Java服务器端页面)动态页面</p><p>它和servlet技术一样,都是SUN公司定义的一种用于开发动态web资源的技术.</p><p>jsp=html+java</p><p>l jap执行原理</p><p>.jsp(翻译)–&gt;.java(编译)–&gt;.class(执行)</p><p>servlet:服务器端的小应用程序.适合编写java逻辑代码.</p><p>jsp:适合编写输出动态内容,但不适合编写java逻辑.</p><p><strong>10.</strong> <strong>JSP常用的标签</strong></p><p>l 请求转发：<a href="jsp:forward">jsp:forward</a></p><p>l 页面传递数据：<a href="jsp:param">jsp:param</a></p><p>l 输出标签：&lt;c:out&gt;</p><p>l 判读标签&lt;c:if&gt;</p><p>l 迭代标签&lt;c:foreach&gt;</p><p>l 多重判断标签&lt;c:choose&gt;</p><p>静态包含包含的是内容,动态包含包含的是结果.</p><p>静态包含不可以传递参数,而动态包含可以传递参数.</p><p><strong>11.</strong> <strong>jsp九大内置对象及作用</strong></p><p>l PageContext JSP的页面容器</p><p>l request 获取用户的请求信息</p><p>l response 服务器向客户端的回应信息</p><p>l session 用来保存每一个用户的信息</p><p>l application 表示所有用户的共享信息</p><p>l config 服务器配置信息，可以取得初始化参数</p><p>l out 页面输出</p><p>l page 但前页面对象，可以获取其他对象</p><p>l exception 异常对象</p><p><strong>12.</strong> <strong>JSP四大作用域及请求范围</strong></p><p>JSP四大作用域从小到大分别为:page,request,session,application.</p><p>l 第一个作用域是page,他只在当前页面有效,也就是用户的请求页面有效.</p><p>l 第二个作用域是request,他在当前第一次请求中有效.</p><p>l 第三个作用域是session,他在当前整个会话中有效.</p><p>l 第四个作用域是application,他在整个应用都有效.</p><p>PageContext:pageContext 存放的数据在当前页面有效.开发时使用较少.</p><p>ServletRequest:request 存放的数据在第一次请求(转发)中有效.使用非常多.</p><p>HttpSession:session 存放的数据在第一次会话中有效.使用的比较多.如存放登录信息,购物车</p><p>ServletContext:application 存放的数据在整个应用范围都有效.因为范围太大,应尽量少用.</p><p><strong>13.</strong> <strong>如何防止表单重复提交</strong></p><p>网络延迟时,重复点击提交按钮,有可能发生重复提交表单问题.</p><p>解决方案:</p><p>一、数据库主键唯一.</p><p>二、提交成功后重定向.</p><p>三、使用JavaScript解决,使用标记位,提交后隐藏或不可用提交按钮.</p><p>使用session解决:</p><p>生成唯一的Token(uuid)给客户端,客户端第一次提交时带着这个Token,后台与session中的进行对比.</p><p><strong>14.</strong> <strong>常见的http返回状态码【必须】</strong></p><p>100:告诉客户端应继续发送请求</p><p>200:请求响应成功</p><p>202:请求已被受理还未做出响应</p><p>301：永久重定向</p><p>302：暂时重定向</p><p>400:请求无效,常见的情况是请求参数有误,http头构建错误</p><p>404:访问不到资源</p><p>500:服务器后端错误</p><p>1开头的状态码是消息类型的.</p><p>2开头的状态码表示成功.</p><p>3开头的状态码表示需要重定向.</p><p>4开头的状态码表示请求错误.</p><p>5开头的状态码表示服务器错误.</p><p><strong>15.</strong> <strong>TCP和UDP的区别,HTTP协议【必须】</strong></p><p>l TCP协议提供安全可靠的网络传输服务,它是一种面向连接的服务.类似于打电话,必须先拨号.双方建立一个传递信息的通道传输.</p><p>l UDP协议是一种数据报协议,它传输的数据是分组报文,它是无连接的,不需要和目标通信方建立连接,类似于写信,所以它的传输不保证安全可靠.但适合大数据量的传输.</p><p>l HTTP协议是超文本传输协议,是一种相对于TCP来说更细致的协议,TCP以及UDP协议规范的是网络设备之间的通信规范,HTTP实在TCP协议的基础上针对用户的协议,用户服务具体体现在应用程序之间的交互,比如javaweb中客户端服务端体系就要用http协议来规范通信.</p><p>TCP和UDP在开发中很少见到,但是网络底层都有他们的影子,正常的会话级别的服务:如客户端服务器体系底层就说基于TCP协议.而邮件发送,短信发送等底层使用的是UDP协议.</p><p>HTTP协议,客户端/服务器体系的程序都使用HTTP协议来规范通信.</p><p><strong>16.</strong> <strong>tcp为什么要三次握手，两次不行吗？为什么？</strong></p><p>如果采用两次握手，那么只要服务器发出确认数据包就会建立连接，但由于客户端此时并未响应服务器端的请求，那此时服务器端就会一直在等待客户端，这样服务器端就白白浪费了一定的资源。若采用三次握手，服务器端没有收到来自客户端的再此确认，则就会知道客户端并没有要求建立请求，就不会浪费服务器的资源。</p><p><strong>17.</strong> <strong>说一下 tcp 粘包是怎么产生的？</strong></p><p>tcp 粘包可能发生在发送端或者接收端，分别来看两端各种产生粘包的原因：</p><p>发送端粘包：发送端需要等缓冲区满才发送出去，造成粘包；<br>接收方粘包：接收方不及时接收缓冲区的包，造成多个包接收。</p><p><strong>18.</strong> <strong>json的数据格式</strong></p><p>l Json的最初出现是专门为JavaScript准备的,它是一种轻量级的数据交换格式.</p><p>(1) 数据在名称/值对中;</p><p>(2) 数据由逗号隔开;</p><p>(3) 花括号保存对象</p><p>{”属性名”:”值”,”属性名”:”值”}</p><p>l Json对象数组:</p><p>[{”属性名”:”值”,”属性名”:”值”},{”属性名”:”值”,”属性名”:”值”}]</p><p>l 复杂格式:</p><p>{”属性名”:”值”,”属性名”:{”属性名”:”值”}}</p><p>json中的值是有限制的,对于简单类型来说,只能是字符串,数值(必须是十进制)、布尔值和null;对于复合类型来说,只能放数组或者对象,不能是正则、函数或者日期;</p><p>json在网络开发中有非常广泛的用途,但可以归纳为一句:可以用于接口开发及调用中使用的数据格式.一来用于服务端和JavaScript之间的数据交互,二来可以用于跨域传输数据的数据格式.</p><p>在项目中,前后端交互、接口开发中很多都使用json来作为数据传输格式.</p><p><strong>19.</strong> <strong>如何实现跨域？【必须】</strong></p><p>n 服务器端运行跨域 设置 CORS 等于 *；</p><p>n 在单个接口使用注解 @CrossOrigin 运行跨域；</p><p>l 使用 jsonp 跨域,JSONP 实现原理:</p><p>jsonp：JSON with Padding，它是利用script标签的 src 连接可以访问不同源的特性，加载远程返回的“JS 函数”来执行的。</p><p>总结：站在后端角度出发，在微服务角度来说，跨域需要在网关层面解决，只需要配置即可。</p><p>使用的是CORS解决方案！！</p><p><strong>20.</strong> <strong>Tomcat体系结构讲解【3年左右】</strong></p><p>Tomcat 或者 Jetty 就是一个“HTTP 服务器 + Servlet 容器”，我们也叫它们 Web 容器。</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps9.jpg)</p><p>Web服务器需要实现两个核心功能：</p><p>l 处理 Socket 连接，负责网络字节流与 Request 和 Response 对象的转化。</p><p>l 加载和管理 Servlet，以及具体处理 Request 请求。</p><p>因此 Tomcat 设计了两个核心组件连接器（Connector）和容器（Container）来分别做这两件事情。连接器负责对外交流，容器负责内部处理。</p><p>可参考：<a href="http://www.sohu.com/a/321678611_120176035">http://www.sohu.com/a/321678611_120176035</a></p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps10.jpg)</p><p>(1) Server<br>Server表示整个的Catalina Servlet容器。Tomcat提供了Server接口的一个默认实现，这通常不需要用户自己去实现。在Server容器中，可以包含一个或多个Service组件。<br>(2) Service<br>Service是存活在Server内部的中间组件，它将一个或多个连接器（Connector）组件绑定到一个单独的引擎（Engine）上。在Server中，可以包含一个或多个Service组件。Service也很少由用户定制，Tomcat提供了Service接口的默认实现，而这种实现既简单又能满应用。<br>(3) Connector<br>连接器（Connector）处理与客户端的通信，它负责接收客户请求，以及向客户返回响应结果。在Tomcat中，有多个连接器可以使用。<br>(4) Engine<br>在Tomcat中，每个Service只能包含一个Servlet引擎（Engine）。引擎表示一个特定的Service的请求处理流水线。作为一个Service可以有多个连接器，引擎从连接器接收和处理所有的请求，将响应返回给适合的连接器，通过连接器传输给用户。用户允许通过实现Engine接口提供自定义的引擎，但通常不需要这么做。<br>(5) Host<br>Host表示一个虚拟主机，一个引擎可以包含多个Host。用户通常不需要创建自定义的<br>Host，因为Tomcat给出的Host接口的实现（类StandardHost）提供了重要的附加功能。<br>(6) Context<br>一个Context表示了一个Web应用程序，运行在特定的虚拟主机中。什么是Web应用程序呢？在Sun公司发布的Java Servlet规范中，对Web应用程序做出了如下的定义：“一个Web应用程序是由一组Servlet、HTML页面、类，以及其他的资源组成的运行在Web服务器上的完整的应用程序。它可以在多个供应商提供的实现了Servlet规范的Web容器中运行”。一个Host可以包含多个Context（代表Web应用程序），每一个Context都有一个唯一的路径。用户 通 常 不 需 要 创 建 自 定 义 的 Context ， 因 为 Tomcat 给 出 的 Context 接 口 的 实 （ 类StandardContext）提供了重要的附加功能。凡是实现了Servlet规范的都可以成为Servlet容器</p><p><strong>21.</strong> <strong>tomcat 如何调优，涉及哪些参数</strong>**【3年左右】**</p><p>硬件上选择，操作系统选择，版本选择，jdk选择，配置jvm参数，配置connector的线程数量，开启gzip压缩，trimSpaces，集群等<br>可参考：<a href="https://link.jianshu.com?t=http://blog.csdn.net/lifetragedy/article/details/7708724">http://blog.csdn.net/lifetragedy/article/details/7708724</a></p><h1><strong>三、</strong> <strong>数据库【必须】</strong></h1><p><strong>1.</strong> <strong>事务的特性和隔离级别</strong></p><p>事务的特性：</p><p>l 原子性（Atomicity）</p><p>​原子性指事务是不可分割的工作单位，事务中的操作要么都发生，要么都不发生</p><p>l 一致性（Consistency）</p><p>​事务必须使数据库从一个一致性状态变换到另外一个一致性状态</p><p>l 隔离性（Isolation）</p><p>​事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p><p>l 持久性（Durability）</p><p>​持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p><p>隔离级别：</p><p>l 未提交读read uncommitted</p><p>​会发生 脏读、不可重复读、虚读</p><p>l 已提交读read committed//Oracle   SQL Server（系统事务）</p><p>​解决脏读，但是不可重复读和虚读有可能发生</p><p>l 重复读repeatable read//Mysql</p><p>​解决脏读和不可重复读，但是虚读有可能发生.</p><p>l 串行化serializable</p><p>​避免脏读，不可重复读，虚读的发生</p><p>不考虑隔离性会产生的问题：</p><p>l 脏读：脏读是读到了别的事务回滚前的脏数据。比如事务B执行过程中修改了数据X，在未提交前，事务A读取了X，而事务B却回滚了，这样事务A就形成了脏读。</p><p>l 不可重复读：事务A首先读取了一条数据，然后执行逻辑的时候，事务B将这条数据改变了，然后事务A再次读取的时候，发现数据不匹配了，就是所谓的不可重复读了</p><p>l 幻读：事务A首先根据条件索引得到N条数据，然后事务B改变了这N条数据之外的M条或者增添了M条符合事务A搜索条件的数据，导致事务A再次搜索发现有N+M条数据了，就产生了幻读。</p><p><strong>2.</strong> <strong>Mysql的体系结构</strong></p><p>l 连接层</p><p>最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端/服务端工具实现的类似于 TCP/IP的通 信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证 它所具有的操作权限。</p><p>l 服务层</p><p>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如 过程、函数等。在该层，服务器会解析查询并创建相应的内部 解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等， 最后生成相应的执行操作。如果是 select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p><p>l 引擎层</p><p>存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，</p><p>l 存储层 服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。</p><p>数据存储层，主要是将数据存储在文件系统之上，并完成与存储引擎的交互。和其他数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎上，插件式的存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps11.jpg)</p><p><strong>3.</strong> <strong>InnoDB，MyISAM存储引擎特性</strong></p><p>l InnoDB</p><p>InnoDB存储引擎是Mysql的默认存储引擎。InnoDB存储引擎提供了具有提交、回滚、崩溃恢复能力的事务安全。 但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些，并且会占用更多的磁盘空间以保留数据和索引。</p><p>l MyISAM</p><p>MyISAM 不支持事务、也不支持外键，其优势是访问的速度快，对事务的完整性没有要求或者以SELECT、INSERT 为主的应用基本上都可以使用这个引擎来创建表 。</p><p><strong>4.</strong> <strong>CHAR和<strong><strong>VARCHAR</strong></strong>的区别：</strong></p><p>Ø CHAR和VARCHAR类型在存储和检索方面有所不同</p><p>Ø CHAR列长度固定为创建表时声明的长度，长度值范围是1到255</p><p>Ø 当CHAR值被存储时，它们被用空格填充到特定长度，检索CHAR值时需删除尾随空格。</p><p><strong>5.</strong> <strong>delete、drop、truncate****区别</strong></p><p>l truncate 和 delete只删除数据，不删除表结构 ,drop删除表结构，并且释放所占的空间。</p><p>l 删除数据的速度，drop&gt; truncate &gt; delete</p><p>l delete属于DML语言，需要事务管理，commit之后才能生效。drop和truncate属于DDL语言，操作立刻生效，不可回滚。</p><p>l 使用场合：</p><p>Ø 当你不再需要该表时， 用 drop;</p><p>Ø 当你仍要保留该表，但要删除所有记录时， 用 truncate;</p><p>Ø 当你要删除部分记录时（always with a where clause), 用 delete.</p><p><strong>6.</strong> <strong>mysql 中 in 和 exists 区别</strong></p><p>mysql中的in语句是把外表和内表作hash 连接，而exists语句是对外表作loop循环，每次loop循环再对内表进行查询。一直大家都认为exists比in语句的效率要高，这种说法其实是不准确的。这个是要区分环境的。</p><p>如果查询的两个表大小相当，那么用in和exists差别不大。<br>如果两个表中一个较小，一个是大表，则子查询表大的用exists，子查询表小的用in：<br>not in 和not exists如果查询语句使用了not in 那么内外表都进行全表扫描，没有用到索引；而not extsts 的子查询依然能用到表上的索引。所以无论那个表大，用not exists都比not in要快。<br>1.EXISTS只返回TRUE或FALSE，不会返回UNKNOWN。</p><p>2.IN当遇到包含NULL的情况，那么就会返回UNKNOWN。</p><p><strong>7.</strong> <strong>数据库的三范式是什么？【了解】</strong></p><p>l 第一范式：强调的是列的原子性，即数据库表的每一列都是不可分割的原子数据项。</p><p>l 第二范式：要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性。</p><p>l 第三范式：任何非主属性不依赖于其它非主属性。</p><p><strong>8.</strong> <strong>Sql优化</strong></p><p><strong>总体方针：</strong></p><p>Ø 通过慢查询日志去寻找，哪些sql执行效率低。Mysql会将那些查询慢【时间阈值】的sql记录下来。</p><p>Ø 使用explain分析低效率的sql执行计划</p><p>Ø 针对低效率的sql执行计划分析</p><p>没有索引</p><p>索引失效</p><p>数据量太大</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps12.jpg)</p><p><strong>情形一、没有索引：</strong></p><p>l 针对查询的列创建索引，提高查询效率，但是索引太多，mysql也会出现选择困难，所以建立索引要有效，无效的索引需要删除。</p><p>策略：</p><p>Ø 针对那些经常用于where条件查询的字段构建索引，针对进程排序的字段也可以构建索引。</p><p>Ø 尽量选择较小的列</p><p>Ø 将where中用的比较频繁的字段建立索引</p><p><strong>情形二、索引失效：</strong></p><p>Ø select子句中避免使用‘*’</p><p>Ø 避免在索引列上使用计算，not，in和&lt;&gt;等操作</p><p>Ø 当只需要一行数据的时候使用limit 1</p><p>Ø 保证表单数据不超过200w，适时分割表</p><p>Ø 针对查询较慢的语句，可以使用explain来分析该语句具体的执行情况</p><p>Ø 避免查询时判断null，否则可能会导致全表扫描，无法使用索引;</p><p>Ø 避免like查询，否则可能导致全表扫描，可以考虑使用全文索引</p><p>Ø 能用union all的时候就不用union，union过滤重复数据要耗费更多的CPU资源</p><p>数据量太大：</p><p>l 分页查询优化</p><p>l 在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。</p><p>select * from table t where <a href="http://t.id">t.id</a> in（select id from table order by id limit 100000，10） ;</p><p>l 对于主键自增的表，可以把limit查询缓存某个位置的查询</p><p>Select * from table where id &gt; 100000 limit 10;</p><p>VS</p><p>Select * from table limit 100000,10</p><p>分库分表：</p><p>l 使用MyCat中间件实现。</p><p>全文索引技术：</p><p>l ElasticSearch ， solr</p><p>非关系型数据库：</p><p>l 不需要像关系型数据库一样维护表于表之间的关系，而是使用json这种灵活多变的形式，效率比Mysql提高很多</p><p><strong>9.</strong> <strong>分库分表方案</strong></p><p>l 一开始上来就是32个库，每个库32个表，1024张表这个分法，</p><p>基本上国内的互联网肯定都是够用了</p><p>无论是并发支撑还是数据量支撑都没问题</p><p>l 如果每个库正常承载的写入并发量是1000，那么32个库就可以承载32 * 1000 = 32000的写并发，如果每个库承载1500的写并发，32 * 1500 = 48000的写并发，接近5万/s的写入并发，前面再加一个MQ，削峰，每秒写入MQ 8万条数据，每秒消费5万条数据。1024张表，假设每个表放500万数据，在MySQL里可以放50亿条数据。每秒的5万写并发，总共50亿条数据，对于国内大部分的互联网公司来说都够了。</p><p>l 此方案最多可以扩展到32个数据库服务器，每个数据库服务器是一个库。如果还是不够？最多可以扩展到1024个数据库服务器，每个数据库服务器上面一个库一个表。因为最多是1024个表么。</p><p>服务器升级流程：</p><p>l 设定好几台数据库服务器，每台服务器上几个库，每个库多少个表，推荐是32库 * 32表，对于大部分公司来说，可能几年都够了</p><p>l 路由的规则，orderId 模 32 = 库，orderId / 32 模 32 = 表</p><p>l 扩容的时候，申请增加更多的数据库服务器，装好mysql，倍数扩容，4台服务器，扩到8台服务器，16台服务器</p><p>l 由dba负责将原先数据库服务器的库，迁移到新的数据库服务器上去，很多工具，库迁移，比较便捷</p><p>l 我们这边就是修改一下配置，调整迁移的库所在数据库服务器的地址</p><p>l 重新发布系统，上线，原先的路由规则变都不用变，直接可以基于2倍的数据库服务器的资源，继续进行线上系统的提供服务</p><p><strong>10.</strong> <strong>MySQL 索引是怎么实现的？</strong></p><p>索引是满足某种特定查找算法的数据结构，而这些数据结构会以某种方式指向数据，从而实现高效查找数据。</p><p>具体来说 MySQL 中的索引，不同的数据引擎实现有所不同，但目前主流的数据库引擎的索引都是 B+ 树实现的，B+ 树的搜索效率，可以到达二分法的性能，找到数据区域之后就找到了完整的数据结构了，所有索引的性能也是更好的。</p><p><strong>11.</strong> <strong>Mysql支持的索引类型</strong></p><p>l index  ----  普通索引,数据可以重复，没有任何限制。</p><p>l unique   ---- 唯一索引,要求索引列的值必须唯一，但允许有空值；如果是组合索引，那么列值的组合必须唯一。</p><p>l primary key ---- 主键索引,是一种特殊的唯一索引，一个表只能有一个主键，不允许有空值，一般是在创建表的同时创建主键索引。</p><p>l 组合索引 ----  在多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。</p><p>l fulltext ---- 全文索引,是对于大表的文本域：char，varchar，text列才能创建全文索引，主要用于查找文本中的关键字，并不是直接与索引中的值进行比较。</p><p><strong>12.</strong> <strong>索引失效问题</strong></p><p>7种引起索引失效的情境</p><p>l 如果条件中有or，即使其中有部分条件带索引也不会使用(这也是为什么尽量少用or的原因)，例子中user_id无索引。注意：要想使用or，又想让索引生效，只能将or条件中的每个列都加上索引</p><p>l 对于复合索引，如果不使用前列，后续列也将无法使用，类电话簿。</p><p>l like查询是以%开头</p><p>l 存在索引列的数据类型隐形转换，则用不上索引，比如列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引</p><p>l where 子句里对索引列上有数学运算，用不上索引</p><p>l where 子句里对有索引列使用函数，用不上索引</p><p>l 如果mysql估计使用全表扫描要比使用索引快,则不使用索引</p><p><strong>13.</strong> <strong>左连接 ，右连接，内连接和全外连接的4者区别</strong></p><p><strong>l</strong> <strong>left join （左连接）</strong>：返回包括左表中的所有记录和右表中连接字段相等的记录。</p><p>l right join （右连接）：返回包括右表中的所有记录和左表中连接字段相等的记录。</p><p><strong>l</strong> <strong>inner join （等值连接或者叫内连接）</strong>：只返回两个表中连接字段相等的行。</p><p>l full join （全外连接）：返回左右表中所有的记录和左右表中连接字段相等的记录[mysql不支持]。</p><p><strong>14.</strong> <strong>一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 MySQL 数据库，又插入了一条数据，此时 id 是几？</strong></p><p>l 表类型如果是 MyISAM ，那 id 就是 8。</p><p>l 表类型如果是 InnoDB，那 id 就是 6。<br>InnoDB 表只会把自增主键的最大 id 记录在内存中，所以重启之后会导致最大 id 丢失。</p><p><strong>15.</strong> <strong>说一下 MySQL 的行锁和表锁？【非必须】</strong></p><p>MyISAM 只支持表锁，InnoDB 支持表锁和行锁，默认为行锁。</p><p>表级锁：开销小，加锁快，不会出现死锁。锁定粒度大，发生锁冲突的概率最高，并发量最低。<br>行级锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率小，并发度最高。</p><p><strong>16.</strong> <strong>说一下乐观锁和悲观锁？【非必须】</strong></p><p>乐观锁：每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在提交更新的时候会判断一下在此期间别人有没有去更新这个数据。</p><p>悲观锁：每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻止，直到这个锁被释放。</p><p>数据库的乐观锁需要自己实现，在表里面添加一个 version 字段，每次修改成功值加 1，这样每次修改的时候先对比一下，自己拥有的 version 和数据库现在的 version 是否一致，如果不一致就不修改，这样就实现了乐观锁。</p><p><strong>17.</strong> <strong>高并发下，如何做到安全的修改同一行数据。</strong></p><p>使用悲观锁 悲观锁本质是当前只有一个线程执行操作，结束了唤醒其他线程进行处理。也可以缓存队列中锁定主键。</p><p><strong>18.</strong> <strong>数据库会死锁吗，举一个死锁的例子</strong></p><p>产生死锁的原因主要是：</p><p>（1）系统资源不足。<br>（2）进程运行推进的顺序不合适。<br>（3）资源分配不当等。</p><p>如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。其次，进程运行推进顺序与速度不同，也可能产生死锁。</p><p>产生死锁的四个必要条件：</p><p>（1） 互斥条件：一个资源每次只能被一个进程使用。<br>（2） 请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br>（3） 不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。<br>（4） 循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</p><p>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。</p><p><strong>19.</strong> <strong>聚集索引和非聚集索引的区别</strong></p><p>聚簇索引就是索引和记录紧密在一起。<br>非聚簇索引 索引文件和数据文件分开存放，索引文件的叶子页只保存了主键值，要定位记录还要去查找相应的数据块。</p><p><a href="https://blog.csdn.net/xishilife/article/details/120256375">(48条消息) 聚簇索引和非聚簇索引的区别_xishilife的博客-CSDN博客_聚簇索引和非聚簇索引的区别</a></p><p><strong>20.</strong> <strong>mysql数据碎片处理</strong></p><p>在长期的数据更改过程中, 索引文件和数据文件,都将产生空洞,形成碎片.我们可以通过一个nop操作(不产生对数据实质影响的操作), 来修改表.比如: 表的引擎为innodb , 可以 alter table xxx engine innodb。也可以使用optimize table 表名 来进行修复.</p><p>注意: 修复表的数据及索引碎片,就会把所有的数据文件重新整理一遍,使之对齐.这个过程,如果表的行数比较大,也是非常耗费资源的操作.所以不能频繁的修复.如果表的Update操作很频率,可以按周/月,来修复.</p><p>如果不频繁,可以更长的周期来做修复.</p><h1><strong>四、</strong> <strong>框架</strong></h1><h2 id="4-1、Spring-2"><strong>4</strong>**.1、Spring**</h2><h4 id="S-pring-有哪些主要模块？"><strong>S****pring 有哪些主要模块？</strong></h4><p>Ø spring core：框架的最基础部分，提供 ioc 和依赖注入特性。</p><p>Ø spring context：构建于 core 封装包基础上的 context 封装包，提供了一种框架式的对象访问方法。</p><p>Ø spring dao：Data Access Object 提供了JDBC的抽象层。</p><p>Ø spring aop：提供了面向切面的编程实现，让你可以自定义拦截器、切点等。</p><p>Ø spring Web：提供了针对 Web 开发的集成特性，例如文件上传，利用 servlet listeners 进行 ioc 容器初始化和针对 Web 的 ApplicationContext。</p><p>Ø spring Web mvc：spring 中的 mvc 封装包提供了 Web 应用的 Model-View-Controller（MVC）的实现。</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps13.jpg)</p><h4 id="IOC和DI【重点】-2"><strong>IOC和DI【重点】</strong></h4><p>l IOC(控制反转).将对在自身对象中的一个内置对象的控制反转,反转后不再由自己本身的对象进行控制这个内置对象的创建,而是由第三方系统去控制这个内置对象的创建.简单来说就是把本来在类内部控制的对象,反转到类外部进行创建后注入,不再由类本身进行控制,这就是IOC本质. 对象交由spring创建和管理！</p><p>l DI(依赖注入).自身对象中的内置对象是通过注入的方式进行创建.</p><p>l IOC和DI的关系.</p><p>​ioc就是容器,di就是注入这一行为,那么di确实就是ioc的具体功能的实现.而ioc则是di发挥的平台和空间.所以说,ioc和di即是相辅相成的搭档.最重要的是,他们都是为了实现解耦而服务的.</p><p>l DI是如何实现的.</p><p>​依赖注入可以通过setter方法注入、构造注入、接口注入三种方法来实现,Spring支持setter注入和构造器注入、@Autowired自动注入,通常使用构造器注入来注入必须的依赖关系,对于可选的依赖关系,则setter注入是更好的选择,setter注入需要类提供无参构造器或者无参的静态工厂方法来创建对象.</p><h4 id="Spring-AOP【重点】-2"><strong>Spring AOP【重点】</strong></h4><p>Spring AOP的面向切面编程【它可以在不改动原来代码的基础上对方法进行增强】,是面向对象编程的一种补充,用于处理系统中分布的各个模块的横切关注点,比如事务管理、日志、缓存、统一异常处理等.它是使用动态代理实现的,在内存中临时为增强某个方法生成一个AOP对象,这个对象包含目标对象的所有方法,在特定的切入点做了增强处理,并回调原来的方法.</p><p>Spring AOP的动态代理主要有两种方式实现,JDK动态代理和cglib动态代理.<strong>JDK动态代理</strong>通过反射来接受被代理的类,但是被代理的类必须<strong>实现接口</strong>,核心是InvacationHandler和Proxy类.cglib动态代理的类一般是没有实现接口的类,cglib是一个代码生成的类库,可以在运行时动态生成某个类的子类.所以,<strong>cglib是通过继承的方式</strong>做的动态代理,因此如果某个类被标记为final,那么它是无法使用cglib做动态代理的.</p><p>AOP能做什么:</p><p>l 降低模块的耦合度.</p><p>l 使系统容易扩展</p><p>l 避免修改业务代码,避免引入重复代码,更好的代码复用.</p><p>AOP怎么用:</p><p>l 前置通知:某方法调用前发出通知.</p><p>l 后置通知:某方法完成之后发出通知.</p><p>l 返回后通知:方法正常返回后,调用通知.在方法,正常退出发出通知.</p><p>l 异常通知:抛出异常后通知:在方法抛出异常退出时执行的通知.在方法调用时,异常退出发出通知.</p><p>l 环绕通知:通知包裹在被通知的方法的周围.</p><p>JDK动态代理：基于接口实现</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps14.jpg)</p><p>Cglib：基于extends继承</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps15.jpg)</p><h4 id="Spring中Bean的作用域"><strong>Spring中Bean的作用域</strong></h4><p>Spring IOC容器在根据配置创建一个Bean对象实例时,可以为Bean指定实例的作用范围.</p><p><strong>l</strong> <strong>singleton(单例模式)</strong></p><p>IOC容器仅创建一个Bean实例,IOC容器每次返回的是同一个Bean实例.</p><p><strong>l</strong> <strong>prototype(原型模式)</strong></p><p>IOC容器仅创建多个Bean实例,IOC容器每次返回的是一个新的实例.</p><p>l request(HTTP请求)</p><p>该属性仅对HTTP请求产生作用,每次HTTP请求都会创建一个新的Bean,适用于WebApplicationContext.</p><p>l session(会话)</p><p>该属性仅用于HTTP Session,同一个session共享一个Bean实例.不同session使用不同的实例.</p><p>l global-session(全局会话,在spring5.x中已移除)</p><p>该属性仅用于HTTP Session,同session作用域不同的时候,所有session共享一个Bean实例.</p><p>总结：基本使用的都是singletong，而且spring默认就是singleton。面试官可能会说这个singleton会不会存在并发线程安全问题，问题是存在的。但是在程序中是不存在这个类问题的。</p><h4 id="Spring框架实现实例化和依赖注入的方式-2"><strong>Spring框架实现实例化和依赖注入的方式</strong></h4><p>l 实例化:</p><p>一、构造器实例化Bean</p><p>二、静态工厂方式实例化Bean</p><p>三、实例工厂方式实例化Bean</p><p>l 依赖注入:</p><p>一、基于构造函数的注入</p><p>二、基于set方法的注入</p><p>三、基于自动装配的注入</p><p>四、基于注解的依赖注入</p><h4 id="Spring常用注解-2"><strong>Spring常用注解</strong></h4><p>l @Component:用于标记在一个类上,表示当前类是spring的一个组件,是ioc的一个容器.他有三个衍生注解:@Controller、@Service、@Repository</p><p>l @Controller：用于标记在一个类上,代表这个类是控制层组件.</p><p>l @Service:用于标记在一个类上,代表这个类是业务层组件.</p><p>l @Repository:用于标记在一个类上,代表这个类是数据访问层组件.、</p><p>l @Bean</p><p>l @Autowired</p><p>l @Value</p><p>l @Transactional:写在类上用于指定当前类中的方法支持事务,写在方法上表示当前的方法支持事务</p><h4 id="BeanFactory类图结构-2"><strong>BeanFactory类图结构</strong></h4><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps16.png)</p><p><strong>BeanFactory</strong> <strong>VS A****pplicationContext</strong></p><p><strong>所有的Bean在启动的时候都进行了加载</strong> <strong>A****pplicationContext</strong></p><p><strong>Bean在使用的时候才会加载</strong>  <strong>BeanFactory</strong></p><p><strong>BeanFactory【容器】</strong>  <strong>VS  F****actoryBean【创建bean放入容器】</strong></p><h4 id="SpringBean的生命周期-2"><strong>Spring<strong><strong>B</strong></strong>ean的生命周期</strong></h4><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps17.jpg)</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps18.jpg)</p><p><strong>总结：创建的时候执行初始化方法</strong> <strong>init-method</strong>**【<strong><strong>@PostConstruct</strong></strong>】，在容器销毁的时候，执行销毁方法destroy****-method****【@<strong><strong>PreDestroy</strong></strong>】**</p><h4 id="Spring-怎么解决循环依赖问题？【重要】"><strong>Spring 怎么解决循环依赖问题？【重要】</strong></h4><p>spring对循环依赖的处理有三种情况：</p><p>Ø 构造器的循环依赖：这种依赖spring是处理不了的，直 接抛出BeanCurrentlylnCreationException异常。</p><p>Ø 单例模式下的setter循环依赖：通过“三级缓存”处理循环依赖。</p><p>Ø 非单例循环依赖：无法处理。</p><h4 id="Spring-框架中用到了哪些设计模式？"><strong>Spring 框架中用到了哪些设计模式？</strong></h4><p>Ø 工厂设计模式 : Spring使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象。</p><p>Ø 代理设计模式 : Spring AOP 功能的实现。</p><p>Ø 单例设计模式 : Spring 中的 Bean 默认都是单例的。</p><h4 id="Spring事务传播行为-2"><strong>Spring事务传播行为</strong></h4><p><strong>Ø</strong> <strong>PROPAGATION_REQUIRED: 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。</strong></p><p>Ø PROPAGATION_SUPPORTS: 支持当前事务，如果当前没有事务，就以非事务方式执行。</p><p>Ø PROPAGATION_MANDATORY: 支持当前事务，如果当前没有事务，就抛出异常。</p><p><strong>Ø</strong> <strong>PROPAGATION_REQUIRES_NEW: 新建事务，如果当前存在事务，把当前事务挂起。</strong></p><p>Ø PROPAGATION_NOT_SUPPORTED: 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</p><p>Ø PROPAGATION_NEVER: 以非事务方式执行，如果当前存在事务，则抛出异常。</p><p>Ø PROPAGATION_NESTED:如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。</p><h2 id="4-2、Spring-MVC"><strong>4</strong>**.2、Spring****MVC**</h2><h4 id="SpringMVC-执行流程-2"><strong>S<strong><strong>prin</strong></strong>gMVC****执行流程</strong></h4><ol><li><p>用户发送请求至前端控制器DispatcherServlet</p></li><li><p>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</p></li><li><p>处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</p></li><li><p>DispatcherServlet通过HandlerAdapter处理器适配器调用处理器</p></li><li><p>HandlerAdapter执行处理器(handler，也叫后端控制器)。</p></li><li><p>Controller执行完成返回ModelAndView</p></li><li><p>HandlerAdapter将handler执行结果ModelAndView返回给DispatcherServlet</p></li><li><p>DispatcherServlet将ModelAndView传给ViewReslover视图解析器</p></li><li><p>ViewReslover解析后返回具体View对象</p></li><li><p>DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。</p></li><li><p>DispatcherServlet响应用户</p></li></ol><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps19.jpg)</p><h4 id="SpringMVC常用注解-2"><strong>SpringMVC常用注解</strong></h4><p>Ø @RequestMapping:是一个用于处理请求地址映射的注解,可用于类或方法上.用于类上,表示类中所有响应请求的方法都是以该地址作为父路径</p><p>Ø @RequestParam:用于将指定的请求参数赋给方法中的形参.</p><p>Ø @PathVariable:可以获取URL中的动态参数.</p><p>Ø @RequestBody:用于读取request请求的body部分数据.</p><p>Ø @ResponseBody:用于将controller方法返回的对象,用流响应给客户端.</p><p>Ø @RestController:@Controller+@ResponseBody,用于标记在一个类上.</p><h4 id="springmvc获取参数的几种方式"><strong>springmvc获取参数的几种方式</strong></h4><p>l 借助原始ServletAPI的HttpServletRequest对象.</p><p>Controller的方法,</p><p>添加HttpServletRequest类型入参,</p><p>通过HttpServletRequest.getParameter()获取请求数据</p><p>l 借助控制器方法的形参</p><p>controller的方法,添加参数来接收表单的数据.</p><p>接收的类型包括:</p><p>一、基本类型或String</p><p>二、实体类类型</p><p>三、实体类关联对象</p><p>l Controller方法,接收实体类类型参数,而表单提交的是json数据时,可以使用@RequestBody注解获取全部请求体,配合jackson开源组件可以实现转换成实体类.要求json数据的key必须和实体类属性保持一致.</p><h4 id="Spring-MVC的异常处理-？"><strong>Spring MVC的异常处理 ？</strong></h4><p>Ø 编写异常处理类@ControllerAdvice/@RestControllerAdvice  +  在类中编写异常处理方法@ExceptionHandler(Exception.class)</p><p>Ø 编写异常处理类实现接口 HandlerExceptionResolver</p><h4 id="S-pringmvc文件上传？"><strong>S****pringmvc文件上传？</strong></h4><p>MultipartFile 接收文件  -&gt;  FileUpload提供api去做的 -&gt; request的请求体</p><p>设置文件大小：</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps20.jpg)</p><h4 id="SpringMVC拦截器？"><strong>SpringMVC拦截器？</strong></h4><p>HandlerInterceptor 接口！！</p><h2 id="4-3、Springboot-2"><strong>4</strong>**.3、Springboot**</h2><h4 id="spring-boot-有哪些方式可以实现热部署？-2"><strong>spring boot 有哪些方式可以实现热部署？</strong></h4><p>使用 devtools 启动热部署，添加 devtools 库，在配置文件中把 spring. devtools. restart. enabled 设置为 true；<br>使用 Intellij Idea 编辑器，勾上自动编译或手动重新编译。</p><h4 id="SpringBoot-的常用注解有哪些？-2"><strong>SpringBoot 的常用注解有哪些？</strong></h4><p>@SpringBootApplication:</p><p>包含@Configuration、@EnableAutoConfiguration、@ComponentScan通常用在主类上；</p><p>@ComponentScan:组件扫描。个人理解相当于，如果扫描到有@Component @Controller @Service等这些注解的类，则把这些类注册为bean*；<br>@Configuration:指出该类是 Bean 配置的信息源，相当于XML中的，一般加在主类上；</p><p>@Bean:相当于XML中的,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理；</p><p>@Import：用来导入其他配置类。</p><p>@ImportResource：用来加载xml配置文件。</p><p>@ControllerAdvice：包含@Component。可以被扫描到。统一处理异常。</p><p>@ExceptionHandler（Exception.class）：用在方法上面表示遇到这个异常就执行以下方法。</p><h4 id="SpringBoot-有哪几种读取配置的方式？-2"><strong>SpringBoot 有哪几种读取配置的方式？</strong></h4><p>方式一： 通过@Value(“${spring.datasource.url}”)这样的方式读取<br>方式二：通过@ConfigurationProperties(prefix = “spring.datasource”)这种写法系统会依据prefix前缀自动注入配置数据到数据实体变量,这种方式不错,但是存在缺陷,我们编写的PropertyPlaceholderConfigurer扩展字段会无效,所以如果只是单纯的读取配置而不需要额外操作时可使用这方式最简单</p><p>方式三： 我们可以直接注入Environment对象示例并读取properties对象属性environment.getProperty(“spring.datasource.database”);与方式一的本质差不多,我们不需要编写对应字段的模型对象,但是对于程序可阅读性不好友,复用率不高</p><p>方式四： 通过系统启动时候初始化Listener,使用PropertiesLoaderUtils工具类读取指定配置文件并获得Properties配置对象,我们可以随时随地使用该对象的属性,这种方式比较少用,针对比较自定义的配置数据可使用该方式</p><h4 id="SpringBoot-配置加载顺序？-2"><strong>SpringBoot 配置加载顺序？</strong></h4><p>在不指定要被加载文件时，默认的加载顺序：由里向外加载，所以最外层的最后被加载，会覆盖里层的属性，加载顺序依次为：</p><p>l 位于与jar包同级目录下的config文件夹，</p><p>l 位于与jar包同级目录下</p><p>l idea 环境下，resource文件夹下的config文件夹</p><p>l idea 环境下，resource文件夹下  （1-&gt;4, 外-&gt;里）</p><h4 id="Spring-Boot-如何定义多套不同环境配置-2"><strong>Spring Boot 如何定义多套不同环境配置</strong></h4><p>一、Spring Boot 环境设置机制</p><p>spring.profiles.active 属性可以为我们指定当前设置的环境，以此来选择我们的配置文件。例如我们有配置文件</p><p>application.yml</p><p>application-dev.yml</p><p>application-test.yml</p><p>application-prod.yml</p><p>当执行 java -jar xxx.jar --spring.profiles.actvie=test 此时，系统将启用 application.yml 和 application-test.yml配置文件。</p><p>当执行 java -jar xxx.jar --spring.profiles.actvie=prod 此时，系统将启用 application.yml 和 application-prod.yml 配置文件。</p><p>二、配置多环境</p><p>正如 第一 点所述，我们配置不同的配置文件</p><p>application.yml</p><p>application-dev.yml（开发环境）</p><p>application-test.yml（测试环境）</p><p>application-uat.yml（预发布环境）</p><p>application-prod.yml（生产环境）</p><p>三、指定环境</p><p>1 在 cmd 命令中指定</p><p>java -jar xxx.jar --spring.profiles.actvie=dev</p><p>2 在 application.yml 中指定</p><p>spring:  profiles:    active: dev</p><h2 id="4-4、Mybatis-Mybatis-plus-2"><strong>4</strong>**.4、Mybatis&amp;Mybatis-plus**</h2><h4 id="Mybatis中使用-和-书写占位符有什么区别"><strong>Mybatis中使用#和$书写占位符有什么区别</strong></h4><p>#{}传参能防止sql注入.</p><p>${}传参是字符串拼接.</p><h4 id="动态SQL"><strong>动态SQL</strong></h4><p>l 所谓SQL的动态和静态,是指SQL语句在何时被编译和执行,二者都是用在SQL嵌入式编程中的.</p><p>l SQL语句的主体结构,在编译时尚无法确定,只有等到程序运行起来,在执行的过程中才能确定,这种SQL叫做动态SQL.</p><p>l 静态SQL语句的编译是在应用程序运行前进行的,编译的结果会存储在数据库内部.</p><p>l 程序运行时,数据库将直接执行编译好的SQL语句,降低运行时的开销.</p><p>l MyBatis中用于实现动态SQL的元素主要有:if、where、foreach.</p><h4 id="Mapper动态代理规范"><strong>Mapper动态代理规范</strong></h4><p>l xml映射文件中的namespace与mapper接口的全类名相同.</p><p>l mapper接口方法名和xml映射文件中定义的每个statement的id相同.</p><p>l mapper接口方法的输入参数类型和xml映射文件中定义的每个sql的parameterType的类型相同.</p><p>l mapper接口方法的输出参数类型和xml映射文件中定义的每个sql的resultType的类型相同.</p><p>l mybatis中的mapper动态代理是不支持方法重载的dao接口里的方法,因为是全类名+方法名的保存和寻找策略.</p><p>l mapper接口的工作原理是JDK动态代理,mybatis运行时就是用JDK动态代理为mapper接口生成代理proxy对象,代理对象proxy会拦截接口方法,转而执行mappedStatement所代表的sql,然后将sql执行结果返回.</p><h4 id="Mybatis常用注解"><strong>Mybatis常用注解</strong></h4><p>@Insert ： 插入sql , 和xml insert sql语法完全一样</p><p>@Select ： 查询sql, 和xml select sql语法完全一样</p><p>@Update ： 更新sql, 和xml update sql语法完全一样</p><p>@Delete ： 删除sql, 和xml delete sql语法完全一样</p><p>@Param ： 当映射器方法需要多个参数时，指定参数的名字</p><p>@Results ： 结果集合</p><p>@Result ： 结果</p><p>@One ：复杂类型的单独属性值映射</p><p>@Many ：复杂类型的己合属性映射</p><h1><strong>五、</strong> <strong>MQ消息队列</strong></h1><p><strong>1.为什么使用MQ?</strong></p><p>l 使用MQ的好处:解耦，异步，削峰平谷;</p><p>l 解耦：</p><p>l 当A系统生产关键数据,而且B,C,D系统需要A系统给它们发送数据,来进行下一步操作,此时A系统和BCD系统产生了严重的耦合,所有的操作和维护都要在A系统中进行,如果将A系统产生的数据放到MQ当中,让BCD系统需要的时候去消费,此时就解放了A系统,不用考虑调用成功,失败超时等情况,同时ABCD系统独立运行,后续新添加系统需要A系统的数据,也不需要去修改A系统的代码,达到了解耦的效果</p><p>l 异步：</p><p>l 一般互联网类企业,对用户的直接操作,一般要求每个请求在200ms以内完成。对于一个系统调用多个系统,在不适用mq的情况下,它执行完返回的耗时,是执行完所有系统所需时间的总和;使用mq进行优化后,执行的耗时,则是执行主系统的耗时,以及加上主系统发送数据到消息队列的耗时,大幅度提升高延时接口的性能,提升了用户体验.</p><p>l 削峰平谷：</p><p>l 一般MySQL的每秒请求最高在2000左右，用户访问量高峰期的时候涌入的大量请求,很可能将MySQL给打死,然后系统就挂掉,但是高峰期过了,请求量可能远远低于2000,所以这种情况去增加服务器就不值得,如果使用mq的情况,将用户的请求全部放到mq中,然后让系统去消费用户的请求,不要超过系统所能承受的最大请求数量,保证系统不会再高峰期挂掉,但此时可能有几十万或几百万请求积压在mq中,但是高峰期一过,系统还是按照最大请求数量进行处理请求,很快就能将积压请求处理完</p><p>​</p><p>l 使用MQ的缺陷:</p><p>l 系统可用性降低:以前只要担心系统的问题,现在还要考虑mq如果挂掉的问题,因为mq一旦挂掉,所关联的系统,就会统统挂掉</p><p>l 系统复杂性变高:考虑的问题变多,要考虑消息丢失,消息重复消费的情况</p><p>l 一致性问题:比如A系统调用BCD系统,BCD同时成功才能执行成功,返回数据,现在BC执行成功,D发生异常的情况,并没有执行成功,但是A给用户返回的是成功</p><p><strong>2.你了解哪些MQ技术，ActiveMQ,RabbitMQ,RocketMQ,<strong><strong>K</strong></strong>afka</strong></p><p>l ActiveMQ它可以支持万级的吞吐量,它是一个比较成熟完善的中间件,但是它存在有少量信息丢失的情况,而且目前官方对他的更新迭代不是很即时,社区的活跃度不是很高</p><p>l RabbitMQ是一款用Erlang语言开发的消息中间件,它延时低,唯一一款达到微妙级延时的消息中间件,而且社区活跃度高,对于bug问题的修复很及时,而且提供了很友善的后台界面,唯一的劣势是就是我们搞java开发的很少有人能够阅读它的源码,对于问题的修复仅仅依靠社区。</p><p>l RocketMQ是阿里旗下的一款品质优秀的MQ,它可以达到十万级的吞吐量,而且它还是支持分布式事务,应用于分布式架构,它的维护基本上都是靠阿里,如果哪天阿里宣布放弃这个项目的维护,除非你们公司有能力继续来维护RocketMQ的使用。</p><p>l Kafka也是一款分布式的中间件,最大优点就是其吞吐量高,一般运用于大数据系统的实时运算和日志采集的场景,功能简单,可靠性高,扩展性高,唯一的缺点是可能导致重复消费,但是这点轻微的影响在大数据场景下可以忽略。</p><p>​</p><p><strong>3.RabbitMQ 的使用场景有哪些？【项目中怎么用的】</strong><br>抢购活动，削峰填谷，防止系统崩塌。</p><p>延迟信息处理，比如 10 分钟之后给下单未付款的用户发送邮件提醒。</p><p>解耦系统，对于新增的功能可以单独写模块扩展，比如用户确认评价之后，新增了给用户返积分的功能，这个时候不用在业务代码里添加新增积分的功能，只需要把新增积分的接口订阅确认评价的消息队列即可，后面再添加任何功能只需要订阅对应的消息队列即可。</p><p><strong>4.如何保证MQ的高可用?</strong></p><p>集群模式：普通集群、镜像集群或者仲裁队列。</p><p><strong>5.如何保证消息不被重复消费(如何保证消息消费时的幂等性)?</strong></p><p>从代码层面设计，多做判断，保证方法执行多次结果是一样的。</p><p>l 重复消费:</p><p>l 每个中间件它能够保证的是消息不丢失,但不能保证消息不被重复发送，所以接收方就要做幂等性的判断，防止消息重复消费，例如：支付金额的消息被消费了两次，那么所得到的钱数就是错误的，这种情况在系统中肯定是不允许存在的。</p><p>l 消费的幂等性（同样的操作，在一段时间内，只执行一次）:</p><p>l 如果是往数据库里写入数据,就根据主键查一下,如果数据已经存在,就update</p><p>l 可以在把数据先存在set或者redis中,消费前,先去里面查看,数据是否已存在,已存在就丢弃这数据,比如说我们的订单系统,生成订单也会用到mq,此时订单id就是全局唯一的id,在写入数据库之前,就可以先把数据去redis中查询,如果redis中已经存在,则不进行消费操作,如果redis中不存在的话,就存在redis中,然后进行下一步操作.</p><p>l 在数据库中设置唯一约束,就不会导致重复数据的多次插入</p><p>​</p><p><strong>5.</strong> <strong>如何保证消息不丢失</strong></p><p>三个角度分析问题：</p><p>生产者【publish comfirm+publish return】、</p><p>MQ中间件【持久化】、</p><p>消费者【ack】</p><p>l rabbitMQ:</p><p>l 消息丢失的情况:生产者写的消息在到中间件的网络传输过程中就丢了,或者是消息到了中间件,但是内部出错,消息没保存下来</p><p>l 中间件将消息保存下来,还没等到消费者消费完,就自己挂掉,导致消息丢失</p><p>l 消费者取到消息还没来得及消费就自己挂掉了,因为rabbitMQ消费者开启了autoAck,在消费数据还没成功时,就已经向中间件发送完成的信息,此时消费者挂掉,就会消息丢失</p><p>l 解决方案:</p><p>l 生产者消息丢失,可以通过开启事务功能,如果消息没有发送成功,发生异常就回滚,然后重试发送消息,发送成功就提交事务,这个的缺陷就是阻塞式的,降低吞吐量,耗费性能;如果是rabbitMQ可以开启confirm模式,它能给每次写的消息都分配一个唯一的id,如果写入到rabbitMQ中,rabbitMQ就会回传一个ack消息,如果没有就会会挑一个nack接口,告诉你消息接收失败,你可以重试,confrim机制是异步的,效率会高很多</p><p>l 关于中间件的数据丢失,可以开启中间件的持久化,将消息持久化磁盘中,中间件挂了恢复之后自动读取之前存储的数据.</p><p>l 消费者数据丢失,关闭rabbitMQ的autoACK机制,自己手动提交完成信息</p><p>​</p><p><strong>6.</strong> <strong>如何保证消息的顺序性</strong></p><p>l rabbitMQ为多个消费者开辟多个queue队列（先进先出）,将保证操作顺序的消息发布到同一个队列中去，操作这个队列的消费者会一个一个消息去处理，因为队列这种结构是先进先出的类型，所以保证的数据的顺序性。</p><p>​</p><p><strong>7.</strong> <strong>消息大量积压怎么解决？</strong></p><p>l 临时启动多个消息者，并发处理消息;</p><p>l 临时启动多个消息者，接受消息之后，不处理。暂时把消息写到文件中。消息中间件中的消息处理的完了。关闭临时消费者。单独写个离线程序，处理文件中的消息;</p><p>l 临时启动多个消息者，接受消息之后，直接丢弃。 可以让生产者的源头恢复数据;</p><p><strong>8.</strong> <strong>RabbitMQ 节点的类型有哪些？</strong></p><p>l 磁盘节点：消息会存储到磁盘。</p><p>l 内存节点：消息都存储在内存中，重启服务器消息丢失，性能高于磁盘类型。</p><p><strong>9.</strong> <strong>R****abbitmq如何确认消息一定发送到了消息中间件中呢?</strong></p><p>消息发送到server是先通过交换机,再到消息队列,只要数据到队列,那么此消息肯定是发送成功的.</p><p>​第一步确定消息发送到了交换机.</p><p>使用发送方确认机制来判断消息是否发送成功.</p><p>​第二步确认交换机把消息路由到消息队列.</p><p>使用失败回调来判断消息是否发送成功.</p><p>​只有两步都成功,此消息才是发送成功的.</p><p><strong>10.</strong> <strong>rabbitmq的集群</strong></p><p>参考网站:docker中搭建rabbitmq集群-&gt; <a href="https://www.cnblogs.com/vipstone/p/9362388.html">https://www.cnblogs.com/vipstone/p/9362388.html</a></p><p>​集群分为普通集群和镜像集群.</p><p>​普通集群: 普通集群,他会把所有节点的交换机信息和队列的元数据分为两种(队列数据分为两种: 一种为队列里面的消息,另一种是队列本身的信息, 后者被称为元数据.)进行复制,确保所有的节点都有一份.</p><p>​镜像集群: 在普通集群的基础上,把所有的队列数据完全同步(对性能有一定的影响)当对数据可靠性要求高时,可以使用镜像模式.</p><p>​镜像集群实现由两种方式:   一种是直接在管理台控制,</p><p>​  一种是在声明队列的时候控制.</p><p>​配置集群还设计到节点信息, 有内存节点和磁盘节点,如果对队列有修改的情况下,必须有磁盘节点,用来保存信息,内存节点断电后,信息就消失,无法保存. 默认就是磁盘节点, 设置 --ram为内存节点.</p><h1><strong>六、</strong> <strong>Redis</strong></h1><p><strong>1.</strong> <strong>使用redis缓存的好处</strong></p><p>l 提高并发量，不需要每次都访问数据库，提高并发量。</p><p>l 提高性能，redis运行在内存中，内存的执行效率，远远超过数据库。</p><p><strong>2.</strong> <strong>Redis的key和value的存储大小有限制吗？</strong></p><p>l Redis的key和value的存储大小都是有限制的，都是512M。</p><p><strong>3.</strong> <strong>redis存储什么数据类型</strong></p><p>(1) 字符串（String）</p><p>(2) 字符串列表（lists）</p><p>(3) 字符串集合（sets）</p><p>(4) 有序字符串集合（sorted sets）</p><p>(5) 哈希（hash）</p><p><strong>4.</strong> <strong>使用redis缓存的弊端【搁置】</strong></p><p><a href="https://blog.csdn.net/QiuHaoqian/article/details/109154315">(44条消息) Redis 缓存穿透、缓存击穿、缓存雪崩_浩骞的博客-CSDN博客_redis缓存穿透</a></p><p>缓存穿透，大量的请求访问,查询的是数据库中不存在的数据,就会在缓存中无法命中,直接去访问数据库,数据库中也查询不到,自然无法将结果写入缓存,下一秒又有大量请求查询不存在的数据,导致数据库最终挂掉(要么系统出bug,要么黑客恶意攻击)</p><p>解决方案:</p><p>l 在数据库中没有查询到的数据,存储一个特定值到缓存中,这样下次恶意访问就可以去缓存中查询到数据,不会访问到数据库.注意的是这些特定的key,需要设置过期时间，避免黑客攻击时，大量的无效key把redis存满。</p><p>缓存雪崩，大规模的key失效，大量的请求通过key访问到数据库，导致数据库直接崩溃,然后系统直接瘫痪.</p><p>解决方案:</p><p>l 事前:保证redis集群的高可用性,redis cluster,主从机制;</p><p>l 事中:hystrix（熔断器）限流+降级,避免数据库被打死.高并发的访问量走hystrix限流组件,让访问量保持在数据库最大负载范围内,保证数据库不被打死,系统可以继续使用.剩余的请求走降级组件,返回一些默认的值或者是友情提示等</p><p>l 事后:redis持久化机制,尽快回复缓存集群,一旦重启,自动从磁盘上加载数据,回复内存中的数据</p><p>缓存击穿：</p><p>缓存与数据库不一致，修改数据时，数据库和缓存数据不一致。</p><p>最初级的缓存不一致:</p><p>出现场景：</p><p>l 先修改数据库,再删除缓存,如果修改缓存失败,就会导致数据库中式新数据,缓存中是旧数据,数据不一致</p><p>解决思路:</p><p>l 先删除缓存,再修改数据库,如果删除缓存成功,修改数据库失败,那么数据库中是旧数据,缓存中是空的,读的时候缓存中没有,去数据库中读旧数据,然后更新到缓存中去</p><p>高并发场景下数据库与缓存的数据不一致:</p><p>出现场景：</p><p>l 读写并发请求,导致数据库和缓存中的数据不一致,在写请求删除缓存,修改数据库库存还未成功时,查询库存的请求就发来,先去缓存中查询,发现是空,然后去数据库中查,然后将结果放入缓存中,然后修改库存的操作成功,导致数据库中是新数据,缓存中是旧数据</p><p>解决思路:</p><p>l 相同的商品id,进行哈希取值,再加上对内存队列的数量进行取模,每个商品都可以路由到某一个内存队列中,然后将去请求和写请求串行化,这样就可保证一定不会出现不一致的情况,但是会导致系统的吞吐量会大幅降低</p><p>缓存并发竞争，同一时间，多个线程来执行，操作同一个key。</p><p>解决思路:</p><p>l 方式一：分布式锁,（zookeeper分布式锁），确保同一时间,只能由一个系统实例在操作某个key,别的实例不被允许读和写</p><p>l 方式二：乐观锁 ，每次要写之前,先判断这个value的时间戳是否比缓存里的更新,如果新就允许写.</p><p>​</p><p><strong>5.</strong> <strong>为什么redis是单线程的但是还可以支撑高并发?</strong></p><p>l 纯内存操作【主要】</p><p>l 是基于非阻塞的IO多路复用机制,由监听程序轮询等待的事件,然后压入队列,可以达到一个线程同时处理多个io请求的目的【IO多路复用机制】</p><p>l 单线程避免了多线程的频繁切换问题</p><p><strong>6.</strong> <strong>Redis由哪些数据类型,分别在哪些场景下使用?</strong></p><p>l String,存储基本的类型</p><p>l List,有序列表,比如之前项目中的广告缓存,用的就是list集合进行缓存的,它可以用于比如存储粉丝列表,文章的评论列表等等</p><p>l Set,无序列表,它最主要的特点就是去重,比如微博上查询两个明星的共同粉丝,就可以用set进行去重</p><p>l SortSet,它主要是在set的基础上加上了排序功能</p><p>l Hash,类似map的集合,一般可以用来存储对象,我们系统中的购物车对象就是以hash类型存储在redis中,key就是用户的id,value就是购物车对象</p><p>​</p><p><strong>7.</strong> <strong>Redis过期策略</strong></p><p>l 定期删除配合惰性删除【主动删除+被动删除】</p><p>l 定期删除：1s中执行10【可配置】次删除任务，总占用时长250ms【可配置】，每次删除任务时长25ms： 循环执行随机抽样，删除过期的数据；单次循环何时结束：时间到了或者抽样的过期比例小于指定值【25%】。</p><p>总结：循环操作，抽样删除。绝不是全部key的扫描，代价太大。</p><p>l 惰性删除,就是当你获取key时,redis就会检查一下,如果key过期了,就删除,不会返回,如果没过期就返回</p><p>过期的时间如何存储：hash 【设置了过期时间的key：过期时间】</p><p><strong>8.</strong> <strong>内存淘汰策略：</strong></p><p>Redis内存满了怎么办，Redis使用内存淘汰机制来解决了这个问题。</p><p>Ø noevication:当内存不足以容纳写入新数据时,新写入操作就会报错</p><p>Ø allkeys-lru:当内存不足以容纳新写入数据时,在键空间中,移除最近最少使用的key</p><p>Ø allkeys-lfu：从所有键中驱逐使用频率最少的键</p><p>Ø allkeys-random:在键空间中,随机移除某个key</p><p>Ø volatile-lru:在设置了过期时间的键空间中,移除最近最少使用的</p><p>Ø volatile-lfu：从所有配置了过期时间的键中驱逐使用频率最少的键</p><p>Ø volatile-random:在设置了过期时间的键空间中,随机移除某个key</p><p>Ø volatile-ttl:在设置了过期时间的键空间中,快过期的key优先移除</p><p>​</p><p><strong>9.</strong> <strong>怎样做redis支撑高并发(读多写少用缓存,读少写多用队列)</strong></p><p>主从+哨兵   或者  分片集群</p><p>主从数据同步：全量同步 + 增量同步</p><p>哨兵作用：监控【主管下线+客观下线】qorum</p><p>​          故障转移：</p><p>​1、选择话事人【哨兵，谁先发现】</p><p>​           2、开始故障转移：从slave节点中选择一个新的主【策略：排除响应差的、偏移量和master保持一直的】；新的主执行slaveof no one ；其他从执行slaveof 新主 ；挂点的主配置文件强制写入 slaveof 新主。</p><p>​通知：java客户端，连接的是哨兵的地址。</p><p>分片集群：</p><p>数据如何分布：散列槽【16384个】</p><p><strong>10.</strong> <strong>redis的持久化</strong></p><p>如果没有持久化,遇到灾难性故障时,就会丢失所有数据，如果开启持久化到磁盘,定期备份到云服务上,就能保证遇到灾难性故障,就不会丢失全部数据</p><p>l RDB</p><p>当redis需要做持久化时,redis会fork一个子进程,将数据写到磁盘写上一个临时RDB文件中,当子进程完成写临时文件后,将原来的RDB换掉</p><p>优势:</p><p>适合做冷备份,在最坏的情况下,恢复数据要比AOF快</p><p>对redis对外提供读写服务,影响服务非常小</p><p>RDB数据快照文件更少</p><p>l AOF</p><p>可以做到更精细的持久化,redis每执行一个修改数据的命令,都会将它添加到os cache中,一般会每个一秒执行一次fsync操作,保证将os cache中的数据写入磁盘中AOF日志文件中,AOF日志文件以append-only模式写入,文件不容易破损,在AOF日志过大时,就会出现后台重写</p><p>优势:</p><p>AOF可以更好的保护数据不丢失,丢失的数据更少</p><p>AOF日志文件以append-only模式写入,没有磁盘寻址的开销,写入性能非常高</p><p>AOF日志过大时,也不会影响客户端的读写</p><p>​</p><p>l RDB和AOF到底如何抉择</p><p>综合使用两种持久化机制,用AOF保证数据不丢失,作为数据恢复的第一选择,用RDB来做不同程度的冷备份,在AOF文件丢失或者损坏不可用的情况下,用RDB来进行快速的数据回复</p><p><strong>11.</strong> <strong>redis怎么设置缓存大小【3<strong><strong>2</strong></strong>g】</strong></p><p>打开redis配置文件</p><p>示例：maxmemory 100mb</p><p>单位：mb,gb。</p><p>默认为0，没有指定最大缓存，如果有新的数据添加，吃满服务器的物理内存，直到超过最大内存，则会使redis崩溃，所以一点要设置。</p><p>设置maxmemory之后，配合的要设置缓存数据回收策略, 可以通过设置LRU算法来删除部分key，释放空间(LRU是Least Recently Used 近期最少使用算法。)。</p><p>就可以修改缓存大小为16gb.</p><p>建议是物理内存的50%以下。</p><p><strong>12.</strong> <strong>redis集群主从数据如何同步</strong></p><p>全量复制+增量复制</p><p><strong>13.</strong> <strong>Redis管道【<strong><strong>pipeline</strong></strong>】</strong></p><p>批量执行redis命令，结果批量返回。</p><p><strong>14.</strong> <strong>R<strong><strong>edis支持</strong></strong>事务，但是事务不能回滚，只能放弃执行</strong></p><p>Multi：开启事务</p><p>Exec：执行事务</p><p>Discard：放弃执行事务</p><p><strong>15.</strong> <strong>R****edis实现分布式锁</strong></p><h1>七、 Elasticsearch</h1><p><strong>1.Elasticsearch是如何实现Master选举的</strong></p><p>v Elasticsearch的选主是ZenDiscovery模块负责的，主要包含Ping（节点之间通过这个RPC来发现彼此）和Unicast（单播模块包含一个主机列表以控制哪些节点需要ping通）这两部分；</p><p>v 对所有可以成为master的节点（node.master: true）根据nodeId字典排序，每次选举每个节点都把自己所知道节点排一次序，然后选出第一个（第0位）节点，暂且认为它是master节点。</p><p>v 如果对某个节点的投票数达到一定的值（可以成为master节点数n/2+1）并且该节点自己也选举自己，那这个节点就是master。否则重新选举一直到满足上述条件。</p><p><strong>2.在并发情况下，Elasticsearch如果保证读写一致？</strong></p><p>v 可以通过版本号使用乐观并发控制，以确保新版本不会被旧版本覆盖，由应用层来处理具体的冲突；</p><p>v 另外对于写操作，一致性级别支持quorum/one/all，默认为quorum，即只有当大多数分片可用时才允许写操作。但即使大多数可用，也可能存在因为网络等原因导致写入副本失败，这样该副本被认为故障，分片将会在一个不同的节点上重建。</p><p>v 对于读操作，可以设置replication为sync(默认)，这使得操作在主分片和副本分片都完成后才会返回；如果设置replication为async时，也可以通过设置搜索请求参数_preference为primary来查询主分片，确保文档是最新版本。</p><p>**3.**<strong>Elasticsearch索引文档的过程</strong></p><p>协调节点默认使用文档ID参与计算（也支持通过routing），以便为路由提供合适的分片。<br>　　shard = hash(document_id) % (num_of_primary_shards)<br>　　当分片所在的节点接收到来自协调节点的请求后，会将请求写入到Memory Buffer，然后定时（默认是每隔1秒）写入到Filesystem Cache，这个从Momery Buffer到Filesystem 　　Cache的过程就叫做refresh；<br>　　当然在某些情况下，存在Momery Buffer和Filesystem Cache的数据可能会丢失，ES是通过translog的机制来保证数据的可靠性的。其实现机制是接收到请求后，同时也会写入到translog中，当Filesystem cache中的数据写入到磁盘中时，才会清除掉，这个过程叫做flush；<br>　　在flush过程中，内存中的缓冲将被清除，内容被写入一个新段，段的fsync将创建一个新的提交点，并将内容刷新到磁盘，旧的translog将被删除并开始一个新的translog。<br>　　flush触发的时机是定时触发（默认30分钟）或者translog变得太大（默认为512M）时；</p><p>**4.**<strong>Elasticsearch更新和删除文档的过程</strong></p><p>删除和更新也都是写操作，但是Elasticsearch中的文档是不可变的，因此不能被删除或者改动以展示其变更；<br>　　磁盘上的每个段都有一个相应的.del文件。当删除请求发送后，文档并没有真的被删除，而是在.del文件中被标记为删除。该文档依然能匹配查询，但是会在结果中被过滤掉。当段合并时，在.del文件中被标记为删除的文档将不会被写入新段。<br>　　在新的文档被创建时，Elasticsearch会为该文档指定一个版本号，当执行更新时，旧版本的文档在.del文件中被标记为删除，新版本的文档被索引到一个新段。旧版本的文档依然能匹配查询，但是会在结果中被过滤掉。</p><p>**5.**<strong>Elasticsearch搜索的过程</strong></p><p>搜索被执行成一个两阶段过程，我们称之为 Query Then Fetch；<br>　　在初始查询阶段时，查询会广播到索引中每一个分片拷贝（主分片或者副本分片）。 每个分片在本地执行搜索并构建一个匹配文档的大小为 from + size 的优先队列。PS：在搜索的时候是会查询Filesystem Cache的，但是有部分数据还在Memory Buffer，所以搜索是近实时的。<br>　　每个分片返回各自优先队列中 所有文档的 ID 和排序值 给协调节点，它合并这些值到自己的优先队列中来产生一个全局排序后的结果列表。<br>　　接下来就是 取回阶段，协调节点辨别出哪些文档需要被取回并向相关的分片提交多个 GET 请求。每个分片加载并 丰富 文档，如果有需要的话，接着返回文档给协调节点。一旦所有的文档都被取回了，协调节点返回结果给客户端。<br>　　补充：Query Then Fetch的搜索类型在文档相关性打分的时候参考的是本分片的数据，这样在文档数量较少的时候可能不够准确，DFS Query Then Fetch增加了一个预查询的处理，询问Term和Document frequency，这个评分更准确，但是性能会变差。</p><p>**6.**<strong>ElasticSearch中的集群、节点、索引、文档、类型是什么？</strong></p><p>群集是一个或多个节点（服务器）的集合，它们共同保存您的整个数据，并提供跨所有节点的联合索引和搜索功能。群集由唯一名称标识，默认情况下为“elasticsearch”。此名称很重要，因为如果节点设置为按名称加入群集，则该节点只能是群集的一部分。</p><p>节点是属于集群一部分的单个服务器。它存储数据并参与群集索引和搜索功能。</p><p>索引就像关系数据库中的“数据库”。它有一个定义多种类型的映射。索引是逻辑名称空间，映射到一个或多个主分片，并且可以有零个或多个副本分片。 MySQL =&gt;数据库ElasticSearch =&gt;索引</p><p>文档类似于关系数据库中的一行。不同之处在于索引中的每个文档可以具有不同的结构（字段），但是对于通用字段应该具有相同的数据类型。 MySQL =&gt; Databases =&gt;Tables =&gt; Columns / Rows ElasticSearch =&gt; Indices =&gt; Types =&gt;具有属性的文档</p><p>类型是索引的逻辑类别/分区，其语义完全取决于用户。</p><p>**7.**<strong>elasticsearch 索引数据多了怎么办，如何调优</strong></p><p>使用bulk API<br>初次索引的时候，把 replica 设置为 0<br>增大 threadpool.index.queue_size<br>增大 indices.memory.index_buffer_size<br>增大 index.translog.flush_threshold_ops<br>增大 index.translog.sync_interval<br>增大 index.engine.robin.refresh_interval</p><h1>八、 Dubbo和Zookeeper</h1><p><strong>1.</strong> <strong>dubbo的工作流程</strong></p><p>l provider向注册中心去注册自己为一个服务</p><p>l consumer去注册中心订阅服务,注册中心会通知consumer注册好的服务,consumer会将provider的地址等信息拉取到本地缓存</p><p>l consumer去调用provider</p><p>l consumer和provider都异步的通知监控中心</p><p>![img](file:///C:\Users\Jarvis\AppData\Local\Temp\ksohtml13616\wps21.jpg)</p><p><strong>2.</strong> <strong>Dubbo的通信原理？</strong></p><p>l Dubbo底层使用 hessain2进行二进制序列化进行远程调用</p><p>l Dubbo底层使用 netty框架进行异步通信。NIO</p><p><strong>3.</strong> <strong>dubbo负载均衡策略有哪些?</strong></p><p>l random loadbalance</p><p>默认情况下,dubbo是random loadbalance随机调用实现负载均衡,可以对provider不同实例设置不同的权重,会按照权重来负载均衡,权重大分配的流量高</p><p>l roundrobin loadbalance</p><p>默认就是均匀地将流量达到各个机器上,值得注意的是,要根据机器的性能,调整权重。</p><p>l leastactive loadbalance</p><p>dubbo自动感知,如果某个机器性能越差,那么接收的请求就越少,给不活跃的机器更少的请求</p><p>l consistanthash loadbalance</p><p>一致性hash算法,相同参数的请求一定分发到同一个provider上,provider挂掉的时候,会基于虚拟机节点均匀分配甚于的流量,抖动不会太大.适用于订单,同一个订单的操作,分配到同一个机器上,这样就可以避免高并发场景下,数据库和缓存中数据不一致的情况</p><p><strong>3.zookeeper注册中心挂了，dubbo可以继续使用吗？</strong></p><p>可以,因为刚开始dubbo初始化的时候,消费者会将提供者的地址等信息缓存到dubbo,注册中心挂了dubbo可以继续通信</p><p><strong>4.zookeeper 都有哪些功能？</strong></p><p>l 集群管理：监控节点存活状态、运行请求等。</p><p>l 主节点选举：主节点挂掉了之后可以从备用的节点开始新一轮选主，主节点选举说的就是这个选举的过程，使用 zookeeper 可以协助完成这个过程。</p><p>l 分布式锁：zookeeper 提供两种锁：独占锁、共享锁。独占锁即一次只能有一个线程使用资源，共享锁是读锁共享，读写互斥，即可以有多线线程同时读同一个资源，如果要使用写锁也只能有一个线程使用。zookeeper可以对分布式锁进行控制。</p><p>l 命名服务：在分布式系统中，通过使用命名服务，客户端应用能够根据指定名字来获取资源或服务的地址，提供者等信息。</p><p><strong>5.Zookeeper的watch机制（通知机制）</strong></p><p>Zookeeper系统中其实类似于window系统中的文件夹，zookeeper可以建立普通节点和临时节点，但是每个节点只能有一个，例如：/a/b/c节点已经存在，那么再来申请/a/b/c的节点就会失败。此时可以设置watch此节点，当/a/b/c节点删除后，会通知watch此节点的所有线程，线程再来创建节点，完成设定的任务。（分布式锁，高可用性）</p><p><strong>6.zookeeper 怎么保证主从节点的状态同步？</strong></p><p>zookeeper 的核心是原子广播，这个机制保证了各个 server 之间的同步。实现这个机制的协议叫做 zab 协议。 zab 协议有两种模式，分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在领导者崩溃后，zab 就进入了恢复模式，当领导者被选举出来，且大多数 server 完成了和 leader 的状态同步以后，恢复模式就结束了。状态同步保证了 leader 和 server 具有相同的系统状态。</p><p>**7.**<strong>什么是 zab 协议</strong></p><p>ZAB 是 Zookeeper 原子广播协议的简称</p><p>整个ZAB协议主要包括消息广播和崩溃恢复两个过程，进一步可以分为三个阶段，分别是：</p><p>发现 Discovery<br>同步 Synchronization<br>广播 Broadcast</p><p>组成ZAB协议的每一个分布式进程，都会循环执行这三个阶段，将这样一个循环称为一个主进程周期。</p><p><strong>8.如果zookeeper服务挂了怎么办？</strong></p><p>注册中心对等集群，任意一台宕掉后，会自动切换到另一台</p><p>​    注册中心全部宕掉，服务提供者和消费者仍可以通过本地缓存通讯</p><p>服务提供者无状态，任一台宕机后，不影响使用</p><p>服务提供者全部宕机，服务消费者会无法使用，并无限次重连等待服务者恢复</p><h1>九、 分布式系统</h1><p><strong>1.</strong> <strong>怎么实现远程通信</strong></p><p>什么是远程通信:简单来说，就是一个系统去调用另一个系统中的数据.</p><p>常见的有三种方式：</p><p>(1)Webservice的方式：</p><p>​    1)优点：跨语言跨平台</p><p>​    2)缺点：它是基于soap协议的，使用http+xml的方式进行数据传输，http是应用层协议，传输效率不是很高，而且xml的解析也比 较费时，所以项目内部进行通信的时候，不建议使用Websservice的方式</p><p>(2)restful形式的服务：</p><p>1)优点：restful本身就是http，使用的是http+json的方式进行数据传输，因为json数据本身是非常简洁的，所以它比webservice的 传输效率更高；手机app端一般都使用该方法，其他很多项目也是用这种方式</p><p>​    2)缺点：如果服务太多的话，会出现服务之间调用关系混乱，此时就需要治理服务</p><p>(3)Dubbo：</p><p>​     使用的是RPC协议进行远程调用，RPC协议是一个二进制协议，直接使用的socket进行通信，传输效率高，并且可以统计出系统 之间的调用关系和调用次数系统分布式SAO系统的内部通信推荐使用dubbo</p><p><strong>2.</strong> <strong>分布式事务</strong></p><p>TCC方案(Try,Confirm,Cancel)</p><p>l Try:此阶段是对各个服务的资源做检测以及对资源进行锁定或者预留</p><p>l Confirm:此阶段是在各个服务中执行实际的操作</p><p>l Cancel:如果任何一个服务的业务执行出错,就要进行补偿,将已经执行成功的业务逻辑回滚操作</p><p>l 这种方案的事务回滚实际上是依赖于自己写代码来回滚和补偿,补偿代码巨大,除了一些严格保证分布式事务的场景,比如和资金,订单相关的业务,尽量少使用</p><p>​</p><p>本地消息表(ebay)</p><p>l A系统在自己本地一个事务里操作同时,插入一条数据到消息表</p><p>l A系统将这个消息发送到MQ中</p><p>l B系统接收到消息之后,在一个事务里,往自己本地消息表中插入一条数据,同时执行其他业务操作,如果这个消息已经被处理了,那么此时这个消息会回滚,这样保证不会重复处理消息</p><p>l B系统执行成功后,就会更新本地消息表的状态以及A系统消息表的状态</p><p>l 如果B系统处理失败了,就不会更新消息表状态,A系统会定时扫描自己的消息表,没有处理的消息,会再次发送到MQ中,让B处理</p><p>l 这个方案为了保证最终一致性,哪怕B事务失败了,A会不断重发消息,直到B成功为止;此外最大的问题是严重依赖数据库的消息表来管理事务,不适用高并发的场景,扩展性能差</p><p>可靠消息最终一致性方案</p><p>l 这个方案是基于阿里的rocketMQ(3.3.6之前)来实现,是目前比较国内比较常用的方案</p><p>l A系统发送一个prepared消息到mq,如果prepared消息发送失败,就直接取消操作</p><p>l 如果消息发送成功,就接着执行本地事务,如果成功就给mq发送确认消息,如果失败就告诉mq回滚消息</p><p>l 如果发送了确认消息,B系统就会接收到,然后执行本地的事务</p><p>l mq会定时轮询所有prepared消息,回调接口,所有没发送确认消息的,问你继续重试还是回滚,然后A系统就去查看本地事务的状态,如果回滚,告诉mq回滚消息,如果成功了就重新发送确认消息</p><p>l 如果B系统的事务失败,自动不断重试,直到成功,如果实在不行就让B系统本地回滚,然后想办法通知A系统也回滚,或者是发送警报由人工手动回滚和补偿</p><p>​</p><p>最大努力通知方案</p><p>l A系统本地事务执行完后,发送消息到MQ</p><p>l 有个服务会消费MQ中的消息,然后写入数据库记录下来,或者放入内存队列中,接着调用B系统的接口</p><p>l 要是B系统执行成功就ok,执行失败,就最大努力通知服务定时尝试重新调用B系统,反复N次,实在不行就放弃</p><p><strong>3.</strong> <strong>系统的高并发问题是怎么解决的</strong></p><p>并发问题高，这个问题的解决方案是一个系统性的，系统的每一层面都需要做优化：</p><p>1） 数据层</p><p>a)    集群</p><p>b)    分表分库</p><p>c)    开启索引</p><p>d)    开启缓存</p><p>e)    表设计优化</p><p>f)     Sql语句优化</p><p>g)    缓存服务器（提高查询效率，减轻数据库压力）</p><p>h)    搜索服务器（提高查询效率，减轻数据库压力）</p><p>2）项目层</p><p>a)    采用面向服务分布式架构（分担服务器压力，提高并发能力）</p><p>b)    采用并发访问较高的详情系统采用静态页面</p><p>c)    使用页面缓存</p><p>d)    用 ActiveMQ使得业务进一步进行解耦，提高业务处理能力</p><p>e)    使用分布式文件系统存储海量文件</p><p>3） 应用层</p><p>a)    Nginx服务器来做负载均衡</p><p>b)    Lvs做二层负载</p><p><strong>4.</strong> <strong>分布式锁的问题</strong></p><p>针对分布式锁的实现，目前比较常用的有以下几种方案：</p><p>1.基于数据库实现分布式锁</p><p>2.基于缓存（redis，memcached，tair）实现分布式锁</p><p>3.基于 zookeeper实现分布式锁</p><h1>十、 微服务架构</h1><h2 id="1-SpringCloud常用组件有哪些？"><strong>1.</strong> <strong>SpringCloud常用组件有哪些？</strong></h2><p>Ø 注册中心：Eureka、Nacos、Consoul</p><p>Ø 配置中心：Nacos、SpringCloud Config</p><p>Ø 网关：Zuul、SpringCloud Gateway</p><p>Ø 服务调用：Feign、Dubbo</p><p>Ø 负载均衡：Ribbon</p><p>Ø 微服务保护：服务熔断/降级：Hystrix</p><h2 id="2-注册中心"><strong>2.</strong> <strong>注册中心</strong></h2><h4 id="1-eureka和nacos的区别"><strong>1.</strong> <strong>eureka和nacos的区别</strong></h4><p>Ø Nacos与eureka的共同点</p><p>- 都支持服务注册和服务拉取</p><p>- 都支持服务提供者心跳方式做健康检测</p><p>Ø Nacos与Eureka的区别</p><p>- Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</p><p>- 临时实例心跳不正常会被剔除，非临时实例则不会被剔除</p><p>- Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</p><p>- Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</p><h4 id="2-Eureka的工作原理"><strong>2.</strong> <strong>Eureka的工作原理</strong></h4><p><a href="https://www.jianshu.com/p/caffafae2e36">Eureka注册中心原理 - 简书 (jianshu.com)</a></p><h4 id="3-Z-ookeeper"><strong>3.</strong> <strong>Z****ookeeper</strong></h4><p>详见zookeeper课程</p><h2 id="3-配置中心"><strong>3.</strong> <strong>配置中心</strong></h2><h2 id="4-网关SpringCloud-Gateway"><strong>4.</strong> <strong>网关SpringCloud Gateway</strong></h2><h4 id="1-网关路由包含哪些部分？"><strong>1.</strong> <strong>网关路由包含哪些部分？</strong></h4><p>网关路由包含：id、url、断言和过滤器</p><h4 id="2-你们项目中网关有哪些作用？"><strong>2.</strong> <strong>你们项目中网关有哪些作用？</strong></h4><p>我们项目中网关是作为客户端访问的入口，同时也在网关端进行了权限检验和限流的操作。</p><h4 id="3-网关过滤器有哪些类型？"><strong>3.</strong> <strong>网关过滤器有哪些类型？</strong></h4><p>局部过滤器 GatewayFilter：作用在某一个路由上</p><p>全局过滤器 GlobalFilter：作用全部路由上</p><h4 id="4-说说你在开发中用到了哪些断言工厂？"><strong>4.</strong> <strong>说说你在开发中用到了哪些断言工厂？</strong></h4><p>Predicate来自于java8的接口。Predicate接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）。可以用于接口请求参数校验、判断新老数据是否有变化需要进行更新操作。</p><p>Spring Cloud Gateway内置了许多Predict，比如Cookie 路由断、Header 路由断言、Path路由断言。</p><p>其中我们在项目中使用的比较多的断言有Path路由断言</p><h4 id="5-网关中如何实现跨域？"><strong>5.</strong> <strong>网关中如何实现跨域？</strong></h4><p>在网关的yml配置文件中，通过如下配置实现</p><p>spring:</p><p>cloud:</p><p>​    gateway:</p><p>​      globalcors:</p><p>​        cors-configurations:</p><p>​          ‘[/**]’:</p><p>​            max-age: 3600</p><p>​            allowed-origin-patterns: “*”</p><p>​            allowed-headers: “*”</p><p>​            allow-credentials: true</p><p>​            allowed-methods:</p><p>​              - GET</p><p>​              - POST</p><p>​              - DELETE</p><p>​              - PUT</p><p>​              - OPTION</p><h4 id="6-网关的负载均衡是基于什么实现的？"><strong>6.</strong> <strong>网关的负载均衡是基于什么实现的？</strong></h4><p>Ribbon</p><h4 id="7-说说Zuul和Gateway的区别？"><strong>7.</strong> <strong>说说</strong>Zuul和Gateway的区别？</h4><p>1、gateway对比zuul多依赖了spring-webflux，内部实现了限流、负载均衡等，扩展性也更强，但同时也限制了仅适合于Spring Cloud套件。</p><p>zuul则可以扩展至其他微服务框架中，其内部没有实现限流、负载均衡等。</p><p>2、zuul仅支持同步，</p><p>gateway支持异步。</p><p>3、gateway线程开销少，支持各种长连接、websocket，spring官方支持，但运维复杂，</p><p>zuul编程模型简单,开发调试运维简单，有线程数限制，延迟堵塞会耗尽线程连接资源。</p><h2 id="5-远程调用Feign"><strong>5.</strong> <strong>远程调用Feign</strong></h2><p>Feign和OpengFeign的区别</p><p>Ø 他们底层都是内置了Ribbon，去调用注册中心的服务。eign是Netflix公司写的，是SpringCloud组件中的一个轻量级RESTful的HTTP服务客户端，是SpringCloud中的第一代负载均衡客户端。</p><p>Ø OpenFeign是SpringCloud自己研发的，在Feign的基础上支持了Spring MVC的注解，如@RequesMapping等等。是SpringCloud中的第二代负载均衡客户端。Feign本身不支持Spring MVC的注解，使用Feign的注解定义接口，调用这个接口，就可以调用服务注册中心的服务</p><p>Ø OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE_Collection</title>
      <link href="/2022/07/31/JavaEE_Collection/"/>
      <url>/2022/07/31/JavaEE_Collection/</url>
      
        <content type="html"><![CDATA[<h1>JavaEE_Collection</h1><p>集合使用:<br>Collection接口 – 继承Iterable,全系列可以使用迭代器和增强for<br>List接口:可以存储重复元素,元素存取顺序一致,带有索引<br>底层是数组(增删慢,查询快):ArrayList<br>底层是链表(增删快,查询慢):LinkedList:特有的操作头和为节点方法<br>Set接口:不能存储重复元素,元素存取顺序不一致,没有索引<br>底层是哈希表:HashSet,存储自定义类对象,需要该类重写hashCode()以及equals()<br>底层是红黑树:TreeSet,存储自定义类对象,需要该类<br>1.拥有自然排序规则 实现Comparable接口重写compareTo方法<br>2.TreeSet构造方法内传递比较器Comparable，重写compare方法<br>Map接口 – 没有继承Iterable,不能使用迭代器和增强for<br>底层是哈希表:HashMap,存储自定义类对象,需要该类重写hashCode()以及equals()<br>底层是红黑树:TreeMap,存储自定义类对象,需要该类<br>1.拥有自然排序规则 实现Comparable接口重写comparaTo方法<br>2.TreeMap构造方法内传递比较器Comparable，重写compare方法<br>遍历:<br>1. keySet():获取所有的键的集合,遍历,使用Map集合的get(K key) 获取对应值<br>2. entrySet():获取所有的键值对对象Entry集合,遍历,获取每一个Entry对象,getKey(),getValue()<br>3. forEach()</p><p>容器选择:<br>数组:元素类型没有限制,数据操作麻烦,可以借助Arrays工具类<br>去重:哈希表结构<br>排序:<br>1.红黑树结构:自然排序+比较器排序 结合红黑树结构根据方法返回值确定排序,如果计算结果为0,可以进行去重<br>2.数组结构/链表结构: 自然排序+比较器排序 结合底层数据结构没有去重功能</p><p>集合使用：<br>Collection接口 – 继承Iterable，全系列可以使用迭代器和增强for</p><pre><code>   Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。   遍历的代码实现：   Iterator iterator = coll.iterator();   while(iterator.hasNext())&#123;       System.out.println(iterator.next());   &#125;   remove()的使用：       1.列表的remove()方法         ArrayList&lt;String&gt; arrayList = new ArrayList&lt;&gt;(List.of(&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;));         for (int i = 0; i &lt; arrayList.size(); i++) &#123;             if(&quot;b&quot;.equals(arrayList.get(i)))&#123;                 arrayList.remove(i);             &#125;         &#125;         System.out.println(arrayList);         //打印结果为：[a,b,c,d],并没有将b元素删除干净         添加&quot;i--&quot;后;             if(&quot;b&quot;.equals(arrayList.get(i)))&#123;                 arrayList.remove(i);                 i--;             &#125;         打印结果为：[a,c,d],删除完毕。         上述结果出现，是因为列表在删除元素时，删除的是索引值位置上的元素，由于列表的特性，         删除一个元素，之后的元素会整体前移一位，导致重复的元素没有被判断就前移一位，故         删除不完全，所以在删除元素后提供i--语句，使得每个元素都能被索引到。       2.迭代器的remove()方法,不推荐使用，推荐使用removeIf(new Pre)         Collection coll = new ArrayList(List.of(123,456,new Person(&quot;Jerry&quot;,20),new String(&quot;Tom&quot;),false));         1.先建立迭代器         Iterator iterator = coll.iterator();//构造一个迭代器对象首先指向0索引之前         2.判断是否还有下一个元素         while (iterator.hasNext())&#123;         //hasNext()方法表示：迭代器当前指向索引是否有元素，有元素返回true             Object obj = iterator.next();           //next()方法有两个操作  1.将迭代器向后移动一个索引 2.将下移以后集合上的元素返回             if(&quot;Tom&quot;.equals(obj))&#123;                 iterator.remove();                 //迭代器对象的remove()方法没有参数，作用是删除当前迭代器指向的元素             &#125;         &#125;        二者区别：集合的remove(i)方法是删除指定索引元素，边删除元素边前移                 迭代器remove()方法是删除当前迭代器指向的对象，集合没有前移   增强for：   1.普通for循环是根据索引值结合get(索引)获取元素   2.对于List集合有索引值，可以使用普通for便利，而对于Set集合没有索引值，则需要使用增强for        for(集合/数组元素类型 局部变量 ：集合对象)&#123;&#125;        说明：内部仍使用了迭代器   增强型for循环:        使用目的:为了简化迭代器遍历操作        使用前提条件:1.单列集合2.数组        注意事项:增强for底层也是迭代器,注意并发修改异常(使用增强for遍历同时不能使用集合自己的增/删方法)   全系列集合通用遍历方法foreach()        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(List.of(&quot;李四疯&quot;,&quot;吴四疯&quot;,&quot;张四疯&quot;,&quot;王四疯&quot;,&quot;赵四疯&quot;));        list.forEach(new Consumer&lt;String&gt;() &#123;                @Override                public void accept(String s) &#123;                    if (s.startsWith(&quot;张&quot;)) &#123;                        System.out.println(s);                    &#125;                &#125;            &#125;);        使用技巧:        容器对象名.forEach        方法传递匿名内部类对象,重写accept(形式参数)接收的就是集合中每一个元素        注意事项:底层也是迭代器,注意并发修改异常   遍历方式对比:        1.普通for,适用于有索引的容器,需要使用带有索引方法        2.迭代器,使用迭代器时,想要删除,需要使用迭代器remove() -- 推荐使用removeIf()            removeif()方法的使用：            ArraysList&lt;String&gt; = new ArraysList(List.of(&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;));            list.removeIf(new Predicate&lt;String&gt;() &#123;                        @Override                        public boolean test(String s) &#123;                            return &quot;1&quot;.equals(s);                        &#125;                    &#125;);        3.增强for,单列集合,数组,双列集合(需要转换),简化迭代器遍历 -- 推荐单纯遍历使用        4.forEach() 全集合通用遍历方式,可以添加条件   关于迭代器使用注意事项:   1.  能够使用迭代器的前提条件:实现Iterable接口       Collection单列集合顶层接口继承 Iterable接口 --单列集合都可以使用迭代器       Map和Iterable接口无关,不能使用迭代器,需要转换   2.在使用迭代器过程中,不能使用当前集合自身的增/删方法,会产生并发修改异常       java.util.ConcurrentModificationException</code></pre><p>List接口:可以存储重复元素,元素存取顺序一致,带有索引<br>–单列集合<br>List子接口方法：<br>0.多态形式创建对象，目的:为了使用ArrayList重写List当中对于索引操作相关特殊方法<br>List<String> list = new ArrayList&lt;&gt;();<br>1.在指定索引位置插入(//批量)添加元素<br>list.add(int index, E element)  //  list.addAll(int index ,Collection<?extend?> c)<br>2.删除指定索引位置元素,返回被删除的元素<br>list.remove(int index)<br>3.删除指定元素,返回是否删除成功<br>list.remove(Object o)<br>4.将指定索引位置元素使用新元素进行替换,返回值是被修改的元素<br>list.set(int index, E element)<br>5.获取指定索引位置元素<br>list.get(int index)<br>6.获取指定元素在集合中最后一次出现的索引位置<br>list.lastIndexOf(Object o)<br>7.使用同种数据类型元素构建List集合<br>ArrayList<String> list2 = new ArrayList&lt;&gt;(List.of(“1”, “2”, “3”, “4”));<br>8.截取[fromIndex,toIndex)的元素,返回新集合<br>ArrayList<String> list1 = new ArrayList&lt;&gt;(list.subList(1, 4));<br>使用技巧:1.将截取的集合作为参数进行传递<br>list1.addAll(list.subList(1, 4));</p><pre><code>                2.将截取的集合插入到index索引位置上                list1.addAll(1,list.subList(1, 4));        9.将集合转换为存储相同数据类型的数组        String[] strings = list.toArray(new String[0]);    ArrayList:（底层是数组(增删慢,查询快):ArrayList）        0.创建Arraylist集合:        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();        1.添加元素:        list.add()        2.清空集合:void clear        list.clear()        3.是否包含指定元素:boolean contains(Object o)        list.contains()        4.判断集合是否为空:boolean isEmpty()        list.isEmpty()        5.返回集合元素个数:int size()        list.size()        6.创建有初始化元素的集合        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(list.of(1,2,3,4));        7.批量添加元素;        list.addAll(list.of(1,2,3,4,5))    补充方法:Collections:单列集合工具类方法        1.打乱集合中元素顺序:static void shuffle(List&lt;?&gt; list)        Collections.shuffle(list)        2.依赖元素的自然排序规则对集合中元素进行自然排序:static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list)        Collections.sort(list)                目前:                Integer(从小到大)                String(字典顺序 -- 计算对应位置字符差值,从小到大)                //a ba abc cba cbb bcb                //a abc ba bcb cba cbb    ArrayList集合底层扩容机制            //空参构造创建ArrayList集合对象            //1.默认初始化容量为0            //2.首次添加元素扩容为10            //3.默认扩容机制,原始容量的1.5倍            //使用带参构造创建ArrayList集合对象            //1.根据构造方法内传递的集合长度确定扩容方式                //如果传递集合长度为0(没有元素),底层使用长度为0数组                //如果传递的集合存在元素,按照参数集合的长度初始化底层数组,并进行元素拷贝,首次添加元素不会扩容至10            //2.默认扩容机制,原始容量的1.5倍            //扩容时是用之前的数量*1.5还是添加元素后的数量*1.5?（详情见Arraylist2）            自动扩容机制详解：当集合下一个添加元素超过集合容量时，集合容量扩充至添加元素前最大容量的1.5倍。    LinkedList（底层是链表(增删快,查询慢):LinkedList:特有的操作头和为节点方法）:    0.创建集合对象    LinkedList&lt;Integer&gt; list = new LinkedList&lt;&gt;();            //1.使用空参构造创建LinkedList集合对象                //空参构造什么都没有                //但是初始化两个成员变量                    //LinkedList.Node&lt;E&gt; first:null 头节点 -- 找到链表中第一个节点的地址                    //LinkedList.Node&lt;E&gt; last:null 尾节点 -- 找到链表中最后一个节点的地址            //Node&lt;E&gt;:是LinkedList集合中的内部类,用来表示节点对象                //E item; 节点对象存储的元素                //Node&lt;E&gt; next; 记录下一个节点地址                //Node&lt;E&gt; prev; 记录前一个节点地址    1.添加第一个元素(0索引位置)    list.addFirst(1);    2.添加最后一个元素(最后一个索引位置的后面 size位置）    list.addLast(2);    3.获取第一个元素    list.getFirst();    4.获取最后一个元素    list.getLast();    5.删除第一个元素    list.removeFirst();    6.删除最后一个元素    list.removeLast();</code></pre><p>Set接口:不能存储重复元素,元素存取顺序不一致,没有索引<br>–单列集合<br>HashSet:<br>底层是哈希表:HashSet,存储自定义类对象,需要该类重写hashCode()以及equals()<br>存储：通过地址值和数组长度来计算应存入的位置<br>分析去重原理:<br>1.没有重写hashCode()和equals()<br>使用new出来空间标识计算hash值,值一定不同<br>但是值%数组长度计算的位置可能相同<br>12 % 16 – 12<br>28 % 16 – 12<br>使用equals()比较,没有重写,使用==比较地址,地址不同,直接存储（可能导致存入相同元素）</p><pre><code>                        2.重写之后:                            使用对象内容计算哈希值,不使用地址                            计算索引位置相同时,使用重写equals比较内容            结论:                JDK8底层优化:                    当链表长度&gt;=8转换为红黑树                    当红黑树节点数量&lt;=6转换为链表                实际应用:HashSet存储自定义类对象,想要进行去重操作,必须重写hashCode()以及equals()                实际应用情况,认为内容相同的对象才是重复对象,不看对象地址    TreeSet：            底层是红黑树，存储自定义类对象,需要该类                1.拥有自然排序规则                    自然排序规则：根据元素的ASCII码进行排序                2.TreeSet构造方法内传递比较器                    1.类实现比较器接口，重写compareTo方法                    class Student implements Comparable&lt;Student&gt;&#123;                      //泛型类型书写当前接口实现类类型                          @Override                          public int compareTo(Student o) &#123;                              //注意:规则可以按照需求书写主要和次要条件                              //主要条件按照年龄排序                          int result = o.getAge() - this.getAge();                              //年龄相同,按照String姓名自然排序                          if (result == 0)&#123;                              result = this.getName().compareTo(o.getName());                          &#125;                          return result;                      &#125;                      2.构造方法参数位置传递比较器Comparator对象，重写compare方法                      TreeSet&lt;String&gt; set = new TreeSet&lt;&gt;(new Comparator&lt;String&gt;() &#123;                                 @Override                                 public int compare(String o1, String o2) &#123;                                     //书写主要条件,字符串长度                                     int result = o1.length() - o2.length();                                     //次要条件                                     if (result == 0)&#123;                                         result = o2.compareTo(o1);                                     &#125;                                     return result;                                 &#125;                             &#125;);            去重原理：compareTo方法返回值为0不存             排序原理：1.实现Comparable接口，重写compareTo方法 -- 自然排序（String类实现了自然排序，即通过元素的ASCII码排序）                      2.在构造方法中传递比较器Comparator对象，重写compare方法 -- 比较器排序                          //this:方法调用者,表示当前即将存入的对象                          //o:参数对象,表示已经存在在集合中对象                          //返回值影响排序顺序                          //正数:即将存入的比较大,存在右侧                          //0:重复,不存                          //负数:即将存入的比较小,存在左侧</code></pre><p>Map接口 – 没有继承Iterable,不能使用迭代器和增强for<br>– 双列集合</p><pre><code>    HashMap:            去重原理：与HashSet相同            底层是哈希表:存储自定义类对象,需要该类重写hashCode()以及equals()            HashMap方法：                0.创建Hashmap集合                HashMap&lt;String, Integer&gt; map = new HashMap&lt;&gt;();                1.添加元素,返回(被添加)的元素                   1.如果键不存在,直接添加键值对,返回的是默认初始化值null                   2.如果键存在,此时覆盖原来的值(修改),返回是修改之前的值 -- 修改方法                map.put(&quot;卢本伟&quot;, 25);                2.直接打印Map集合,得到的展示格式:                System.out.println(map);                   &#123;键=值, 键=值...&#125;                3.删除元素,返回被删除的值                map.remove(&quot;卢本伟&quot;);                4.清空集合                map.clear();                5.判断是否包含键 -- 键一定不重复                boolean b = map.containsKey(&quot;9528&quot;);                6.判断是否包含值 -- 值可能会重复                boolean b1 = map.containsValue(&quot;李四&quot;);                7.判断集合是否为空                boolean empty = map.isEmpty();                8.获取集合键值对（Entry对象）的个数                map.size();                9.获取map集合中的键值并返回一个Set集合                Set&lt;Integer&gt; keys = map.keySet();                10.获取map集合中对应键的值                map.get(key);                11.获取map集合中键值对对象并返回一个Set集合                map.entrySet();                12.键值对对象entry，搭配map的Entry对象遍历                entry.getKey();//获取键值对对象的键                entry.getValue();//获取键值对对象的值            Hashmap的遍历方式：                    Map接口特点:                        1.顶层接口和Iterable没关系,不能使用迭代器                        2.没有索引,不能使用普通for                        想要对Map集合进行遍历操作,必须要进行转换                            转换为单列集合                    1.把所有的键都获取出来封装为一个单列集合, 遍历该集合,找到对应数据值                            Set&lt;Integer&gt; keys = map.keySet();                            for (Integer key : keys) &#123;//key依次表示获取的每一个键                                //通过集合对象根据键获取值                                String value = map.get(key);                                System.out.println(key + &quot;-&quot; + value);                            &#125;                    2.将所有的键值对Entry对象获取出来,遍历键值对对象集合,获取键和值                            Set&lt;Map.Entry&lt;Integer, String&gt;&gt; entries = map.entrySet();                            for (Map.Entry&lt;Integer, String&gt; entry : entries) &#123;//entry依次表示每一个键值对对象                                //使用获取的Entry对象,获取键和值                                Integer key = entry.getKey();                                String value = entry.getValue();                                System.out.println(key + &quot;-&quot; + value);                            &#125;                    3.全系列通用foreach                    map.forEach(new BiConsumer&lt;Integer, String&gt;() &#123;                                @Override                                public void accept(Integer key, String value) &#123;                                    System.out.println(key + &quot;-&quot; + value);                                &#125;                            &#125;);    TreeMap:底层是红黑树,存储自定义类对象,需要该类            1.拥有自然排序规则            2.TreeMap构造方法内传递比较器            对于TreeMap来讲,只对键进行排序            如果将自定义类对象作为TreeMap集合的键进行使用,必须                1.该类实现Comparable接口,重写compareTo -- 自然排序                2.TreeMap构造方法内,传递Comparator比较器对象,重写compare方法 -- 比较器排序</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Collection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE_</title>
      <link href="/2022/07/31/java-EE/"/>
      <url>/2022/07/31/java-EE/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Collection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EastWind</title>
      <link href="/2022/07/27/EastWind/"/>
      <url>/2022/07/27/EastWind/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.DayOfWeek;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dengzm2022</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-07-27 18:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EastWind</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//提供一个客户下单时间字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ordTime</span> <span class="operator">=</span> <span class="string">&quot;2022/07/29 15:00&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户下单时间转Date类型ordDateTime</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dtf</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd HH:mm&quot;</span>);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ordDateTime</span> <span class="operator">=</span> LocalDateTime.parse(ordTime, dtf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户下单当天时间的下午3点时间的Date类型getTodayTime</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">getTodayTime</span> <span class="operator">=</span> LocalDateTime.of(ordDateTime.getYear(), ordDateTime.getMonth(), ordDateTime.getDayOfMonth(), <span class="number">15</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户下单时间是否在当天下午3点之前</span></span><br><span class="line">        <span class="keyword">if</span> (ordDateTime.isBefore(getTodayTime)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//若在三点之前，进行提示</span></span><br><span class="line">            System.out.println(<span class="string">&quot;您在今天15：00之前下单，下单后第二天下午3:00之前发货&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果用户是当天下午3:00之前完成下单,应该第二天下午3:00之前发货</span></span><br><span class="line">            <span class="type">LocalDateTime</span> <span class="variable">getBill</span> <span class="operator">=</span> getBillTime(ordDateTime, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果第二天是周日,发货时间再+1天</span></span><br><span class="line">            isSunday(ordTime, dtf, getBill);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ordDateTime.isAfter(getTodayTime) || ordDateTime.equals(getTodayTime)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//若在三点之后下单，进行提示</span></span><br><span class="line">            System.out.println(<span class="string">&quot;您在今天15：00之后下单，下单后第三天下午3:00之前发货&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果是当前下午3:00之后下单,+2天</span></span><br><span class="line">            <span class="type">LocalDateTime</span> <span class="variable">getBill</span> <span class="operator">=</span> getBillTime(ordDateTime, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果是遇到周日+1天</span></span><br><span class="line">            isSunday(ordTime, dtf, getBill);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isSunday</span><span class="params">(String ordTime, DateTimeFormatter dtf, LocalDateTime getBill)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (getBill.getDayOfWeek() == DayOfWeek.SUNDAY) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果是星期天,要再延误一天，给出提示</span></span><br><span class="line">            System.out.println(<span class="string">&quot;不好意思，发货当天遇上星期天，要延误一天&quot;</span>);</span><br><span class="line">            <span class="type">LocalDateTime</span> <span class="variable">getBillSun</span> <span class="operator">=</span> getBillTime(getBill, <span class="number">1</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">getBillTimeStr</span> <span class="operator">=</span> getBillSun.format(dtf);</span><br><span class="line">            System.out.println(<span class="string">&quot;下单时间：&quot;</span> + ordTime + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;发货时间&quot;</span> + getBillTimeStr + <span class="string">&quot;之前发货&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果不是星期天，不用延误</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">getBillTimeStr</span> <span class="operator">=</span> getBill.format(dtf);</span><br><span class="line">            System.out.println(<span class="string">&quot;下单时间：&quot;</span> + ordTime + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;发货时间&quot;</span> + getBillTimeStr + <span class="string">&quot;之前发货&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法作用是返回用户下单时间增加time天后的时间类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LocalDateTime <span class="title function_">getBillTime</span><span class="params">(LocalDateTime ordDateTime, <span class="type">int</span> time)</span> &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">orderTime</span> <span class="operator">=</span> ordDateTime.plusDays(time);</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.of(orderTime.getYear(), orderTime.getMonth(), orderTime.getDayOfMonth(), <span class="number">15</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE_Project_Manager</title>
      <link href="/2022/07/19/JavaSE_Project_Manager/"/>
      <url>/2022/07/19/JavaSE_Project_Manager/</url>
      
        <content type="html"><![CDATA[<h1>JavaSE_Project_Manager</h1><h2 id="一、创建module">一、创建module</h2><h2 id="二、创建package（分包思想）">二、创建package（分包思想）</h2><h3 id="domain">domain</h3><h3 id="controller">controller</h3><h3 id="service">service</h3><h3 id="dao-Data-Access-Object">dao(Data Access Object)</h3><h3 id="entry">entry</h3><h2 id="三、创建类（分类思想）">三、创建类（分类思想）</h2><h3 id="Manager">Manager</h3><h3 id="ManagerController">ManagerController</h3><h3 id="ManagerService">ManagerService</h3><h3 id="ManagerDao">ManagerDao</h3><h3 id="InfoManagerEntry">InfoManagerEntry</h3><h2 id="四、完善类">四、完善类</h2><h3 id="一、完善Manager类">一、完善Manager类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">添加成员变量</span><br><span class="line"></span><br><span class="line">添加无参、有参构造方法</span><br><span class="line"></span><br><span class="line">添加get、set方法</span><br></pre></td></tr></table></figure><h3 id="二、完善InfoManagerEntry类（主要调用经理管理系统）">二、完善InfoManagerEntry类（主要调用经理管理系统）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InfoManagerEntry</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;--------欢迎来到黑马信息管理系统--------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入您的选择:1.学生管理  2.老师管理  3.经理管理 4.退出&quot;</span>);</span><br><span class="line">            <span class="comment">//键盘输入选择管理系统</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">choice</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="comment">//输入1进入学生管理系统</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line"><span class="comment">//                    创建一个ManagerController对象，作用是客服，与用户进行交互</span></span><br><span class="line">                    <span class="type">ManagerController</span> <span class="variable">ManagerController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ManagerController</span>();</span><br><span class="line">                    <span class="comment">//调用ManagerController的start（）方法进入学生管理系统</span></span><br><span class="line">                    ManagerController.start();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line"><span class="comment">////                    System.out.println(&quot;老师管理&quot;);</span></span><br><span class="line">                    <span class="type">TeacherController</span> <span class="variable">teacherController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TeacherController</span>();</span><br><span class="line">                    teacherController.start();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line"><span class="comment">//                    System.out.println(&quot;经理管理&quot;);</span></span><br><span class="line">                    <span class="type">ManagerController</span> <span class="variable">managerController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ManagerController</span>();</span><br><span class="line">                    managerController.start();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;感谢您使用黑马信息管理系统！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;您的输入有误&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、完善ManagerController类start（）方法">三、完善ManagerController类start（）方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        loop:</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;--------欢迎来到 &lt;经理&gt; 管理系统--------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入您的选择: 1.添加经理  2.删除经理  3.修改经理  4.查看经理  5.退出&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">choice</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    addManager();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                    deleteManager();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                    updateManager();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                    findAllManager();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;5&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;感谢您使用&lt;经理&gt;管理系统！&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span> loop;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="四、完善ManagerController类中findAllManager（）方法">四、完善ManagerController类中findAllManager（）方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findAllManager</span><span class="params">()</span> &#123;</span><br><span class="line">        Manager[] mans = managerService.findAllManager();</span><br><span class="line">        <span class="keyword">if</span> (mans == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查无信息&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;经理号\t\t姓名\t年龄\t生日&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mans.length; i++) &#123;</span><br><span class="line">            System.out.println(mans[i].getManagerId() + <span class="string">&quot;\t&quot;</span> + mans[i].getName() + <span class="string">&quot;\t&quot;</span> + mans[i].getAge() + <span class="string">&quot;\t\t&quot;</span> + mans[i].getBirthday());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="五、完善ManagerService类中findAllManager（）方法">五、完善ManagerService类中findAllManager（）方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Manager[] findAllManager() &#123;</span><br><span class="line">        Manager[] mans = managerDao.findAllManager();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mans.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mans[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> mans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="六、完善ManagerDao类中findAllManager（）方法">六、完善ManagerDao类中findAllManager（）方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Manager[] findAllManager() &#123;</span><br><span class="line">        <span class="keyword">return</span> mans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="七、完善ManagerService类中isExist（）方法">七、完善ManagerService类中isExist（）方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isExist</span><span class="params">(String managerId)</span> &#123;</span><br><span class="line">        Manager[] mans = managerDao.findAllManager();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mans.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mans[i] != <span class="literal">null</span> &amp;&amp; managerId.equals(mans[i].getManagerId())) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="八、完善ManagerController类中addManager-方法">八、完善ManagerController类中addManager()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line">        getId(manager);</span><br><span class="line">        getInfo(manager);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> managerService.addManager(manager);</span><br><span class="line">        judge(flag);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其中：</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getId</span><span class="params">(Manager manager)</span> &#123;</span><br><span class="line"><span class="comment">//      输入不存在的ID并封装进对象</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入经理号：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">managerId</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> managerService.isExist(managerId);</span><br><span class="line">            <span class="keyword">if</span> (result) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;经理号已存在，请重新输入&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                manager.setManagerId(managerId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">judge</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getInfo</span><span class="params">(Manager manager)</span> &#123;</span><br><span class="line">        <span class="comment">//封装经理信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入经理姓名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        manager.setName(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入经理年龄：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        manager.setAge(age);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入经理生日：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">birthday</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        manager.setBirthday(birthday);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="八、完善ManagerService类中addManager-方法">八、完善ManagerService类中addManager()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addManager</span><span class="params">(Manager manager)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> managerDao.addManager(manager);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="九、完善ManagerDao类中addManager-方法">九、完善ManagerDao类中addManager()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addManager</span><span class="params">(Manager manager)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mans.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mans[i] == <span class="literal">null</span>) &#123;</span><br><span class="line">                mans[i] = manager;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="十、完善ManagerController类中deleteManager-方法">十、完善ManagerController类中deleteManager()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">deleteManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">managerId</span> <span class="operator">=</span> getId();</span><br><span class="line">        <span class="keyword">if</span> (managerId == <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> managerService.deleteManager(managerId);</span><br><span class="line">            judge(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其中：</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//      返回一个存在的ID</span></span><br><span class="line">        String managerId;</span><br><span class="line">        loop:</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入经理号：&quot;</span>);</span><br><span class="line">            managerId = sc.next();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> managerService.isExist(managerId);</span><br><span class="line">            <span class="keyword">if</span> (result) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;经理号不存在 1.重新输入 2.退出&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">choice</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                        managerId = <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span> loop;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        System.out.println(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> managerId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">judge</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="十一、完善ManagerService类中deleteManager-方法">十一、完善ManagerService类中deleteManager()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteManager</span><span class="params">(String managerId)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> managerDao.deleteManager(managerId);</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="十二、完善ManagerDao类中deleteManager-方法">十二、完善ManagerDao类中deleteManager()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteManager</span><span class="params">(String managerId)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(managerId);</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mans[index] = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其中:</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(String managerId)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mans.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mans[i] != <span class="literal">null</span> &amp;&amp; managerId.equals(mans[i].getManagerId())) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="十三、完善ManagerController类中updateManager-方法">十三、完善ManagerController类中updateManager()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line"><span class="comment">//        存在的ID是要修改的ID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">managerId</span> <span class="operator">=</span> getId();</span><br><span class="line"><span class="comment">//        把存在的ID和信息封装进对象</span></span><br><span class="line">        <span class="keyword">if</span> (managerId == <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            manager.setManagerId(managerId);</span><br><span class="line">            getInfo(manager);</span><br><span class="line"><span class="comment">//        调用业务员修改方法</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> managerService.updateManager(managerId, manager);</span><br><span class="line">            judge(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其中</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//      返回一个存在的ID</span></span><br><span class="line">        String managerId;</span><br><span class="line">        loop:</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入经理号：&quot;</span>);</span><br><span class="line">            managerId = sc.next();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> managerService.isExist(managerId);</span><br><span class="line">            <span class="keyword">if</span> (result) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;经理号不存在 1.重新输入 2.退出&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">choice</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                        managerId = <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span> loop;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        System.out.println(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> managerId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getInfo</span><span class="params">(Manager manager)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入经理姓名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        manager.setName(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入经理年龄：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        manager.setAge(age);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入经理生日：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">birthday</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        manager.setBirthday(birthday);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">judge</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="十四、完善ManagerService类中updateManager-方法">十四、完善ManagerService类中updateManager()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateManager</span><span class="params">(String managerId, Manager manager)</span> &#123;</span><br><span class="line">       <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> managerDao.updateManager(managerId, manager);</span><br><span class="line">       <span class="keyword">if</span> (result) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="十五、完善ManagerDao类中updateManager-方法">十五、完善ManagerDao类中updateManager()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateManager</span><span class="params">(String managerId, Manager manager)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(managerId);</span><br><span class="line">       <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           mans[index] = manager;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其中</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(String managerId)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mans.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mans[i] != <span class="literal">null</span> &amp;&amp; managerId.equals(mans[i].getManagerId())) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="五、整体代码演示">五、整体代码演示</h2><h3 id="Manager类">Manager类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Manager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String ManagerId;</span><br><span class="line">    <span class="keyword">private</span> String Name;</span><br><span class="line">    <span class="keyword">private</span> String Age;</span><br><span class="line">    <span class="keyword">private</span> String Birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String managerId, String name, String age, String birthday)</span> &#123;</span><br><span class="line">        ManagerId = managerId;</span><br><span class="line">        Name = name;</span><br><span class="line">        Age = age;</span><br><span class="line">        Birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getManagerId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ManagerId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setManagerId</span><span class="params">(String managerId)</span> &#123;</span><br><span class="line">        ManagerId = managerId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(String birthday)</span> &#123;</span><br><span class="line">        Birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ManagerController类">ManagerController类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManagerController</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">ManagerService</span> <span class="variable">managerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ManagerService</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        loop:</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;--------欢迎来到 &lt;经理&gt; 管理系统--------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入您的选择: 1.添加经理  2.删除经理  3.修改经理  4.查看经理  5.退出&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">choice</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    addManager();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                    deleteManager();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                    updateManager();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                    findAllManager();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;5&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;感谢您使用&lt;经理&gt;管理系统！&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span> loop;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line">        getId(manager);</span><br><span class="line">        getInfo(manager);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> managerService.addManager(manager);</span><br><span class="line">        judge(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">deleteManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">managerId</span> <span class="operator">=</span> getId();</span><br><span class="line">        <span class="keyword">if</span> (managerId == <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> managerService.deleteManager(managerId);</span><br><span class="line">            judge(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line"><span class="comment">//        存在的ID是要修改的ID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">managerId</span> <span class="operator">=</span> getId();</span><br><span class="line"><span class="comment">//        把存在的ID和信息封装进对象</span></span><br><span class="line">        <span class="keyword">if</span> (managerId == <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            manager.setManagerId(managerId);</span><br><span class="line">            getInfo(manager);</span><br><span class="line"><span class="comment">//        调用业务员修改方法</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> managerService.updateManager(managerId, manager);</span><br><span class="line">            judge(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findAllManager</span><span class="params">()</span> &#123;</span><br><span class="line">        Manager[] mans = managerService.findAllManager();</span><br><span class="line">        <span class="keyword">if</span> (mans == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查无信息&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;经理号\t\t姓名\t年龄\t生日&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mans.length; i++) &#123;</span><br><span class="line">            System.out.println(mans[i].getManagerId() + <span class="string">&quot;\t&quot;</span> + mans[i].getName() + <span class="string">&quot;\t&quot;</span> + mans[i].getAge() + <span class="string">&quot;\t\t&quot;</span> + mans[i].getBirthday());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//      返回一个存在的ID</span></span><br><span class="line">        String managerId;</span><br><span class="line">        loop:</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入经理号：&quot;</span>);</span><br><span class="line">            managerId = sc.next();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> managerService.isExist(managerId);</span><br><span class="line">            <span class="keyword">if</span> (result) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;经理号不存在 1.重新输入 2.退出&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">choice</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                        managerId = <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span> loop;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        System.out.println(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> managerId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getId</span><span class="params">(Manager manager)</span> &#123;</span><br><span class="line"><span class="comment">//      输入不存在的ID并封装进对象</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入经理号：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">managerId</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> managerService.isExist(managerId);</span><br><span class="line">            <span class="keyword">if</span> (result) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;经理号已存在，请重新输入&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                manager.setManagerId(managerId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">judge</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getInfo</span><span class="params">(Manager manager)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入经理姓名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        manager.setName(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入经理年龄：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        manager.setAge(age);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入经理生日：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">birthday</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        manager.setBirthday(birthday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ManagerService类">ManagerService类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManagerService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ManagerDao</span> <span class="variable">managerDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ManagerDao</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addManager</span><span class="params">(Manager manager)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> managerDao.addManager(manager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteManager</span><span class="params">(String managerId)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> managerDao.deleteManager(managerId);</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateManager</span><span class="params">(String managerId, Manager manager)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> managerDao.updateManager(managerId, manager);</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Manager[] findAllManager() &#123;</span><br><span class="line">        Manager[] mans = managerDao.findAllManager();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mans.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mans[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> mans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isExist</span><span class="params">(String managerId)</span> &#123;</span><br><span class="line">        Manager[] mans = managerDao.findAllManager();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mans.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mans[i] != <span class="literal">null</span> &amp;&amp; managerId.equals(mans[i].getManagerId())) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ManagerDao类">ManagerDao类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManagerDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Manager[] mans = <span class="keyword">new</span> <span class="title class_">Manager</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addManager</span><span class="params">(Manager manager)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mans.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mans[i] == <span class="literal">null</span>) &#123;</span><br><span class="line">                mans[i] = manager;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteManager</span><span class="params">(String managerId)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(managerId);</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mans[index] = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateManager</span><span class="params">(String managerId, Manager manager)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(managerId);</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mans[index] = manager;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Manager[] findAllManager() &#123;</span><br><span class="line">        <span class="keyword">return</span> mans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(String managerId)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mans.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mans[i] != <span class="literal">null</span> &amp;&amp; managerId.equals(mans[i].getManagerId())) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Manager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MilkTea_Methods</title>
      <link href="/2022/07/08/MilkTea_Methods/"/>
      <url>/2022/07/08/MilkTea_Methods/</url>
      
        <content type="html"><![CDATA[<h1>MilkTea_Methods</h1><h2 id="1、茶颜悦色">1、茶颜悦色</h2><h3 id="幽兰拿铁">幽兰拿铁</h3><h4 id="打印HelloWorld">打印HelloWorld</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="人间烟火">人间烟火</h3><h4 id="键盘录入">键盘录入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> scan.nextDouble();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> scan.nextBoolean();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scan.next();<span class="comment">//不能录入空格，录入空格就结束</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> scan.nextLine();<span class="comment">//可以录入空格，录入回车就结束</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="声声乌龙">声声乌龙</h3><h4 id="三元运算符找最大值最小值">三元运算符找最大值最小值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>,min = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> num &gt; max ? num : max;</span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> num &lt; min ? num : min;</span><br></pre></td></tr></table></figure><h3 id="可可芭蕾">可可芭蕾</h3><h4 id="流程控制语句-考试奖励">流程控制语句/考试奖励</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入学生的成绩:&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">grade</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">            <span class="keyword">if</span> (grade &gt;= <span class="number">95</span> &amp;&amp; grade &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;奖励自行车一辆&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (grade &gt;= <span class="number">90</span> &amp;&amp; grade &lt; <span class="number">95</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;奖励游乐场一次&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (grade &gt;= <span class="number">80</span> &amp;&amp; grade &lt; <span class="number">90</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;奖励变形金刚一个&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (grade &lt; <span class="number">80</span> &amp;&amp; grade &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;挨顿揍，这个城市又多了一个伤心的人&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入正确的成绩&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="四季春茶">四季春茶</h3><h4 id="switch-减肥计划">switch/减肥计划</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;今天周几：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">week</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="keyword">switch</span>(week)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;周一&quot;</span> :</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周一，该去跑步&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;周二&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周二，该去游泳&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;周三&quot;</span> :</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周三，该去慢走&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;周四&quot;</span> :</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周四，该去动感单车&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;周五&quot;</span> :</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周五，该去拳击&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;周六&quot;</span> :</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周六，该去爬山&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;周日&quot;</span> :</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周日，该补回来了&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;不存在这个星期&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="case穿透">case穿透</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>下面的代码执完后x的值是</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>,j = <span class="number">25</span>,x = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">switch</span>(j-i) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">15</span>: </span><br><span class="line">            x++;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">            x+=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">            x+=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            --x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="红颜茶冻">红颜茶冻</h3><h4 id="偶数和">偶数和</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//传统写法：</span></span><br><span class="line"><span class="comment">//        int sum = 0;</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt;= 100; i++) &#123;</span></span><br><span class="line"><span class="comment">//            if (i % 2 == 0) &#123;</span></span><br><span class="line"><span class="comment">//                sum += i;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        System.out.println(sum);</span></span><br><span class="line"><span class="comment">//改进写法：</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="浮云沉香">浮云沉香</h3><h4 id="水仙花数">水仙花数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i % <span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> i / <span class="number">100</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (ge * ge * ge) + (shi * shi * shi) + (bai * bai * bai);</span><br><span class="line">            <span class="keyword">if</span> (num == i) &#123;</span><br><span class="line">                System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="芊芊马卡龙">芊芊马卡龙</h3><h4 id="珠穆朗玛峰whlie">珠穆朗玛峰whlie</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义计数器count,初始值为0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用while循环,直到折叠厚度达到珠峰高度为止</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">paper</span> <span class="operator">=</span> <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(paper &lt;= <span class="number">8844430</span>)&#123;</span><br><span class="line">            paper *= <span class="number">2</span>;<span class="comment">//条件控制语句,纸张厚度每次折叠是原来的2倍</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;一共需要折叠&quot;</span> + count + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="浮生半日">浮生半日</h3><h4 id="购票系统">购票系统</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">planePrice</span> <span class="operator">=</span> <span class="number">5000</span>;</span><br><span class="line">        String month,cangwei;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">1</span> ;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> position;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; flag ; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入您出行的月份：&quot;</span>);</span><br><span class="line">            month = sc.next();</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入您选择的仓位（0为头等舱，1为经济舱）：&quot;</span>);</span><br><span class="line">            position = sc.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (month)&#123;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;一月&quot;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;二月&quot;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;三月&quot;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;九月&quot;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;十月&quot;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;十一月&quot;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;十二月&quot;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">                        planePrice *= <span class="number">0.7</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">1</span>) &#123;</span><br><span class="line">                        planePrice *= <span class="number">0.5</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;你的机票价格是：&quot; + (int)planePrice + &quot;元&quot;);</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;四月&quot;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;五月&quot;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;六月&quot;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;七月&quot;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;八月&quot;</span>:</span><br><span class="line">                    <span class="comment">//System.out.print(&quot;请输入您选择的仓位（0为头等舱，1为经济舱）：&quot;);</span></span><br><span class="line">                    <span class="comment">//position = sc.nextInt();</span></span><br><span class="line">                    <span class="comment">//System.out.println(&quot;你的机票价格是：&quot; + (int)planePrice + &quot;元&quot;);</span></span><br><span class="line">                    <span class="comment">//break;</span></span><br><span class="line">                    <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">                        planePrice *= <span class="number">0.9</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">1</span>) &#123;</span><br><span class="line">                        planePrice *= <span class="number">0.8</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (planePrice == <span class="number">5000</span> || position != <span class="number">0</span> &amp;&amp; position != <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入正确的月份（一月~十二月）和正确的仓位（0为头等舱，1为经济舱）&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">                cangwei = <span class="string">&quot;头等舱&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cangwei = <span class="string">&quot;经济舱&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;您的第&quot;</span>+ i + <span class="string">&quot; 张票选择的是：&quot;</span>+ month + <span class="string">&quot;的&quot;</span> + cangwei + <span class="string">&quot;价格为&quot;</span> + planePrice);</span><br><span class="line">            System.out.print(<span class="string">&quot;输入0退出购票系统，输入1继续购票：&quot;</span>);</span><br><span class="line">            temp = sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp == <span class="number">1</span>) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入错误,应输入0或1&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="珠穆朗玛峰for">珠穆朗玛峰for</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">paper</span> <span class="operator">=</span> <span class="number">0.0001</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;; i++) &#123;</span><br><span class="line">            paper *= <span class="number">2</span>;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (paper&gt;=<span class="number">8844.43</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br></pre></td></tr></table></figure><h3 id="少年时">少年时</h3><h4 id="循环标号-减肥计划-break：loop">循环标号/减肥计划 break：loop</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建键盘录入对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        loop:<span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入您要查看的星期数:&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;如无需查看其它,请输入0退出&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="comment">//退出方式1:</span></span><br><span class="line">            <span class="comment">/*if(choice == 0)&#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;感谢您的使用!&quot;);</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">            <span class="keyword">switch</span>(choice)&#123;</span><br><span class="line">                    <span class="comment">//退出方式2:</span></span><br><span class="line">                    <span class="comment">/*case 0:</span></span><br><span class="line"><span class="comment">System.out.println(&quot;感谢您的使用!&quot;);</span></span><br><span class="line"><span class="comment">System.exit(0);//结束JVM</span></span><br><span class="line"><span class="comment">break;*/</span></span><br><span class="line">                    <span class="comment">//退出方式3:</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;感谢您的使用!&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span> loop;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;珍珠奶茶&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;海底捞&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;撸串&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;麻辣香锅&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;水煮鱼&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;来顿牛蛙&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;哈啤酒&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入错误!&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="烟火易冷">烟火易冷</h3><h4 id="猜数字小游戏">猜数字小游戏</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> r.nextInt(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//System.out.println(a);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;猜数字小游戏，你还有&quot;</span> + (<span class="number">5</span> - i) + <span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入一个0~10的值:&quot;</span>);</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (a &gt; <span class="number">10</span> || a &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; num) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;大了&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &lt; num) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小了&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;恭喜你猜对了&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="桂花弄">桂花弄</h3><h4 id="循环嵌套九九乘法表">循环嵌套九九乘法表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            System.out.print(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+(j*i)+<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="不知冬">不知冬</h3><h4 id="评委打分">评委打分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">//数组赋值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; ) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;个评委的打分&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">0</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            arr[i] = score;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的值不合法，请输入0-100之间的整数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数组求最大值.最小值.和</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        sum += arr[i];</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">            min = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">avg</span> <span class="operator">=</span> (sum - max - min) / (arr.length - <span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;平均分：&quot;</span> + avg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="筝筝纸鸢">筝筝纸鸢</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="素颜锡兰">素颜锡兰</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、一点点奶茶">2、一点点奶茶</h2><h3 id="百香三重奏">百香三重奏</h3><h4 id="高三学年五个班级录入人数和随机成绩">高三学年五个班级录入人数和随机成绩</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">classNum</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//班级人数录入</span></span><br><span class="line">        <span class="type">int</span>[] studentNum = <span class="keyword">new</span> <span class="title class_">int</span>[classNum];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; studentNum.length; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;班人数：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">studentNumtemp</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (studentNumtemp &gt; <span class="number">0</span> &amp;&amp; studentNumtemp &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                studentNum[i] = studentNumtemp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入正确人数&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//班级成绩录入</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">rd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span>[][] grade = <span class="keyword">new</span> <span class="title class_">int</span>[classNum][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grade.length; i++) &#123;</span><br><span class="line">            grade[i] = <span class="keyword">new</span> <span class="title class_">int</span>[studentNum[i]];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; studentNum[i]; j++) &#123;</span><br><span class="line">                grade[i][j] = rd.nextInt(<span class="number">101</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grade.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; studentNum[i]; j++) &#123;</span><br><span class="line">                System.out.print(grade[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.输出当前班级的最高分和最低分</span></span><br><span class="line">        <span class="comment">//2.输出当前班级的总分及平均</span></span><br><span class="line">        System.out.print(<span class="string">&quot;输入班级号：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">no</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> grade[no - <span class="number">1</span>][<span class="number">0</span>], min = grade[no - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>, avg = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grade[no - <span class="number">1</span>].length; j++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//求当前班级no-1的最大值</span></span><br><span class="line">            <span class="keyword">if</span> (max &lt; grade[no - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                max = grade[no - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//求当前班级no-1的最小值</span></span><br><span class="line">            <span class="keyword">if</span> (min &gt; grade[no - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                min = grade[no - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//求当前班级no-1的成绩总和</span></span><br><span class="line">            sum += grade[no - <span class="number">1</span>][j];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//求当前班级no-1的成绩总和</span></span><br><span class="line">            avg = sum / grade[no - <span class="number">1</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(no + <span class="string">&quot;班的最高分为&quot;</span> + max + <span class="string">&quot;分，最低分为&quot;</span> + min + <span class="string">&quot;分&quot;</span>);</span><br><span class="line">        System.out.println(no + <span class="string">&quot;班的总分为&quot;</span> + sum + <span class="string">&quot;分，平均分为&quot;</span> + avg + <span class="string">&quot;分&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.计算当前学年的最高分和最低分并输出</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxAll</span> <span class="operator">=</span> grade[<span class="number">0</span>][<span class="number">0</span>], minAll = grade[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grade.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grade[i].length; j++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//计算当前学年的最高分</span></span><br><span class="line">                <span class="keyword">if</span> (maxAll &lt; grade[i][j]) &#123;</span><br><span class="line">                    maxAll = grade[i][j];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//计算当前学年的最低分</span></span><br><span class="line">                <span class="keyword">if</span> (minAll &gt; grade[i][j]) &#123;</span><br><span class="line">                    minAll = grade[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前学年最高分为&quot;</span> + maxAll + <span class="string">&quot;分，当前学年最低分为&quot;</span> + minAll + <span class="string">&quot;分&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.计算当前学年的平均分并输出</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">sumAll</span> <span class="operator">=</span> <span class="number">0</span>, avgAll = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grade.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grade[i].length; j++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//计算当前学年的总分</span></span><br><span class="line">                sumAll += grade[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算当前学年的平均分</span></span><br><span class="line">        avgAll = sumAll / (grade[<span class="number">0</span>].length+grade[<span class="number">1</span>].length+grade[<span class="number">2</span>].length+grade[<span class="number">3</span>].length+grade[<span class="number">4</span>].length);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前学年的平均分为&quot;</span>+avgAll + <span class="string">&quot;分&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.统计低于学年平均分的学生人数并输出</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grade.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grade[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grade[i][j] &lt; avgAll) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;总共有&quot;</span> + count + <span class="string">&quot;位同学低于学年平均分&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="四季春茶-2">四季春茶</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="翡翠柠檬">翡翠柠檬</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="百香绿">百香绿</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="葡萄柚绿">葡萄柚绿</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、蜜雪冰城">3、蜜雪冰城</h2><h3 id="蜜桃四季春">蜜桃四季春</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="森林玫果">森林玫果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="棒打鲜橙">棒打鲜橙</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4、喜茶">4、喜茶</h2><h3 id="雪山满陇金桂">雪山满陇金桂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="热沉香焙茶波波">热沉香焙茶波波</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="芝芝莓莓">芝芝莓莓</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="雪山莓莓桂花冻">雪山莓莓桂花冻</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MilkTea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Methods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MilkTea_Menu</title>
      <link href="/2022/07/08/MilkTea_MilkTeaMenu/"/>
      <url>/2022/07/08/MilkTea_MilkTeaMenu/</url>
      
        <content type="html"><![CDATA[<h1>奶茶菜单</h1><h2 id="1、茶颜悦色-2">1、茶颜悦色</h2><h3 id="幽兰拿铁-2">幽兰拿铁</h3><h3 id="人间烟火-2">人间烟火</h3><h3 id="声声乌龙-2">声声乌龙</h3><h3 id="可可芭蕾-2">可可芭蕾</h3><h3 id="四季春茶-3">四季春茶</h3><h3 id="红颜茶冻-2">红颜茶冻</h3><h3 id="浮云沉香-2">浮云沉香</h3><h3 id="芊芊马卡龙-2">芊芊马卡龙</h3><h3 id="浮生半日-2">浮生半日</h3><h3 id="少年时-2">少年时</h3><h3 id="烟火易冷-2">烟火易冷</h3><h3 id="桂花弄-2">桂花弄</h3><h3 id="不知冬-2">不知冬</h3><h3 id="筝筝纸鸢-2">筝筝纸鸢</h3><h3 id="素颜锡兰-2">素颜锡兰</h3><h2 id="2、一点点奶茶-2">2、一点点奶茶</h2><h3 id="百香三重奏-2">百香三重奏</h3><h3 id="四季春茶-4">四季春茶</h3><h3 id="翡翠柠檬-2">翡翠柠檬</h3><h3 id="百香绿-2">百香绿</h3><h3 id="葡萄柚绿-2">葡萄柚绿</h3><h2 id="3、蜜雪冰城-2">3、蜜雪冰城</h2><h3 id="蜜桃四季春-2">蜜桃四季春</h3><h3 id="森林玫果-2">森林玫果</h3><h3 id="棒打鲜橙-2">棒打鲜橙</h3><h2 id="4、喜茶-2">4、喜茶</h2><h3 id="雪山满陇金桂-2">雪山满陇金桂</h3><h3 id="热沉香焙茶波波-2">热沉香焙茶波波</h3><h3 id="芝芝莓莓-2">芝芝莓莓</h3><h3 id="雪山莓莓桂花冻-2">雪山莓莓桂花冻</h3><h3 id="满杯红柚">满杯红柚</h3><h3 id="芝芝芒芒">芝芝芒芒</h3><h3 id="芝芝金玉">芝芝金玉</h3><h3 id="酒酿桂花冻">酒酿桂花冻</h3><h2 id="5、古茗">5、古茗</h2><h3 id="豆乳绵绵">豆乳绵绵</h3><h4 id="百香双重奏">百香双重奏</h4><h4 id="晨露抹茶">晨露抹茶</h4><h4 id="凡尔赛满杯车厘">凡尔赛满杯车厘</h4><h4 id="晚香一颗柠">晚香一颗柠</h4><h4 id="直火乌龙">直火乌龙</h4>]]></content>
      
      
      <categories>
          
          <category> MilkTea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Menu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE_Exercises_Homework</title>
      <link href="/2022/07/08/JavaSE_Exercises_Homework/"/>
      <url>/2022/07/08/JavaSE_Exercises_Homework/</url>
      
        <content type="html"><![CDATA[<h2 id="day01">day01</h2><h3 id="作业">作业</h3><h4 id="题目1（概念）">题目1（概念）</h4><p>1.配置环境变量的目的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在不同的文件路径下都能打开javac java</span><br></pre></td></tr></table></figure><p>2.Java语言有哪三个版本?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JavaSE、JavaME、JavaEE</span><br></pre></td></tr></table></figure><p>3.用自己的话描述一下JRE是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JRE全称Java Runtime <span class="title function_">Environment</span><span class="params">(Java运行环境)</span>，包括JVM（Java虚拟机）和核心类库。</span><br></pre></td></tr></table></figure><p>4.用自己的话描述一下JDK的是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JDK全称Java Development <span class="title function_">Kit</span><span class="params">(Java开发工具)</span>，包括JRE和开发工具。</span><br></pre></td></tr></table></figure><p>5.用自己的话描述一下JVM是什么？作用是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JVM全称Java Virtual Machine（Java虚拟机），作用是使Java程序可以在不同的操作系统上运行，实现一次编写，到处运行。</span><br></pre></td></tr></table></figure><p>6.用自己的话简述JRE、JDK、JVM的关系是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JDK&gt;JRE&gt;JVM,JDK包括JRE和开发工具，JRE包括JVM和核心类库。</span><br></pre></td></tr></table></figure><p>7.请说出注释的作用和分类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注释是对代码的解释和说明，为了让程序员更好的理解代码。</span><br><span class="line">注释分为单行注释、多行注释和文档注释</span><br></pre></td></tr></table></figure><p>8.关键字的概念及特点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">关键字是java语言赋予特殊含义的单词</span><br></pre></td></tr></table></figure><p>9.什么是常量?常量有哪些分类?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常量是程序运行过程中，其值不会改变的量</span><br></pre></td></tr></table></figure><p>10.Java中数据类型有哪些分类？基本数据类型有哪些？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基本数据类型和引用数据类型，基本数据类型有整型，浮点型，布尔型，字符型</span><br></pre></td></tr></table></figure><h4 id="题目2">题目2</h4><p>请编写程序，将如下语句输出到屏幕上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java是一门跨平台的计算机语言</span><br><span class="line">被称为一次编写，处处运行</span><br></pre></td></tr></table></figure><p><strong>训练目标</strong></p><p>java语言HelloWorld案例的语法格式和编译运行。</p><p><strong>训练提示</strong></p><p>1、创建java文件。</p><p>2、编写类，用于完成该程序。</p><p>3、程序的运行需要主方法，编写主方法。</p><p>4、该使用什么语句将题目中的文本输出？</p><p>5、该怎样编译和运行java文件？</p><p><strong>参考方案</strong></p><p>模仿HelloWorld案例完成</p><p><strong>训练步骤</strong></p><p>1、新建文本文件，将名称修改为Test01.java。注意显示文件的后缀名，防止出现Test01.java.txt的文件名。</p><p>2、打开文件，编写代码，先定义一个类Test01，类名需要与文件名一致。注意大小写。</p><p>3、在类中定义主方法，在主方法中编写输出语句，将题目中的文本用双引号包裹。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;java是一门跨平台的计算机语言&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;被称为一次编写，处处运行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目3">题目3</h4><p>请编写程序，将某位学员的个人信息输出到屏幕上。信息包括姓名（字符串常量）、性别（字符常量）、年龄（整型常量）、身高（单位米，小数常量）、婚否（布尔常量）。输出格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br><span class="line">男</span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">1.78</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="题目4">题目4</h4><p><strong>训练目标</strong></p><p>java中的常量</p><p><strong>训练提示</strong></p><p>1、创建java文件。</p><p>2、编写类，用于完成该程序。</p><p>3、程序的运行需要主方法，编写主方法。</p><p>4、需要使用输出语句输出信息，那各种信息该怎样书写？</p><p>5、该怎样编译和运行java文件？</p><p><strong>参考方案</strong></p><p>使用输出语句直接输出常量的方式完成</p><p><strong>训练步骤</strong></p><p>1、新建文本文件，将名称修改为Test02.java。</p><p>2、打开文件，编写代码，先定义一个类Test02。在类中编写主方法。</p><p>3、在输出语句中分别输出各种信息。</p><pre><code>3.1、姓名是字符串常量，使用双引号包裹。3.2、性别是字符常量，使用单引号包裹。当然，也可以使用字符串，用双引号包裹。3.3、年龄是整数，直接输出整型。3.4、身高是小数，直接输出浮点型。3.5、婚否，是或者否，只有两种状态，适合使用布尔类型，直接输出boolean类型的true或者false。</code></pre><p>4、保存文件内容。打开cmd窗口，将命令目录切换至文件所在目录。使用javac命令编译java文件，使用java命令运行class文件，查看结果。注意：编译java文件，需要带后缀名；运行class文件，不需后缀名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">1.78d</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isMarry</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(gender);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        System.out.println(height);</span><br><span class="line">        System.out.println(isMarry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day02">day02</h2><h3 id="作业-2">作业</h3><h4 id="题目一："><strong>题目一：</strong></h4><p>看代码说结果，不要去运行。</p><p>System.out.println(2.0*(5/2));</p><ol><li>4</li><li>4.0</li><li>5</li><li>5.0</li><li>以上答案都不对</li></ol><p>答案:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line">java中整数相除结果只能得到整数，所以<span class="number">5</span>除<span class="number">2</span>结果为<span class="number">2</span></span><br><span class="line">java中只要有小数参与计算，结果一定是小数，所以<span class="number">2.0</span>*<span class="number">2</span>结果为<span class="number">4.0</span>    </span><br></pre></td></tr></table></figure><p>####<strong>题目二：</strong></p><p>1.下列关于java变量声明那个是错误的：</p><p>A . int x = 5;</p><p>B. double d = 3.14;</p><p>C. char grade = ‘C’;</p><p>D. String name = ‘黑马程序员’;</p><p>答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D</span><br></pre></td></tr></table></figure><h4 id="题目三："><strong>题目三：</strong></h4><p>2.看代码说结果，不要去运行。</p><p>double money = 10.0;</p><p>money = money + 5;</p><p>money = 2.5;</p><p>money = money + 10;</p><p>money = money -3;</p><p>System.out.println(money)</p><p>答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">24.5</span></span><br></pre></td></tr></table></figure><h4 id="题目四："><strong>题目四：</strong></h4><p>下面的名字哪些可以是变量名？</p><p>A：mybirthday</p><p>B：myname</p><p>C：my name</p><p>D：my################birthday</p><p>E：1987</p><p>F：class</p><p>答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AB</span><br><span class="line">解释：</span><br><span class="line">C中间有空格，不对</span><br><span class="line">D有非法符号################</span><br><span class="line">E不能以数字开头</span><br><span class="line">F不能用关键字    </span><br></pre></td></tr></table></figure><h4 id="题目五："><strong>题目五：</strong></h4><p>看代码说结果，不要去运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">firstName</span> <span class="operator">=</span> <span class="string">&quot;Tomas&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">familyName</span> <span class="operator">=</span> <span class="string">&quot;Zhang&quot;</span>;</span><br><span class="line">打印firstName + familyName 之后是什么结果？</span><br><span class="line"></span><br><span class="line">TomasZhang</span><br></pre></td></tr></table></figure><h4 id="题目6-单选">题目6(单选):</h4><p><strong>下列属于正确的自增自减运算符的是( A )</strong></p><pre><code>A. ++和--B.+和-C.+++和---D.-和/</code></pre><h4 id="题目7-单选">题目7(单选):</h4><p><strong>下列代码的运行结果是( A  )</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x++;   </span><br><span class="line"><span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> ++x; </span><br><span class="line">System.out.println(x);</span><br><span class="line">System.out.println(y);</span><br><span class="line">System.out.println(z);</span><br><span class="line">A. <span class="number">12</span> <span class="number">10</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line">B. <span class="number">10</span> <span class="number">11</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line">C. <span class="number">11</span> <span class="number">11</span> <span class="number">10</span> </span><br><span class="line"></span><br><span class="line">D. <span class="number">12</span> <span class="number">10</span> <span class="number">11</span></span><br></pre></td></tr></table></figure><h4 id="题目8-单选">题目8(单选):</h4><p><strong>下列关于自减运算符描述正确的是(  B )</strong></p><pre><code>A. --可以使用在常量中B.--如果放在变量的后面，是先参与操作，然后再自减C.--如果放在变量的前面，是先参与操作，然后再自增D.--如果放在变量的后面，是先执行自减，然后再参与操作</code></pre><h4 id="题目9-单选">题目9(单选):</h4><p><strong>下列代码的运行结果是( D )</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">12.3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A. <span class="number">12</span></span><br><span class="line"></span><br><span class="line">B. <span class="number">12.3</span></span><br><span class="line"></span><br><span class="line">C. <span class="number">12.0</span></span><br><span class="line"></span><br><span class="line">D. 编译错误</span><br></pre></td></tr></table></figure><h4 id="题目10-单选">题目10(单选):</h4><p><strong>下列代码的运行结果是( C  )</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">12.3</span>;</span><br><span class="line">        a += b;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.  编译错误, 没有做强转</span><br><span class="line"></span><br><span class="line">B.  <span class="number">22.3</span></span><br><span class="line"></span><br><span class="line">C.  <span class="number">22</span></span><br><span class="line"></span><br><span class="line">D.  <span class="number">22.0</span></span><br></pre></td></tr></table></figure><h4 id="题目11-单选">题目11(单选):</h4><p><strong>下列代码的运行结果是(  B )</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> a++ &gt; <span class="number">3</span> &amp;&amp; --b &lt; <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A.  <span class="number">1</span>  <span class="number">2</span>  <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">B.  <span class="number">2</span>  <span class="number">2</span>  <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">C.  <span class="number">1</span>  <span class="number">2</span>  <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">D.  <span class="number">2</span>  <span class="number">2</span>  <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="题目12-多选">题目12(多选):</h4><p><strong>下列对于逻辑赋值运算符特点描述正确的是( ABCD )</strong></p><pre><code>A.  &amp;符号遇false则falseB.  |符号遇true则trueC.  &amp;&amp; 具有短路效果, 左边为false, 右边不执行D.  || 具有短路效果, 左边为true, 右边不执行</code></pre><h3 id="代码题">代码题</h3><h4 id="题目1（训练）">题目1（训练）</h4><p>请编写程序，分别定义8种基本数据类型的变量，并打印变量的值。</p><p><strong>训练目标</strong></p><p>java中的八种基本基本数据类型和变量的定义</p><p><strong>训练提示</strong></p><p>1、java中的8种基本数据类型都有什么？</p><p>2、定义变量的格式是什么？</p><p>3、变量名该怎样定义？</p><p>4、该怎样使用变量？</p><p><strong>参考方案</strong></p><p>定义变量，并输出变量的值。</p><p><strong>训练步骤</strong></p><p>1、创建java文件，定义类Test03，编写主方法。</p><p>2、在java语言中，定义变量必须明确变量的数据类型。八种基本数据类型包括byte、short、int、long、float、double、char、boolean。</p><p>3、定义变量的格式是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = 初始化值; <span class="comment">// 声明变量并赋值</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">数据类型 变量名; <span class="comment">// 先声明</span></span><br><span class="line">变量名 = 初始化值; <span class="comment">// 再赋值</span></span><br></pre></td></tr></table></figure><p>4、可以包含英文字母、数字字符、英文下划线（_）和英文美元符（$），并且不能以数字开头。在开发中，java变量的命名又最好符合“小驼峰”式的惯例规范，并且最好做到见名知意。</p><p>5、在输出语句中，直接调用变量名即可。</p><p>6、编译并运行代码，查看输出结果</p><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义byte类型变量，值为整数，只要在byte范围即可，byte范围：-128 ~ 127</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        System.out.println(b);</span><br><span class="line"><span class="comment">// 定义short类型变量，值为整数，只要在short范围即可</span></span><br><span class="line">        <span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">12345</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 整数的默认类型就是int类型</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">654321</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义long类型的整数，需要在数据的后面加字母（L），大小写不限，建议大写。</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">123456789L</span>;</span><br><span class="line">        System.out.println(lo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义float类型的浮点数，需要在数据的后面加字母（F），大小写不限，建议大写。</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">1.5F</span>;</span><br><span class="line">        System.out.println(f);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 浮点型默认类型double</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">123.456</span>;</span><br><span class="line">        System.out.println(d);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 布尔型只有两个取值：true和false</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        System.out.println(b1);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义字符型需要一对英文的单引号包裹，并且只能包含一个字符</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目2（应用）">题目2（应用）</h4><p>请根据下列描述，选用合适的数据类型定义变量，并输出变量的值。</p><p>1、班级里有100个学员。</p><p>2、某商品价格55.55元。</p><p>3、地球已经诞生超过46亿年。</p><p>4、“5是偶数”这句话的描述是假的。</p><p>输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">55.55</span></span><br><span class="line"><span class="number">4600000000</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="题目2-1">题目2.1</h4><p><strong>训练目标</strong></p><p>变量的定义</p><p><strong>训练提示</strong></p><p>1、不同的数据信息需要使用不同的数据类型，可以根据不同数据类型的大小以及特点选择合适的类型来定义变量，描述事物的信息。</p><p><strong>参考方案</strong></p><p>定义变量描述信息。</p><p><strong>训练步骤</strong></p><p>1、创建java文件，定义类Test04，编写主方法。</p><p>2、在主方法中定义不同的变量描述题目中的信息。</p><pre><code>2.1、学员数量，可以用默认的整数类型int表示2.2、商品价格，使用默认的浮点数类型double表示2.3、天文数字，可以使用长整型long表示2.4、一个描述真或者假，只有两种状态，可以使用boolean类型</code></pre><p>3、使用输出语句，输出变量。</p><p>4、编译并运行，查看输出结果。</p><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">studentNumber</span> <span class="operator">=</span> <span class="number">100</span>; <span class="comment">// 学生数量</span></span><br><span class="line">        System.out.println(studentNumber);</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">55.55</span>; <span class="comment">// 商品价格</span></span><br><span class="line">        System.out.println(price);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">yearNumber</span> <span class="operator">=</span> <span class="number">4600000000L</span>; <span class="comment">// 超出int范围的整数</span></span><br><span class="line">        System.out.println(yearNumber);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// 真假值</span></span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目3（错误查找）">题目3（错误查找）</h4><p>在主方法中有如下代码片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 片段1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#123;</span><br><span class="line">    a = <span class="number">20</span>;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 片段2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">b = <span class="number">30</span>;</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure><p>请分析其中会出现错误的代码，描述错误原因，并进行修正。将修正后的代码写入Test05.java文件中，查看运行结果。</p><h4 id="题目3-1">题目3.1</h4><p><strong>训练目标</strong></p><p>变量的有效作用域</p><p><strong>训练提示</strong></p><p>1、变量的有效范围只在直接包裹该变量的一对花括号{}里有效。</p><p><strong>训练步骤</strong></p><p>1、片段1中变量a在main方法的大括号下定义，所以在整个main方法中（包括内层的大括号内）都可以使用，没有问题。</p><p>2、片段2中变量b在第一次输出时没有问题，没有超出其有效作用域；而在改变其值的时候，已经超出了b的有效范围，不可以再使用变量b。可以重新定义变量解决。</p><p>3、创建java文件，定义类Test05，编写主方法。在主方法中将修改后的代码写入，编译运行查看效果。</p><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 片段1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        &#123;</span><br><span class="line">            a = <span class="number">20</span>;</span><br><span class="line">            System.out.println(a); <span class="comment">// 正常输出20，没有错误</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 片段2</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">            System.out.println(b); <span class="comment">// 正常输出20，没有错误</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// b = 30; // 此处报错，b已经超出其有效范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">30</span>; <span class="comment">// 需要再重新声明int类型的变量b</span></span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目4（应用）">题目4（应用）</h4><p>在java中，算术运算符加号“+”，也可以作为字符串的连接符。它可以将多个字符串连接在一起，组成一个新的字符串，也可以将其他数据类型与字符串连接在一起，组成一个新的字符串。请阅读如下解释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我们输出HelloWorld时，输出语句为：</span></span><br><span class="line"><span class="comment">System.out.println(&quot;HelloWorld&quot;);</span></span><br><span class="line"><span class="comment">其实，这个输出语句就是输出了一个字符串，这个字符串也可以由两个或者多个字符串组成。例如：</span></span><br><span class="line"><span class="comment">System.out.println(&quot;Hello&quot; + &quot;World&quot;);</span></span><br><span class="line"><span class="comment">这里，两个字符串会先拼接为一个，再输出，结果与上面一致。再比如：</span></span><br><span class="line"><span class="comment">int age = 20;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;我的年龄是&quot; + age); </span></span><br><span class="line"><span class="comment">上面输出语句中，将int类型的变量与字符串连接在一起，组成一个新的字符串，程序的输出结果是：</span></span><br><span class="line"><span class="comment">我的年龄是20</span></span><br><span class="line"><span class="comment">而且，还可以多个数据与字符串连接，例如：</span></span><br><span class="line"><span class="comment">int height = 180;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;我的年龄是&quot; + age + &quot;，我的身高是&quot; + height); </span></span><br><span class="line"><span class="comment">这个语句中，两个字符串与两个变量会拼成一个字符串输出，输出结果为：</span></span><br><span class="line"><span class="comment">我的年龄是20，我的身高是180</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>根据以上描述，请编写程序，定义两个整数（int类型）变量，并求这两个整数的和，将结果输出到屏幕上。输出格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> + <span class="number">20</span> = <span class="number">30</span></span><br></pre></td></tr></table></figure><h4 id="题目4-1">题目4.1</h4><p><strong>训练目标</strong></p><p>变量的定义和使用、字符串连接符。</p><p><strong>训练提示</strong></p><p>1、求两个整数的和，需要定义变量存储两个整数。</p><p>2、将两个变量相加求和即可得到结果，但需要按照题目要求的格式进行输出，该怎么办呢？根据题目描述，可以将其拼接成一个字符串。</p><p><strong>训练步骤</strong></p><p>1、创建java文件，定义类Test06，编写主方法。</p><p>2、在主方法中，定义两个int类型的变量。</p><p>3、定义第三个变量，将前两个变量相加，赋值给第三个变量。</p><p>4、拼成题目要求的格式，输出结果。根据题目描述，假如定义了num1、num2两个变量值分别为10、20，那么输出10 + 20这个式子，应写为：<code>num1 + &quot; + &quot; + num2</code>，其中num1、num2为两个变量，而中间的&quot; + &quot;为字符串格式。</p><p>5、保存文件，编译运行，查看结果。</p><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 定义整数变量a</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>; <span class="comment">// 定义整数变量b</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b; <span class="comment">// 定义整数变量c，将a + b的结果赋值给c</span></span><br><span class="line">        System.out.println(a + <span class="string">&quot; + &quot;</span> + b + <span class="string">&quot; = &quot;</span> + c); <span class="comment">// 在输出语句中将变量与字符串拼接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目5-训练">题目5(训练)</h4><p>身高是具有遗传性的，子女的身高和父母的身高有一定的关系。假定，父母和子女的身高遗传关系如下：</p><pre><code>儿子身高（厘米）＝(父亲身高＋母亲身高) ×1.08÷2女儿身高（厘米）＝(父亲身高×0.923＋母亲身高) ÷2</code></pre><p>现有父亲身高177CM,母亲身高165CM。求子女身高分别预计为多少？</p><p><strong>训练提示</strong></p><ol><li>已知的父母身高如何用代码体现？</li><li>题目中的公式如何转化为代码？</li></ol><p><strong>解题方案</strong></p><ol><li>使用变量的定义和算术运算符完成本题</li></ol><p><strong>操作步骤</strong></p><ol><li>定义小数变量代表父亲身高</li><li>定义小数变量代表母亲身高</li><li>通过儿子身高计算方式计算儿子身高</li><li>通过女儿身高计算方式计算女人身高</li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义父亲身高</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">father</span> <span class="operator">=</span> <span class="number">177</span>;</span><br><span class="line">        <span class="comment">//2.定义母亲身高</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">mother</span> <span class="operator">=</span> <span class="number">165</span>;</span><br><span class="line">        <span class="comment">//3.利用公式计算儿子身高</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">son</span> <span class="operator">=</span> (father + mother) * <span class="number">1.08</span> / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//4.利用公式计算女儿身高</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">daughter</span> <span class="operator">=</span> (father * <span class="number">0.923</span> + mother) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">//5.打印结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;儿子预计身高&quot;</span> + son + <span class="string">&quot;厘米&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;女儿预计身高&quot;</span> + daughter + <span class="string">&quot;厘米&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目6（训练）">题目6（训练）</h4><p>红茶妹妹有21元钱，她攒了几天钱之后自己的钱比原来的两倍还多三块。绿茶妹妹有24元钱，她攒了几天钱之后自己的钱正好是原来的两倍。那么红茶和绿茶现在的钱一样多，请问对么？</p><p><strong>训练提示</strong></p><ol><li>用什么知识点来计算她们现在的钱有多少？</li><li>如何对比两个人的钱数？</li></ol><p><strong>解题方案</strong></p><ol><li>使用赋值运算符和算术运算符计算各自的钱，使用比较运算符对比大小</li></ol><p><strong>操作步骤</strong></p><ol><li>定义红茶妹妹原来的钱为整数变量</li><li>定义绿茶妹妹原来的钱为整数变量</li><li>使用赋值运算符和算术运算符计算其现有的钱</li><li>使用比较运算符对数值做出比较</li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义红茶妹妹原来的钱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">red</span> <span class="operator">=</span> <span class="number">21</span>;</span><br><span class="line">        <span class="comment">//2.定义绿茶妹妹原来的钱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">green</span> <span class="operator">=</span> <span class="number">24</span>;</span><br><span class="line">        <span class="comment">//3.求红茶妹妹现有的钱</span></span><br><span class="line">        red = red * <span class="number">2</span> + <span class="number">3</span>;</span><br><span class="line">        <span class="comment">//4.求绿茶妹妹现有的钱</span></span><br><span class="line">        green *= <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//5.判断并输出两个人的钱是否相等</span></span><br><span class="line">        System.out.println(red == green);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目7">题目7</h4><p>某小伙想定一份外卖，商家的优惠方式如下：鱼香肉丝单点24元，油炸花生米单点8元，米饭单点3元。订单满30元8折优惠。鱼香肉丝优惠价16元，但是优惠价和折扣不能同时使用。那么这个小伙要点这三样东西，最少要花多少钱？</p><p><strong>训练提示</strong></p><ol><li>有两种购买方式，一种是不使用优惠价，另一种是使用优惠价。分别计算花费后，对两种方式的花费作对比。</li></ol><p><strong>解题方案</strong></p><ol><li>使用算术运算符、赋值运算符和三元运算符联合完成本题</li></ol><p><strong>操作步骤</strong></p><ol><li>使用算术运算符求出不使用优惠时的总价</li><li>使用三元运算符判断总价是否满足打折条件，并求出折后总价</li><li>使用算术运算符求出使用优惠价时的总价</li><li>使用三元运算符判断最终更合算的购买方式和花费</li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.求不使用优惠时的总价</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">money1</span> <span class="operator">=</span> <span class="number">24</span> + <span class="number">8</span> + <span class="number">3</span>;</span><br><span class="line">        <span class="comment">//2.判断折后总价</span></span><br><span class="line">        money1 = (money1 &gt;= <span class="number">30</span> ? money1 * <span class="number">0.8</span> : money1);</span><br><span class="line">        <span class="comment">//3.求使用优惠时的总价</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">money2</span> <span class="operator">=</span> <span class="number">16</span> + <span class="number">8</span> + <span class="number">3</span>;</span><br><span class="line">        <span class="comment">//4.判断两种花费哪个更少</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> money1 &lt; money2 ? money1 : money2;</span><br><span class="line">        <span class="comment">//5.打印最终花费</span></span><br><span class="line">        System.out.println(money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目8：">题目8：</h4><p>键盘录入三个数字，求三个数字的和，以及平均数</p><p>答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个整数&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number1</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二个整数&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number2</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第三个整数&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number3</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> number1 + number2 + number3;</span><br><span class="line">        System.out.println(<span class="string">&quot;和为：&quot;</span> + sum);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//类型可以用int，也可以用double</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">avg</span> <span class="operator">=</span> sum / <span class="number">3</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;平均数为：&quot;</span> + avg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目9">题目9</h4><p><strong>需求</strong>：</p><pre><code>键盘录入一个三位数，求这个三位数每一位的数字和。</code></pre><p><strong>举例</strong>：</p><pre><code>键盘录入123。那么每一位数字相加为：1 + 2 + 3，和为：6。</code></pre><p><strong>答案</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个三位数&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> number% <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> number / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> number / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> ge + shi + bai;</span><br><span class="line">        System.out.println(<span class="string">&quot;三位数&quot;</span> + number + <span class="string">&quot;每一位的数字和为：&quot;</span> +sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day03">day03</h2><h3 id="选择题">选择题</h3><h4 id="题目1-多选">题目1(多选)</h4><p><strong>下列关于if语句的描述, 说法正确的是( BC ):</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A.  <span class="keyword">if</span> 语句的 () 和 &#123;&#125; 之间可以编写分号,  对程序没有任何影响</span><br><span class="line">B.  <span class="keyword">if</span> 语句的 &#123;&#125; 中如果只有一条语句, &#123;&#125; 可以省略不写</span><br><span class="line">C.  <span class="keyword">if</span> 语句的 () 中, 最终产生的是一个<span class="type">boolean</span>类型结果, 根据这个结果决定程序的走向</span><br><span class="line">D.  <span class="keyword">if</span> 语句的 &#123;&#125; 无论何时都不能省略</span><br></pre></td></tr></table></figure><h4 id="题目2-单选">题目2(单选):</h4><p><strong>下列代码的运行结果是(  B )</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">            c = <span class="number">10</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a &lt; b)&#123;</span><br><span class="line">            c = <span class="number">20</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A.  编译错误, 缺少最后的<span class="keyword">else</span>代码块</span><br><span class="line"></span><br><span class="line">B.  <span class="number">0</span></span><br><span class="line"></span><br><span class="line">C. <span class="number">10</span></span><br><span class="line"></span><br><span class="line">D. <span class="number">20</span></span><br></pre></td></tr></table></figure><h4 id="题目3-单选">题目3(单选):</h4><p><strong>键盘录入数据为200,  下列代码的运行结果是( C )</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入成绩:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">0</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (score &gt;= <span class="number">95</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;山地自行车一辆&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">94</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;游乐场玩一次&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span> &amp;&amp; score &lt;= <span class="number">89</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;变形金刚玩具一个&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;挨顿揍&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A. 编译错误</span><br><span class="line"></span><br><span class="line">B. 挨顿揍</span><br><span class="line"></span><br><span class="line">C. 程序正常运行, 但是没有任何结果输出</span><br><span class="line"></span><br><span class="line">D. 以上说法都不对</span><br></pre></td></tr></table></figure><h3 id="代码题-2">代码题</h3><h4 id="题目1">题目1</h4><p>模拟计算器功能，对键盘录入的两个int类型的数据进行加、减、乘、除的运算，并打印运算结果。</p><p>要求：</p><pre><code>键盘录入三个整数,其中前两个整数代表参加运算的数据，第三个整数为要进行的运算(1:表示加法运算,2:表示减法运算,3:表示乘法运算,4:表示除法运算)，演示效果如下:请输入第一个整数: 30请输入第二个整数: 40请输入您要进行的运算(1:表示加法,2:表示减法,3:表示乘法,4:表示除法): 1控制台输出:30+40=70</code></pre><p><strong>训练提示</strong></p><ol><li>用户录入了数据之后，用什么知识点去判断加减乘除四种不同的操作？</li></ol><p><strong>解题方案</strong></p><ol><li>使用switch判断语句完成。</li></ol><p><strong>操作步骤</strong></p><ol><li>使用键盘录入三个变量。</li><li>使用switch判断语句对第三个变量进行判断，匹配要执行的操作。</li><li>在每一个case中分别对第一个变量和第二个变量进行不同的操作。</li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 2.创建键盘录入对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 3.提示需要输入的数据，并调用方法获取输入的数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个整数：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二个整数：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入您要进行的运算(1:表示加法,2:表示减法,3:表示乘法,4:表示除法)&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="comment">// 4.使用switch语句判断计算类型，并输出相应的结果</span></span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(num1 + <span class="string">&quot; + &quot;</span> + num2 + <span class="string">&quot; = &quot;</span> + (num1 + num2));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(num1 + <span class="string">&quot; - &quot;</span> + num2 + <span class="string">&quot; = &quot;</span> + (num1 - num2));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(num1 + <span class="string">&quot; * &quot;</span> + num2 + <span class="string">&quot; = &quot;</span> + (num1 * num2));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                System.out.println(num1 + <span class="string">&quot; / &quot;</span> + num2 + <span class="string">&quot; = &quot;</span> + (num1 * <span class="number">1.0</span> / num2));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;您输入的运算类别有误&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目2（训练）">题目2（训练）</h4><p>李雷想买一个价值7988元的新手机，她的旧手机在二手市场能卖1500元，而手机专卖店推出以旧换新的优惠，把她的旧手机交给店家，新手机就能够打8折优惠。为了更省钱，李雷要不要以旧换新？请在控制台输出。</p><p><strong>训练提示</strong></p><ol><li>用什么知识点能够对不同购买方式的价格做判断？</li></ol><p><strong>解题方案</strong></p><ol><li>使用if…else语句判断</li></ol><p><strong>操作步骤</strong></p><ol><li>计算不使用以旧换新时的花费。</li><li>计算使用以旧换新时的花费。</li><li>使用if…else语句判断哪种方式更省钱，并输出结果</li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.计算不使用以旧换新的花费</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">money1</span> <span class="operator">=</span> <span class="number">7988</span> - <span class="number">1500</span>;</span><br><span class="line">        <span class="comment">//2.计算以旧换新的花费</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">money2</span> <span class="operator">=</span> <span class="number">7988</span> * <span class="number">0.8</span>;</span><br><span class="line">        <span class="comment">//3.判断两种方式</span></span><br><span class="line">        <span class="keyword">if</span>(money1 &gt; money2)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;使用以旧换新更省钱&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不使用以旧换新更省钱&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目3（训练）">题目3（训练）</h4><p>让用户依次录入三个整数，求出三个数中的最小值，并打印到控制台。</p><p><strong>训练提示</strong></p><ol><li>如何完成用户录入？</li><li>求最小值需要用到什么知识点？</li></ol><p><strong>解题方案</strong></p><ol><li><p>使用Scanner完成键盘录入，使用if…else的嵌套完全判断</p></li><li><p>使用Scanner完成键盘录入，使用多条件的if…else完成判断</p><p>以下解题以方案2为准</p></li></ol><p><strong>操作步骤</strong></p><ol><li>使用三次键盘录入的方法让用户输入三个整数</li><li>使用多条件的if…else判断三个数大小关系的各种情况求出最小值</li><li>打印输出最小值</li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//2.创建键盘录入对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//3.分别录入三个数字</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个整数：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二个整数：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第三个整数：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="comment">//4.定义变量代表最小值</span></span><br><span class="line">        <span class="type">int</span> min;</span><br><span class="line">        <span class="comment">//5.对三个整数进行判断</span></span><br><span class="line">        <span class="keyword">if</span>( i &lt; j &amp;&amp; i &lt; k)&#123;</span><br><span class="line">            min = i;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( j &lt; i &amp;&amp; j &lt; k)&#123;</span><br><span class="line">            min = j;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            min = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.打印最小值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最小值是&quot;</span> + min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####题目4</p><p>某银行推出了整存整取定期储蓄业务，其存期分为一年、两年、三年、五年，到期凭存单支取本息。存款年利率表如下：</p><pre><code>存期年利率（%）一年2.25两年2.7三年3.25五年3.6</code></pre><p>请存入一定金额（1000起存），存一定年限（四选一），计算到期后得到的本息总额。</p><p>提示：</p><pre><code>存入金额和存入年限均由键盘录入本息计算方式：本金+本金×年利率×年限</code></pre><p><strong>训练提示</strong></p><ol><li>使用什么方式让用户输入内容？</li><li>使用哪种if语句的格式对信息作出判断？</li></ol><p><strong>解题方案</strong></p><ol><li>使用Scanner和if…else…的嵌套操作。</li></ol><p><strong>操作步骤</strong></p><ol><li>键盘录入金额和年份。</li><li>使用多条件if…else判断年份，计算本息金额。</li><li>输出结果。</li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 2.创建键盘录入对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 3.调用方法获取键盘录入的本金和存取年限</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入存款金额：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入存款年限：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="comment">// 4.定义本息和的变量</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">outMoney</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 5.根据利率和年限计算本息和</span></span><br><span class="line">        <span class="keyword">if</span> (year == <span class="number">1</span>) &#123;</span><br><span class="line">            outMoney = money + money * <span class="number">2.25</span> / <span class="number">100</span> * <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (year == <span class="number">2</span>) &#123;</span><br><span class="line">            outMoney = money + money * <span class="number">2.7</span> / <span class="number">100</span> * <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (year == <span class="number">3</span>) &#123;</span><br><span class="line">            outMoney = money + money * <span class="number">3.25</span> / <span class="number">100</span> * <span class="number">3</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (year == <span class="number">5</span>) &#123;</span><br><span class="line">            outMoney = money + money * <span class="number">3.6</span> / <span class="number">100</span> * <span class="number">5</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的年限有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.打印输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;存款&quot;</span> + year + <span class="string">&quot;年后的本息是：&quot;</span> + outMoney);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目5（综合扩展）">题目5（综合扩展）</h4><p>某商场购物可以打折，具体规则如下：</p><pre><code>普通顾客购不满100元不打折，满100元打9折；会员购物不满200元打8折，满200元打7.5折；不同打折规则不累加计算。</code></pre><p>请根据此优惠计划进行购物结算，键盘录入顾客的类别（0表示普通顾客，1表示会员）和购物的折前金额（整数即可），输出应付金额（小数类型）。</p><p><strong>训练提示</strong></p><ol><li>使用什么方式让用户输入内容？</li><li>使用哪种if语句的格式对信息作出判断？</li></ol><p><strong>解题方案</strong></p><ol><li>使用Scanner键盘录入和if…else判断语句的嵌套使用来完成。</li></ol><p><strong>操作步骤</strong></p><ol><li>键盘录入会员类别和购物金额。</li><li>先使用if-else判断顾客类别。</li><li>在不同的顾客类别中再使用if-else语句判断购物金额。</li><li>输出结果。</li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 2.创建键盘录入对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 3.调用方法获取键盘录入的顾客类别和购物金额</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入顾客类别（0表示普通顾客，1表示会员顾客）：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入购物金额：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="comment">// 4.先判断顾客类别</span></span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 4.1.普通顾客，再判断购物金额</span></span><br><span class="line">            <span class="keyword">if</span> (money &gt; <span class="number">0</span> &amp;&amp; money &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您的应付金额为：&quot;</span> + money);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (money &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您的应付金额为：&quot;</span> + money * <span class="number">0.9</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您输入的金额有误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 4.2.会员顾客，再判断购物金额</span></span><br><span class="line">            <span class="keyword">if</span> (money &gt; <span class="number">0</span> &amp;&amp; money &lt; <span class="number">200</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您的应付金额为：&quot;</span> + money * <span class="number">0.8</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (money &gt;= <span class="number">200</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您的应付金额为：&quot;</span> + money * <span class="number">0.75</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您输入的金额有误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您输入的顾客类别有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>综合扩展：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">旅游机票价格计算</span><br><span class="line">老王要去旅游,机票的价格受出行的月份影响</span><br><span class="line">旺季<span class="number">4</span>-<span class="number">8</span>月,淡季<span class="number">1</span>-<span class="number">3</span>月和<span class="number">9</span>-<span class="number">12</span>月</span><br><span class="line">假设机票初始价格为<span class="number">5000</span>元</span><br><span class="line">淡季出行,头等舱在原价基础上打<span class="number">7</span>折,经济舱打<span class="number">5</span>折</span><br><span class="line">旺季出行,头等舱在原价基础上打<span class="number">9</span>折,经济舱打<span class="number">8</span>折</span><br><span class="line">请根据键盘录入的出行月份及选择的仓位(<span class="number">0</span>表示头等舱<span class="number">1</span>表示经济舱)</span><br><span class="line">计算并打印最终机票价格</span><br><span class="line">思路:先选择出行的月份,再选择机票</span><br><span class="line">选择出行月份</span><br><span class="line">淡季<span class="number">1</span>-<span class="number">3</span>月和<span class="number">9</span>-<span class="number">12</span>月</span><br><span class="line">头等舱</span><br><span class="line">价格的输出</span><br><span class="line">经济舱</span><br><span class="line">价格输出</span><br><span class="line">不合法</span><br><span class="line">旺季<span class="number">4</span>-<span class="number">8</span>月</span><br><span class="line">头等舱</span><br><span class="line">价格的输出</span><br><span class="line">经济舱</span><br><span class="line">价格输出</span><br><span class="line">不合法</span><br><span class="line">不合法</span><br><span class="line"> 选择出行月份</span><br><span class="line">    <span class="number">1</span>-<span class="number">12</span>月</span><br><span class="line">                            淡季<span class="number">1</span>-<span class="number">3</span>月和<span class="number">9</span>-<span class="number">12</span>月</span><br><span class="line">头等舱</span><br><span class="line">价格的输出</span><br><span class="line">经济舱</span><br><span class="line">价格输出</span><br><span class="line">不合法</span><br><span class="line">旺季<span class="number">4</span>-<span class="number">8</span>月</span><br><span class="line">头等舱</span><br><span class="line">价格的输出</span><br><span class="line">经济舱</span><br><span class="line">价格输出                   </span><br><span class="line">                        不合法</span><br></pre></td></tr></table></figure><h2 id="day04">day04</h2><h3 id="选择题-2">选择题</h3><h4 id="题目1-单选">题目1(单选):</h4><p>下列代码的运行结果是( A )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i&lt;=<span class="number">5</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                    sum += i;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;sum = &quot;</span> + sum);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">A. sum = <span class="number">9</span> </span><br><span class="line"></span><br><span class="line">B. sum = <span class="number">6</span> </span><br><span class="line"></span><br><span class="line">C. sum = <span class="number">15</span> </span><br><span class="line"></span><br><span class="line">D. sum = <span class="number">0</span> </span><br></pre></td></tr></table></figure><hr><h4 id="题目2-单选-2">题目2(单选):</h4><p>以下代码片段执行后,控制台的输出结果为( A )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">3</span>)&#123;</span><br><span class="line">        sum+=i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(<span class="string">&quot;sum=&quot;</span>+sum);</span><br><span class="line">&#125;</span><br><span class="line">A. sum=<span class="number">3</span> </span><br><span class="line"></span><br><span class="line">B. sum=<span class="number">0</span>  </span><br><span class="line"></span><br><span class="line">C. sum=<span class="number">6</span>  </span><br><span class="line"></span><br><span class="line">D. sum=<span class="number">1</span> </span><br></pre></td></tr></table></figure><hr><h4 id="题目3-单选-2">题目3(单选):</h4><p>下列代码的运行结果是( B )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">           <span class="keyword">if</span> (i % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">               sum += i;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sum = &quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A. sum = <span class="number">45</span> </span><br><span class="line"></span><br><span class="line">B. sum = <span class="number">27</span> </span><br><span class="line"></span><br><span class="line">C. sum = <span class="number">18</span> </span><br><span class="line"></span><br><span class="line">D. sum = <span class="number">55</span> </span><br></pre></td></tr></table></figure><hr><h4 id="题目4-单选">题目4(单选):</h4><p>阅读代码,下面那些代码片段能够求1~10(包含1也包含10)之间偶数的和( A )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">A.</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">B.</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line">    sum+=i;</span><br><span class="line">&#125;</span><br><span class="line">C.</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">        sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">D.</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line">    sum+=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目5-单选">题目5(单选):</h4><p>关于for循环语句说法错误的是(<font size=3 color=red><strong>A</strong></font>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句; 循环判断表达式; 步进语句) &#123;</span><br><span class="line">    ①<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    ②循环体;</span><br><span class="line">&#125;</span><br><span class="line">A. 因为初始化语句在循环中只执行一次,所以循环过程中, 无法使用初始化语句中定义的变量.</span><br><span class="line">B. 循环判断表达式的执行次数,会比循环体的执行次数多一次. </span><br><span class="line">C. ①处定义的变量a,每一次进入循环,都会重新定义一个新的变量. </span><br><span class="line">D. 循环体是否执行,需要根据[循环判断表达式]返回的<span class="literal">true</span>或<span class="literal">false</span>而定. </span><br></pre></td></tr></table></figure><h4 id="题目6-单选-2">题目6(单选):</h4><p>下列代码的运行结果是( D )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i == <span class="number">10</span>)&#123;</span><br><span class="line">++i;</span><br><span class="line">System.out.println(<span class="string">&quot;执行循环啦&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">A.语法错误. </span><br><span class="line"></span><br><span class="line">B.打印<span class="number">9</span>次执行循环啦. </span><br><span class="line"></span><br><span class="line">C.打印<span class="number">10</span>次执行循环啦. </span><br><span class="line"></span><br><span class="line">D.没有输出结果</span><br></pre></td></tr></table></figure><h4 id="题目7-单选-2">题目7(单选) :</h4><p>下列代码的运行结果是( A )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>( i &lt; <span class="number">7</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">   System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line">A<span class="number">.2</span></span><br><span class="line"></span><br><span class="line">B<span class="number">.3</span></span><br><span class="line"></span><br><span class="line">C<span class="number">.4</span></span><br><span class="line"></span><br><span class="line">D<span class="number">.5</span></span><br></pre></td></tr></table></figure><h4 id="题目8-单选-2">题目8(单选):</h4><p>下面有关do…while循环的执行流程,那些描述是正确的( B )</p><p>​<a href="http://A.do">A.do</a>…while循环在循环条件成立的情况下,循环语句体才能被执行.</p><p>​<a href="http://B.do">B.do</a>…while循环的循环条件即使不成立,循环语句体也能被执行1次.</p><p>​<a href="http://C.do">C.do</a>…while循环的循环语句体只能被执行一次.</p><p>​<a href="http://D.do">D.do</a>…while是先判断循环条件是否成立,再执行循环语句体.</p><hr><h4 id="题目9-单选-2">题目9(单选):</h4><p>不能构成循环的语句是(  C )</p><ul><li>[ ] A： for 语句</li><li>[ ] B： while 语句</li><li>[x] C： switch 语句</li><li>[ ] D： do while 语句</li></ul><h4 id="题目10-单选-2">题目10(单选):</h4><p>以下选项中随机数范围为16到50（包含16和50）的是（B）</p><p>A： Random random=new Random();<br>int num=random.nextInt(16)+50;</p><p>B： Random random=new Random();<br>int num=random.nextInt(35)+16;</p><p>C： Random random=new Random();<br>int num=random.nextInt(36)+15</p><p>D： Random random=new Random();<br>int num=random.nextInt(36)+16</p><h3 id="代码题-3">代码题</h3><h4 id="题目9-2">题目9:</h4><p>在中国历法中有十二生肖年份,2019年是己亥猪年,请在控制台输出从1949年(包含)到2019年(包含)中所有是猪年的年份。</p><p><strong>参考步骤</strong>:</p><ol><li>定义for循环,1949到2019的年份是循环次数.</li><li>对每个年份逐个判断,如果年份和2019的差值是12的倍数,说明这年是猪年.</li><li>打印符合条件的年份.</li></ol><p><strong>参考答案</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.循环开始是1949 结束是2019</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1949</span>; i &lt;= <span class="number">2019</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//2.如果年份和2019年的差值是12的倍数 则说明是猪年</span></span><br><span class="line">            <span class="keyword">if</span>( (<span class="number">2019</span> - i) % <span class="number">12</span> == <span class="number">0</span> )&#123;</span><br><span class="line">                <span class="comment">//3.打印符合条件的年份</span></span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目10">题目10:</h4><p>中国使用的公历有闰年的说法,闰年的规则是:四年一闰,百年不闰,四百年再闰。(年份能够被4整除但不能被100整除算是闰年,年份能被400整除也是闰年).请打印出1988年到2019年的所有闰年年份。</p><p><strong>参考步骤</strong>:</p><ol><li>定义for循环,循环变量开始是1988,结束是2019.</li><li>在循环中对年份进行判断,判读条件为:可以被4整除,并且不可以被100整除,或者可以被400整除.</li><li>如果符合条件,输出该年份.</li></ol><p><strong>参考答案</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 定义对年份的循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> <span class="number">1988</span>; year &lt;= <span class="number">2019</span>; year++) &#123;</span><br><span class="line">            <span class="comment">//2. 判断当年是否符合闰年条件</span></span><br><span class="line">            <span class="keyword">if</span>((year%<span class="number">4</span> == <span class="number">0</span> &amp;&amp; year%<span class="number">100</span> != <span class="number">0</span>) || year%<span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(year + <span class="string">&quot;是闰年&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目11：">题目11：</h4><p>利用while循环提示用户输入5次数字，如果用户输入的数字是偶数则跳出循环，否则一直提示，直到输入5次为止。</p><p><strong>参考步骤</strong>：</p><ol><li>创建键盘录入对象</li><li>定义计数器变量count，记录输入的次数</li><li>定义while循环，循环的条件是输入的次数不大于5</li><li>键盘录入一个整数</li><li>通过if判断录入的整数是否是偶数，是偶数跳出循环</li><li>不是偶数，计数器加1</li></ol><p><strong>参考答案</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (count &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入第&quot;</span> + count + <span class="string">&quot;个数字&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入的是偶数，跳出循环&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day05">day05</h2><h3 id="选择题-3">选择题</h3><h4 id="题目1-单选-2">题目1(单选):</h4><p><strong>下面哪个可以正确的获取数组a的第三个元素( D )</strong></p><p>​A、a(3)         <br>​B、a[3]    <br>​C、a(2)         <br>​D、a[2]</p><hr><h4 id="题目2-单选-3">题目2(单选):</h4><p><strong>下面哪个选项可以正确的创建出字符数组( C )</strong></p><p>​A. char[] str=“hello”;</p><p>​B. char[5] str=“hello”;</p><p>​C. char[] str={‘h’,‘e’,‘l’,‘l’,‘o’};</p><p>​D. char[] str={“hello”};</p><hr><h4 id="题目3-单选-3">题目3(单选):</h4><p><strong>我们使用关键字new创建出来的数组会保存到内存的哪个位置( C )</strong></p><p>​A、栈<br>​B、队列<br>​C、堆<br>​D、CPU</p><hr><h4 id="题目4-单选-2">题目4(单选):</h4><p>关于数组默认值，错误的是（ B ）</p><p>​A、double --0.0</p><p>​B、boolean–true</p><p>​C、String – null</p><p>​D、int–0</p><hr><h4 id="题目5-单选-2">题目5(单选):</h4><p>下面代码中，如果想要在控制台显示 6 ，那么下列横线处的正确书写内容应该是（ C）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123; <span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span> &#125;;</span><br><span class="line">    System.out.println(____________);</span><br><span class="line">&#125;</span><br><span class="line">A: arr[<span class="number">6</span>]</span><br><span class="line">B: arr[<span class="number">2</span>]</span><br><span class="line">C: arr[<span class="number">1</span>]</span><br><span class="line">D: arr[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="题目6-单选-3">题目6(单选):</h4><p>下列代码的运行结果是（ D ）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    System.out.println(<span class="string">&quot;结果是：&quot;</span>+arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(<span class="string">&quot;结果是：&quot;</span>+arr[arr.length-<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">A:  结果是：<span class="number">1</span></span><br><span class="line">结果是：<span class="number">9</span> </span><br><span class="line">B:  结果是：<span class="number">1</span></span><br><span class="line">结果是：<span class="number">7</span> </span><br><span class="line">C:  结果是：<span class="number">3</span></span><br><span class="line">结果是：<span class="number">7</span> </span><br><span class="line">D:  结果是：<span class="number">3</span></span><br><span class="line">结果是：<span class="number">9</span> </span><br></pre></td></tr></table></figure><h4 id="题目7-单选-3">题目7(单选):</h4><p>下面代码执行之后，控制台显示的结果是（ D ）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">    System.out.println(arr[<span class="number">5</span>]);</span><br><span class="line">&#125;</span><br><span class="line">A:  <span class="number">0</span></span><br><span class="line">B:  控制台没有任何显示</span><br><span class="line">C:  NullPointerException</span><br><span class="line">D:  ArrayIndexOutOfBoundsException</span><br></pre></td></tr></table></figure><h4 id="题目8-单选-3">题目8(单选):</h4><p>下列哪些代码能够正常执行（ D ）</p><p><strong><u>选项 :c选项：java: 不兼容的类型: int无法转换为int[]</u></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">A：</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr[<span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">B：</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">C：</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        arr = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   #java: 不兼容的类型: <span class="type">int</span>无法转换为<span class="type">int</span>[]</span><br><span class="line">D：</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><hr><h4 id="题目9-单选-3">题目9(单选):</h4><p>下面是遍历输出数组每个元素的代码，请在代码区域当中（1）和（2）位置，补上正确的代码（ C）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123; <span class="number">2</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; ____(<span class="number">1</span>)____ ; i++ )&#123;</span><br><span class="line">        System.out.println(____(<span class="number">2</span>)____);`</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A:</span><br><span class="line">(<span class="number">1</span>)i&lt;arr.length-<span class="number">1</span></span><br><span class="line">(<span class="number">2</span>)arr[i]</span><br><span class="line">B:</span><br><span class="line">(<span class="number">1</span>)i&lt;=arr.length-<span class="number">1</span></span><br><span class="line">(<span class="number">2</span>)arr </span><br><span class="line">C:</span><br><span class="line">(<span class="number">1</span>)i&lt;=arr.length-<span class="number">1</span></span><br><span class="line">(<span class="number">2</span>)arr[i] </span><br><span class="line">D:</span><br><span class="line">(<span class="number">1</span>)i&lt;arr.length-<span class="number">1</span></span><br><span class="line">(<span class="number">2</span>)arr</span><br></pre></td></tr></table></figure><h4 id="题目10-单选-3">题目10(单选):</h4><p>下列代码用于获取数组中元素的最大值，横线处应该填写的正确代码是（ C ）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123; -<span class="number">9</span>, -<span class="number">5</span>, -<span class="number">2</span>, -<span class="number">7</span> &#125;;</span><br><span class="line">    ________①_______</span><br><span class="line">    <span class="title function_">for</span><span class="params">(<span class="type">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_____②_____)&#123;</span><br><span class="line">           _____③_____</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;最大值是:&quot;</span> + max);</span><br><span class="line">&#125;</span><br><span class="line">A．</span><br><span class="line">①<span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">②arr[i] &lt; max</span><br><span class="line">③arr[i] = max;</span><br><span class="line">B．</span><br><span class="line">①<span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">②arr[i] &gt; max</span><br><span class="line">③max = arr[i];</span><br><span class="line">C．</span><br><span class="line">①<span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">②arr[i] &gt; max</span><br><span class="line">③max = arr[i]; </span><br><span class="line">D．</span><br><span class="line">①<span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[i];</span><br><span class="line">②arr[i] &gt; max</span><br><span class="line">③max = arr[i]; </span><br></pre></td></tr></table></figure><h4 id="题目11-单选-2">题目11(单选):</h4><p>==下列代码的运行结果是（ B ）==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123; <span class="number">9</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span> &#125;;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>( i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">            arr[i]+=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.print(arr[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A:  <span class="number">9</span>  <span class="number">5</span>  <span class="number">2</span>  <span class="number">7</span> </span><br><span class="line">B:  <span class="number">9</span>  <span class="number">15</span>  <span class="number">2</span>  <span class="number">17</span> </span><br><span class="line">C:  <span class="number">9</span>  <span class="number">5</span>  <span class="number">12</span>  <span class="number">7</span> </span><br><span class="line">D:  <span class="number">19</span>  <span class="number">15</span>  <span class="number">12</span>  <span class="number">17</span> </span><br></pre></td></tr></table></figure><h3 id="代码题-4">代码题</h3><h4 id="题目1（加强训练）">题目1（加强训练）</h4><ul><li><p>需求：定义一个长度为5的一维数组，给每个元素赋值. (要求数组中每个元素的值是20-80的随机数)</p><p>遍历数组打印每个元素的值</p></li></ul><p><strong>控制台输出效果:</strong></p><blockquote><p>本题打印结果具有随机性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">随机数为:</span><br><span class="line"><span class="number">72</span></span><br><span class="line"><span class="number">52</span></span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="number">51</span></span><br><span class="line"><span class="number">78</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="题目1-1">题目1.1</h4><p><strong>训练目标</strong></p><ol><li>能够熟练使用数组动态初始化</li><li>能够熟练掌握数组的遍历</li></ol><p><strong>训练提示</strong></p><ul><li>随机数的 nextInt() 方法，( ) 里面无论写什么，都有0的可能性，题目要求最小的随机数是20，就应该在结果上加20.</li></ul><p><strong>操作步骤</strong></p><ol><li>准备Random</li><li>动态初始化长度为5的一维数组</li><li>遍历数组, 在遍历的过程中产生随机数并存入数组</li><li>遍历打印数组</li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeWork1</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        需求：定义一个长度为5的一维数组，给每个元素赋值. (要求数组中每个元素的值是20-80的随机数)</span></span><br><span class="line"><span class="comment">            遍历数组打印每个元素的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        分析:</span></span><br><span class="line"><span class="comment">            1. 准备Random</span></span><br><span class="line"><span class="comment">            2. 动态初始化长度为5的一维数组</span></span><br><span class="line"><span class="comment">            3. 遍历数组, 在遍历的过程中产生随机数并存入数组</span></span><br><span class="line"><span class="comment">            4. 遍历打印数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 准备Random</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">// 2. 动态初始化长度为5的一维数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">// 3. 遍历数组, 在遍历的过程中产生随机数并存入数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">randomNum</span> <span class="operator">=</span> r.nextInt(<span class="number">61</span>) + <span class="number">20</span>;</span><br><span class="line">            arr[i] = randomNum;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;随机数为:&quot;</span>);</span><br><span class="line">        <span class="comment">// 4. 遍历打印数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目2（加强训练）">题目2（加强训练）</h4><ul><li>需求：键盘录入一个整数作为数组的长度，随后再次键盘录入数据并将数组存满<ul><li>从数组中找出最小值，并将最小值打印在控制台</li></ul></li></ul><p><strong>训练目标</strong></p><ul><li>能够使用Scanner填充数组</li><li>能够在遍历数组过程中，加入 if 条件筛选</li></ul><p><strong>训练提示</strong></p><ul><li>建议对数组遍历两次，第一次只做数据填充，第二次只找最大值</li></ul><p><strong>操作步骤</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 准备Scanner</span><br><span class="line">2. 键盘录入一个整数, 根据这个整数动态初始化数组长度</span><br><span class="line">3. 遍历数组, 在遍历的过程中录入数据, 并存入数组</span><br><span class="line">4. 求最小值</span><br><span class="line">5. 打印最小值</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeWork2</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        需求：键盘录入一个整数作为数组的长度，随后再次键盘录入数据并将数组存满</span></span><br><span class="line"><span class="comment">            从数组中找出最小值，并将最小值打印在控制台</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 准备Scanner</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//2. 键盘录入一个整数, 根据这个整数动态初始化数组长度</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入数组长度:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        <span class="comment">//3. 遍历数组, 在遍历的过程中录入数据, 并存入数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入元素:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 求最小值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">                min = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 打印最小值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最小值为:&quot;</span> + min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="题目3（综合扩展）">题目3（综合扩展）</h4><p>定义一个数组其中包含多个数字。用自己的方式最终实现，奇数放在数组的左边，偶数放在数组的右边。（可以创建其他数组，不必须在原数组中改变）</p><p><strong>训练提示</strong></p><ol><li>要找奇数和偶数只需要判断对2取余即可。</li><li>找到一个奇数或偶数之后，把它放在哪个索引处？</li></ol><p><strong>解题方案</strong></p><ol><li><p>定义一个新数组。把原数组的奇数放在新数组的左边，把原数组的偶数放在新数组的右边。</p></li><li><p>不定义新数组。找到左边的偶数，和右边的奇数互换位置。</p><p>以下以方案1为准</p></li></ol><p><strong>操作步骤</strong></p><ol><li>定义出原数组arr，其中包含多个数字。</li><li>定义新数组brr，和arr的长度一样。</li><li>定义变量left，初始值是0准备从左边放元素，定义变量right，初始值是arr.length-1准备从右边放元素。</li><li>对原数组arr进行遍历。</li><li>如果元素是奇数，则放在新数组brr的左边，left变量加一。</li><li>如果元素是偶数，则放在新数组brr的右边，right变量减一。</li><li>遍历新数组brr打印最终结果。</li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义原数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">45</span>,<span class="number">67</span>,<span class="number">78</span>,<span class="number">11</span>,<span class="number">22</span>&#125;;</span><br><span class="line">        <span class="comment">//2.定义空数组</span></span><br><span class="line">        <span class="type">int</span>[] brr = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">        <span class="comment">//3.定义变量代表奇数要存放的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//4.定义变量代表偶数要存放的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//5.对原数组进行遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//5.1如果是奇数就往左边放</span></span><br><span class="line">                brr[left] = arr[i];</span><br><span class="line">                <span class="comment">//5.2存放之后让索引向右移动</span></span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//5.3如果是偶数就往右边放</span></span><br><span class="line">                brr[right] = arr[i];</span><br><span class="line">                <span class="comment">//5.4存放之后让索引向左移动</span></span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.打印brr数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; brr.length; i++) &#123;</span><br><span class="line">            System.out.print(brr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>==不定义新数组（不做要求）==：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">45</span>,<span class="number">67</span>,<span class="number">78</span>,<span class="number">11</span>,<span class="number">22</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>,end = arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[start] % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arr[end] % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arr[start] % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; arr[end] % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">                arr[start] = arr[end];</span><br><span class="line">                arr[end] = temp;</span><br><span class="line">                start++;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">正确答案：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework3_1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">45</span>,<span class="number">67</span>,<span class="number">78</span>,<span class="number">11</span>,<span class="number">22</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>,end = arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[start] % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[end] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[start] % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; arr[end] % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">                    arr[start] = arr[end];</span><br><span class="line">                    arr[end] = temp;</span><br><span class="line">                    start++;</span><br><span class="line">                    end--;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="代码题（无答案）">代码题（无答案）</h3><h4 id="题目一">题目一</h4><p>1、将一个给定的整型数组转置输出，在同一个数组中进行<br>例如源数组 1 3  7 5 4   转置之后的数组 4 5 7 3 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///两种方法1.索引值start，end判断start&lt;end?结束运行</span></span><br><span class="line"><span class="comment">//   2.i&lt;arr.length/2结束运行</span></span><br></pre></td></tr></table></figure><h4 id="题目二">题目二</h4><p>2、键盘录入一个数组的长度  数组内容用随机数赋值[30-98]  求里边的偶数的个数以及奇数的和</p><h4 id="题目三">题目三</h4><p>3 、有一组有符号型数，例如:1,5,9,3,-1,-8,-7,-5,-9,-6。 这个序列中那两个相邻数和最大。</p><h4 id="题目四">题目四</h4><p>4、使用数组:</p><ol><li><p>在main方法中创建两个数组 arr1,arr2</p></li><li><p>静态初始化arr1  元素为{2,3,5,6,7,21,33,12}</p></li><li><p>打印arr1数组的内容</p></li><li><p>把arr1赋值给arr2</p></li><li><p>修改arr2中偶索引元素 使用其等于索引值；例如 arr2[0]=0  arr2[2]=2;</p></li><li><p>打印arr1数组内容 。</p></li></ol><h4 id="题目五">题目五</h4><p>5、二维数组（<strong>提高题：不做要求</strong>）</p><p>​高三学年准备进行模拟考试:</p><p>​共有5个班级</p><p>​考试成绩使用随机数生成[0,100],</p><p>​班级人数使用键盘录入(需要判断输入人数不合法的情况)[0,100]</p><p>​要求:建议使用方法<br>​1.输出当前班级的最高分和最低分<br>​2.输出当前班级的总分及平均<br>​3.计算当前学年的最高分和最低分并输出<br>​4.计算当前学年的平均分并输出<br>​5.统计低于学年平均分的学生人数并输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework_5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">classNum</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//班级人数录入</span></span><br><span class="line">        <span class="type">int</span>[] studentNum = <span class="keyword">new</span> <span class="title class_">int</span>[classNum];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; studentNum.length; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;班人数：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">studentNumtemp</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (studentNumtemp &gt; <span class="number">0</span> &amp;&amp; studentNumtemp &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                studentNum[i] = studentNumtemp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入正确人数&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//班级成绩录入</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">rd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span>[][] grade = <span class="keyword">new</span> <span class="title class_">int</span>[classNum][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grade.length; i++) &#123;</span><br><span class="line">            grade[i] = <span class="keyword">new</span> <span class="title class_">int</span>[studentNum[i]];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; studentNum[i]; j++) &#123;</span><br><span class="line">                grade[i][j] = rd.nextInt(<span class="number">101</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grade.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; studentNum[i]; j++) &#123;</span><br><span class="line">                System.out.print(grade[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.输出当前班级的最高分和最低分</span></span><br><span class="line">        <span class="comment">//2.输出当前班级的总分及平均</span></span><br><span class="line">        System.out.print(<span class="string">&quot;输入班级号：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">no</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> grade[no - <span class="number">1</span>][<span class="number">0</span>], min = grade[no - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>, avg = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grade[no - <span class="number">1</span>].length; j++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//求当前班级no-1的最大值</span></span><br><span class="line">            <span class="keyword">if</span> (max &lt; grade[no - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                max = grade[no - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//求当前班级no-1的最小值</span></span><br><span class="line">            <span class="keyword">if</span> (min &gt; grade[no - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                min = grade[no - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//求当前班级no-1的成绩总和</span></span><br><span class="line">            sum += grade[no - <span class="number">1</span>][j];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//求当前班级no-1的成绩总和</span></span><br><span class="line">            avg = sum / grade[no - <span class="number">1</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(no + <span class="string">&quot;班的最高分为&quot;</span> + max + <span class="string">&quot;分，最低分为&quot;</span> + min + <span class="string">&quot;分&quot;</span>);</span><br><span class="line">        System.out.println(no + <span class="string">&quot;班的总分为&quot;</span> + sum + <span class="string">&quot;分，平均分为&quot;</span> + avg + <span class="string">&quot;分&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.计算当前学年的最高分和最低分并输出</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxAll</span> <span class="operator">=</span> grade[<span class="number">0</span>][<span class="number">0</span>], minAll = grade[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grade.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grade[i].length; j++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//计算当前学年的最高分</span></span><br><span class="line">                <span class="keyword">if</span> (maxAll &lt; grade[i][j]) &#123;</span><br><span class="line">                    maxAll = grade[i][j];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//计算当前学年的最低分</span></span><br><span class="line">                <span class="keyword">if</span> (minAll &gt; grade[i][j]) &#123;</span><br><span class="line">                    minAll = grade[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前学年最高分为&quot;</span> + maxAll + <span class="string">&quot;分，当前学年最低分为&quot;</span> + minAll + <span class="string">&quot;分&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.计算当前学年的平均分并输出</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">sumAll</span> <span class="operator">=</span> <span class="number">0</span>, avgAll = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grade.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grade[i].length; j++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//计算当前学年的总分</span></span><br><span class="line">                sumAll += grade[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算当前学年的平均分</span></span><br><span class="line">        avgAll = sumAll / (grade[<span class="number">0</span>].length+grade[<span class="number">1</span>].length+grade[<span class="number">2</span>].length+grade[<span class="number">3</span>].length+grade[<span class="number">4</span>].length);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前学年的平均分为&quot;</span>+avgAll + <span class="string">&quot;分&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.统计低于学年平均分的学生人数并输出</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grade.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grade[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grade[i][j] &lt; avgAll) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;总共有&quot;</span> + count + <span class="string">&quot;位同学低于学年平均分&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##day06</p><h4 id="题目1-多选-2">题目1(多选):</h4><p>下面关于方法的概述描述，正确的是（ABD ）</p><p>选项 :</p><p>A:  方法定义的先后顺序无所谓</p><p>B:  方法的定义不能产生嵌套包含关系。</p><p>C:  方法可以让程序的执行效率更高</p><p>D:  方法定义好了之后，不会执行的，如果要想执行，一定要进行方法的调用</p><hr><h4 id="题目2-多选">题目2(多选):</h4><p>以下选项中，关于方法定义的参数或返回值描述正确的是（ABD ）</p><p>选项 :</p><p>A:  方法的参数可以有，可以没有，也可以有多个</p><p>B:  方法的参数就是定义一些变量，当方法被调用的时候，用来接收数据使用的</p><p>C:  一个方法执行完成之后可以有一个返回值 ,也可以有多个返回值</p><p>D:  方法的返回值是方法执行完成之后得到的结果</p><hr><h4 id="题目3-单选-4">题目3(单选):</h4><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">   ________________________________</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我是黑马程序员&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>运行结果是：我是黑马程序员横线处应该填写的正确代码是（C ）</code></pre><p>选项 :</p><p>A:  method;</p><p>B:  void v = method();</p><p>C:  method();</p><p>D:  method(“我是黑马程序员”);</p><hr><h4 id="题目4-单选-3">题目4(单选):</h4><pre><code>请观察以下代码，分别为第三行和第六行选出正确选项，保证可以在控制台上输出 </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    _____①_____</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> _____②_____ <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wo ai java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>运行结果是：wo ai java横线处应该填写的正确代码是（B）</code></pre><p>选项 :</p><p>A:  ①  void v = print();②  static void</p><p>B:  ①  print();②  static void</p><p>C:  ①  int v = print();②  static int</p><p>D:  ①  print();②  static</p><hr><h4 id="题目5-单选-3">==题目5(单选)==:</h4><pre><code>下列方法定义格式正确的是（B ） </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">A:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">D:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">method1</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n &gt; <span class="number">10</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选项 :</p><p>A:  选择A</p><p>B:  选择B</p><p>C:  选择C</p><p>D:  选择D</p><hr><h4 id="题目6-单选-4">题目6(单选):</h4><p>观察以下代码，请选出方法调用过程的正确顺序（D）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;开始执行&quot;</span>);   <span class="comment">//1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> print(<span class="number">10</span>);                <span class="comment">//2</span></span><br><span class="line">    System.out.println(a);     <span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> n)</span>&#123;     <span class="comment">//4</span></span><br><span class="line">    n += <span class="number">10</span>;                         <span class="comment">//5</span></span><br><span class="line">    <span class="keyword">return</span> n;              <span class="comment">//6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选项 :</p><p>A:  1，2，3，4，5，6</p><p>B:  1，2，4，6，5，3</p><p>C:  1，4，5，6，2，3</p><p>D:  1，2，4，5，6，3</p><hr><h4 id="题目7-多选">题目7(多选):</h4><pre><code>以下选项中，关于方法的调用过程描述正确的是 (ACD) </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">     <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">     <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> getSum(a,b);</span><br><span class="line">     System.out.println(sum);</span><br><span class="line">     isEquals(a, b);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> a + b;</span><br><span class="line">     <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isEquals</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">c</span> <span class="operator">=</span> a == b;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">选项 : </span><br><span class="line"></span><br><span class="line">A:  由java虚拟机调用main方法，main方法先执行 </span><br><span class="line"></span><br><span class="line">B:  在main方法执行中，会定义a和b变量，并分别赋值<span class="number">10</span>和<span class="number">20</span>，然后先调用isEquals方法，再调用getSum方 法并输出结果 </span><br><span class="line"></span><br><span class="line">C:  调用getSum方法时，要先传入两个整数，否则编译失败。然后执行getSum方法内的代码，执行完成之后，将结果返回赋值给<span class="type">int</span>类型的变量sum </span><br><span class="line"></span><br><span class="line">D:  调用isEquals方法时，要先传入两个整数，否则编译失败。然后执行isEquals方法内的代码，执行完成之后，没有结果返回 </span><br></pre></td></tr></table></figure><h4 id="题目8-单选-4">题目8(单选):</h4><pre><code>以下选项中，不属于方法重载的是（ B）</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">A:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> a,<span class="type">byte</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> b,<span class="type">int</span> a)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    System.out.println(a + b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getSum</span><span class="params">(<span class="type">long</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> a,<span class="type">long</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">D:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    System.out.println(a + b);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目9-单选-4">题目9(单选):</h4><pre><code>观察下面代码，最终在控制台显示 33 正确的方法调用格式是（C ） </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="comment">//此处需要调用下面的某个方法，在控制台当中显示33</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printData</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    System.out.println(<span class="number">11</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printData</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">    System.out.println(<span class="number">22</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printData</span><span class="params">(<span class="type">boolean</span> b)</span>&#123;</span><br><span class="line">    System.out.println(<span class="number">33</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printData</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="number">44</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选项 :</p><p>A:  printData(10,20);</p><p>B:  printData(333);</p><p>C:  printData(true)</p><p>D:  printData();</p><h3 id="代码题-5">代码题</h3><p>方法</p><h4 id="题目1-2">题目1:</h4><p>定义一个方法，该方法能够找出三个整数中的最大值并返回。在主方法中调用方法测试执行。</p><p><strong>训练提示</strong></p><ol><li>根据题意，方法中需要使用三个整数，所以方法参数应该是三个整数类型。</li><li>方法需要有返回值，返回值的类型也是整数类型。</li></ol><p><strong>操作步骤</strong></p><ol><li>定义方法getMax()，方法的参数是三个int类型变量a,b,c，方法的返回值是int类型。</li><li>在方法中使用多分支if…else…判断出最大值并返回。</li><li>在主方法中调用getMax()方法并接受返回值。</li><li>在主方法中打印结果。</li></ol><p><strong>参考代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//调用方法传入参数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> getMax(<span class="number">33</span>, <span class="number">44</span>, <span class="number">11</span>);</span><br><span class="line">        <span class="comment">//打印最大值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最大值是&quot;</span> + max);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义获取最大值的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> a ,<span class="type">int</span> b ,<span class="type">int</span> c)</span>&#123;</span><br><span class="line">        <span class="comment">//判断出最大值并返回</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">tempMax</span> <span class="operator">=</span> a &gt; b ? a : b;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> tempMax &gt; c ? tempMax : c;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目2-2">题目2:</h4><p>请定义一个方法，该方法可以实现对int类型的数组进行遍历，在控制台打印所有元素。实现方法后，请在主方法中调用方法，查看结果。例如，数组为{11, 22, 33}，打印格式为：[11, 22, 33]</p><p><strong>训练提示</strong></p><p>1、首先明确方法的返回值和参数列表，该方法只需要在控制台输出，f返回值类型为void.要实现打印数组元素的功能，需要方法的调用者把想打印的数组传递过来，所以参数列表是int[] arr</p><p>2、方法实现之后，不调用的话会执行吗？该怎样调用？</p><p><strong>操作步骤</strong></p><p>1、定义方法，返回值类型为void，参数列表为int[] arr</p><p>2、在方法中，遍历数组，判断是否是最后一个元素，并且根据不同的情况输出不同的格式。</p><p>3、在主方法中定义一个数组，调用方法，将数组作为参数传递，查看运行结果。</p><p><strong>参考代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;;</span><br><span class="line">        printArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">// [11, 22, 33] 先打印左边[，注意不要回车</span></span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 判断是否是最后一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 中间的元素，要多打印一个逗号和空格</span></span><br><span class="line">                System.out.print(arr[i] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 循环结束，再打印一个右边的]，最后的打印加换行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目3（训练）-2">题目3（训练）</h4><p>在主方法中通过键盘录入三个整数。定义一个方法，方法接收三个整数变量，在方法中从大到小依次打印三个变量。执行效果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入第一个整数：10</span><br><span class="line">请输入第二个整数：30</span><br><span class="line">请输入第三个整数：20</span><br><span class="line">从大到小的顺序是： 30 20 10 </span><br></pre></td></tr></table></figure><p><strong>训练提示</strong></p><ol><li>方法需要接受三个整数，那么方法的形式参数如何定义？</li><li>方法没有返回值的需求，返回值类型是什么？</li></ol><p><strong>解题方案</strong></p><p><strong>操作步骤</strong></p><ol><li><p>使用键盘录入分别录入三个整数。</p></li><li><p>定义method方法，方法的参数是三个int类型，方法的返回值类型是void。</p><p>2.1. 定义整数变量max用于存储最大值，定义min变量用于存储最小值。</p><p>2.2. 使用if…else…多分支判断语句计算三个整数中的最大值并赋值给max。</p><p>2.3. 使用if…else…多分支判断语句计算三个整数中的最小值并赋值给min。</p><p>2.4. 定义变量mid代表中间数,三个整数的和减去max,再减去min,就是中间数的值。</p><p>2.5. 依次打印最大值，中间值和最小值。</p></li><li><p>在主方法中调用method方法，传入参数。</p></li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建键盘录入对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//分别输入三个整数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个整数:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二个整数:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第三个整数:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        method(a,b,c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="comment">//定义变量存储最大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//定义变量存储最小值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//判断最大值</span></span><br><span class="line">        <span class="keyword">if</span>(a &gt; b &amp;&amp; a &gt; c )&#123;</span><br><span class="line">            max = a;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b &gt; a &amp;&amp; b &gt; c)&#123;</span><br><span class="line">            max = b;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            max = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断最小值</span></span><br><span class="line">        <span class="keyword">if</span>(a &lt; b &amp;&amp; a &lt; c )&#123;</span><br><span class="line">            min = a;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b &lt; a &amp;&amp; b &lt; c)&#123;</span><br><span class="line">            min = b;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            min = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算中间值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> a + b + c - max - min;</span><br><span class="line">        <span class="comment">//按照从大到小的顺序输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;从大到小的顺序是：&quot;</span> + max + <span class="string">&quot; &quot;</span>+ mid + <span class="string">&quot; &quot;</span> + min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目4（综合扩展）">题目4（综合扩展）</h4><p>一个大V直播抽奖，奖品是现金红包，分别有{2,588,888,1000,10000}五个奖金。请使用代码模拟抽奖，打印出每个奖项，奖项的出现顺序要随机且不重复。打印效果如下：（随机顺序，不一定是下面的顺序）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">888元的奖金被抽出</span><br><span class="line">588元的奖金被抽出</span><br><span class="line">10000元的奖金被抽出</span><br><span class="line">1000元的奖金被抽出</span><br><span class="line">2元的奖金被抽出</span><br></pre></td></tr></table></figure><p><strong>训练提示</strong></p><ol><li>奖项要随机出现，但奖金不是连续的数字，不能被随机产生。能随机产生的只有数组的索引了，可以使用随机索引来代表随机元素。因为索引和元素是一一对应的，</li><li>哪些奖被抽过了，哪些奖没有被抽过，要定义一个数组来存放已经被抽过的奖项。</li><li>每个奖项只能被抽出一次，要写一个方法来控制奖项不重复。</li></ol><p><strong>解题方案</strong></p><pre><code>使用数组存放多个奖金，再使用另一个数组存放已经被抽过的奖金，使用方法来判断某个奖金是否已经被抽取过。</code></pre><p><strong>操作步骤</strong></p><ol><li>定义奖金的数组arr。</li><li>定义数组brr准备存放已经被抽过的奖金，两个数组长度相同。</li><li>定义一个变量index,用户代表数组brr的索引。</li><li>定义方法，判断数组中是否存在某数字，存在返回true,不存在返回false。</li><li>写一个while循环，如果index&lt;arr.length则说明奖项没有被抽完继续抽取。</li><li>在循环中使用随机数产生一个随机索引i。</li><li>使用步骤4的方法判断brr数组中是否包含arr[i]奖金。</li><li>如果不包含，则打印arr[i]奖金，并且把它放入brr数组中代表已经被抽取过，同时index加一。</li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义存放奖金的数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">10000</span>,<span class="number">1000</span>,<span class="number">588</span>,<span class="number">888</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="comment">//2.定义数组存放已经被取过的奖金</span></span><br><span class="line">        <span class="type">int</span>[] brr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">//3.定义变量表示brr的索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//4.创建随机数对象</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">//5.定义循环反复获取随机数,如果index小于arr的长度则继续循环</span></span><br><span class="line">        <span class="keyword">while</span>(index &lt; arr.length)&#123;</span><br><span class="line">            <span class="comment">//5.1每次生成一个随机索引对应一个奖金</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> r.nextInt(arr.length);</span><br><span class="line">            <span class="comment">//5.2调用方法判断这个奖金是否被获取过</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> exist(brr, arr[i]);</span><br><span class="line">            <span class="comment">//5.3b是false代表这个奖金没有被抽取过</span></span><br><span class="line">            <span class="keyword">if</span>(!b) &#123;</span><br><span class="line">                <span class="comment">//5.4把获取之后的奖金存放到brr中</span></span><br><span class="line">                brr[index] = arr[i];</span><br><span class="line">                <span class="comment">//5.5index索引向后移动一次</span></span><br><span class="line">                index++;</span><br><span class="line">                <span class="comment">//5.6打印本次被抽出的奖项</span></span><br><span class="line">                System.out.println( arr[i] + <span class="string">&quot;元的奖金被抽出&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.定义方法：判断brr数组中是否存在num这个数字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">int</span>[] brr,<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="comment">//6.1对数组进行遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; brr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//6.2判断如果找到数字，则返回true</span></span><br><span class="line">            <span class="keyword">if</span>(brr[i] == num)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.3如果最终没有找到则返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####题目5（无答案）</p><p>方法一：获取数组的长度</p><p>键盘录入一个4-7的整数（该整数将作为数组容器的长度）；要求：必须对该整数进行合法性判断，如果不符合条件，需要让用户重新输入</p><p>方法二：给数组进行赋值</p><p>通过随机数给数组进行赋值，要求随机数的取值范围为：20-80（包括20和80）</p><p>方法三：获取数组中偶数的个数</p><p>方法四：获取数组中奇数的和</p><p>方法五：获取数组中偶数的平均值</p><p>方法六：实现索引查找（不做硬性要求）</p><p>在指定的数组中获取该数（调用方法时传递过来的整数）在数组中的索引，如果没有则返回-1。有，有几个索引返回几个索引</p><p>main方法：</p><p>在主方法中调用以上方法；在调用方法六时，需要键盘录入一个整数，然后调用方法六进行查找</p><p><strong>必须实现方法1-5，方法6不做要求</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homeworknoanser</span> &#123;</span><br><span class="line"><span class="comment">//    main方法：</span></span><br><span class="line"><span class="comment">//    在主方法中调用以上方法；在调用方法六时，需要键盘录入一个整数，然后调用方法六进行查找</span></span><br><span class="line"><span class="comment">//    必须实现方法1-5，方法6不做要求</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> getArrLength();</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = assign(arr);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(arr[i] + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(arr[i] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;偶数的个数为：&quot;</span> + evenCount(arr));</span><br><span class="line">        System.out.println(<span class="string">&quot;奇数的总和为：&quot;</span> + oddSum(arr));</span><br><span class="line">        System.out.println(<span class="string">&quot;偶数的平均值为：&quot;</span> + evenAvg(arr));</span><br><span class="line">        <span class="type">int</span>[] indexs = indexSearch(arr);</span><br><span class="line">        <span class="keyword">if</span> (indexs[<span class="number">0</span>] == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没找到&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;对应的索引为：&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; indexs.length; i++) &#123;</span><br><span class="line">                System.out.print(indexs[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    方法一：获取数组的长度</span></span><br><span class="line"><span class="comment">//    键盘录入一个4-7的整数（该整数将作为数组容器的长度）；要求：必须对该整数进行合法性判断，如果不符合条件，需要让用户重新输入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getArrLength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;输入数组的长度：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (num &lt; <span class="number">4</span> || num &gt; <span class="number">7</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;请输入4-7的整数：&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    方法二：给数组进行赋值</span></span><br><span class="line"><span class="comment">//    通过随机数给数组进行赋值，要求随机数的取值范围为：20-80（包括20和80）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">assign</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> r.nextInt(<span class="number">61</span>) + <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    方法三：获取数组中偶数的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">evenCount</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    方法四：获取数组中奇数的和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">oddSum</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                sum += arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    方法五：获取数组中偶数的平均值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">evenAvg</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                sum += arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (evenCount(arr) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> sum / evenCount(arr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    方法六：实现索引查找（不做硬性要求）</span></span><br><span class="line"><span class="comment">//    在指定的数组中获取该数（调用方法时传递过来的整数）在数组中的索引，如果没有则返回-1。有，有几个索引返回几个索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] indexSearch(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入你要查找的值：&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num == arr[i]) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] brr = <span class="keyword">new</span> <span class="title class_">int</span>[count];</span><br><span class="line">        <span class="type">int</span> <span class="variable">brrIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num == arr[i]) &#123;</span><br><span class="line">                brr[brrIndex] = i;</span><br><span class="line">                brrIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> brr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day07">day07</h2><h4 id="题目1（训练）-2">题目1（训练）</h4><p>定义手机类，手机有品牌(brand),价格(price)和颜色(color)三个属性，有打电话call()和sendMessage()两个功能。</p><p>请定义出手机类，类中要有空参、有参构造方法，set/get方法。</p><p>定义测试类，在主方法中使用空参构造创建对象，使用set方法赋值。</p><p>调用对象的两个功能，打印效果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正在使用价格为3998元黑色的小米手机打电话....</span><br><span class="line">正在使用价格为3998元黑色的小米手机发短信....</span><br></pre></td></tr></table></figure><p><strong>训练提示</strong></p><ol><li>类中的属性就是成员变量，类中的行为功能就是成员方法。</li><li>成员变量要被private修饰。</li></ol><p><strong>解题方案</strong></p><p><strong>操作步骤</strong></p><ol><li>定义手机类，手机类中定义String类型的品牌，int类型的价格，String类型的颜色，三个成员变量都用privice修饰。</li><li>提供空参构造方法和有参构造方法。</li><li>提供set/get方法。</li><li>编写打电话的成员方法，方法中对成员变量进行使用。</li><li>编写发短信的成员方法，方法中对成员变量进行使用。</li><li>在测试类中创建手机对象，使用set方法赋值，分别调用各个方法。</li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">手机类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="comment">//定义品牌</span></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="comment">//定义价格</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">    <span class="comment">//定义颜色</span></span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供空参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提供有参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">(String brand, <span class="type">int</span> price, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提供set/get方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrand</span><span class="params">(String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义打电话方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在使用价格为&quot;</span>+price+<span class="string">&quot;元&quot;</span>+color+<span class="string">&quot;的&quot;</span>+brand+<span class="string">&quot;手机打电话....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义发短信方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在使用价格为&quot;</span>+price+<span class="string">&quot;元&quot;</span>+color+<span class="string">&quot;的&quot;</span>+brand+<span class="string">&quot;手机发短信....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">测试类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建手机对象</span></span><br><span class="line">        <span class="type">Phone</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="comment">//调用set方法赋值</span></span><br><span class="line">        p.setBrand(<span class="string">&quot;小米&quot;</span>);</span><br><span class="line">        p.setPrice(<span class="number">3998</span>);</span><br><span class="line">        p.setColor(<span class="string">&quot;黑色&quot;</span>);</span><br><span class="line">        <span class="comment">//调用打电话功能</span></span><br><span class="line">        p.call();</span><br><span class="line">        <span class="comment">//调用发短信功能</span></span><br><span class="line">        p.sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目2（训练）-2">题目2（训练）</h4><p>定义一个女朋友类。女朋友的属性包含：姓名，身高，体重。行为包含：洗衣服wash()，做饭cook()。另外定义一个用于展示三个属性值的show()方法。请在测试类中通过有参构造方法创建对象并赋值，然后分别调用展示方法、洗衣服方法和做饭方法。打印效果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我女朋友叫凤姐,身高155.0厘米,体重130.0斤</span><br><span class="line">女朋友帮我洗衣服</span><br><span class="line">女朋友给我做饭</span><br></pre></td></tr></table></figure><p><strong>训练提示</strong></p><ol><li>类中的属性就是成员变量，类中的行为功能就是成员方法。</li><li>成员变量要被private修饰。</li><li>展示方法的作用就是打印姓名、身高、体重三个成员变量的值。</li></ol><p><strong>解题方案</strong></p><p><strong>操作步骤</strong></p><ol><li>定义女朋友类，定义String类型姓名，double类型身高和double类型体重三个成员变量，三个成员变量都用privice修饰。</li><li>提供空参构造方法和有参构造方法。</li><li>提供set/get方法。</li><li>编写展示方法show()，方法打印三个成员变量的值。</li><li>编写洗衣服wash()方法，输出洗衣服的语句。</li><li>编写做饭cook()方法，输出做饭的语句。</li><li>在测试类中使用有参构造创建女友对象，分别调用各个方法。</li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">女朋友类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Girlfriend</span> &#123;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//身高</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> height;</span><br><span class="line">    <span class="comment">//体重</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> weight;</span><br><span class="line">    <span class="comment">//空参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Girlfriend</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Girlfriend</span><span class="params">(String name, <span class="type">double</span> height, <span class="type">double</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//set/get方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(<span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(<span class="type">double</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//展示方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我女朋友叫&quot;</span> +name+<span class="string">&quot;,身高&quot;</span> +height+<span class="string">&quot;厘米,体重&quot;</span>+weight+<span class="string">&quot;斤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//洗衣服方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wash</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;女朋友帮我洗衣服&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//做饭方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cook</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;女朋友给我做饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">测试类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建女朋友对象</span></span><br><span class="line">        <span class="type">Girlfriend</span> <span class="variable">gf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girlfriend</span>(<span class="string">&quot;凤姐&quot;</span>,<span class="number">155</span>,<span class="number">130</span>);</span><br><span class="line">        <span class="comment">//调用展示方法</span></span><br><span class="line">        gf.show();</span><br><span class="line">        <span class="comment">//调用洗衣服方法</span></span><br><span class="line">        gf.wash();</span><br><span class="line">        <span class="comment">//调用做饭方法</span></span><br><span class="line">        gf.cook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目3（训练）-3">题目3（训练）</h4><p>定义项目经理类Manager。属性：姓名name，工号id，工资salary，奖金bonus。行为：工作work()<br>定义程序员类Coder。属性：姓名name，工号id，工资salary。行为：工作work()</p><p>要求：</p><pre><code>1.按照以上要求定义Manager类和Coder类,属性要私有,生成空参、有参构造，set和get方法2.定义测试类,在main方法中创建该类的对象并给属性赋值(set方法或有参构造方法)3.调用成员方法,打印格式如下:</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">工号为123基本工资为15000奖金为6000的项目经理正在努力的做着管理工作,分配任务,检查员工提交上来的代码.....</span><br><span class="line">工号为135基本工资为10000的程序员正在努力的写着代码......</span><br></pre></td></tr></table></figure><p><strong>训练提示</strong></p><ol><li>类中的属性就是成员变量，类中的行为功能就是成员方法。</li><li>成员变量要被private修饰。</li><li>在工作work()方法中调用成员变量，输出成员变量的值。</li></ol><p><strong>解题方案</strong></p><p><strong>操作步骤</strong></p><ol><li>定义项目经理类，定义成员变量，构造方法，set和get方法，work方法，方法中根据打印格式输出id,salary,bonus的值。</li><li>定义程序猿类，定义成员变量，构造方法，set和get方法，work方法，方法中根据打印格式输出id和salary的值。</li><li>在测试类中使用有参构造创建项目经理对象并赋值，调用工作方法打印结果。</li><li>在测试类中使用有参构造创建程序员对象并赋值，调用工作方法打印结果。</li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">经理类:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Manager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> salary;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bonus;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String name, <span class="type">int</span> id, <span class="type">int</span> salary, <span class="type">int</span> bonus)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">        <span class="built_in">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">int</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBonus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bonus;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBonus</span><span class="params">(<span class="type">int</span> bonus)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工号为&quot;</span>+id+<span class="string">&quot;基本工资为&quot;</span>+salary+<span class="string">&quot;奖金为&quot;</span>+bonus+<span class="string">&quot;的项目经理正在努力的做着管理工作,分配任务,检查员工提交上来的代码.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">程序员类：</span><br><span class="line"><span class="keyword">package</span> com.day07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> salary;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Coder</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Coder</span><span class="params">(String name, <span class="type">int</span> id, <span class="type">int</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">int</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工号为&quot;</span>+id+<span class="string">&quot;基本工资为&quot;</span>+salary+<span class="string">&quot;的程序员正在努力的写着代码......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">测试类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建经理对象</span></span><br><span class="line">        <span class="type">Manager</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>(<span class="string">&quot;老王&quot;</span>,<span class="number">123</span>,<span class="number">15000</span>,<span class="number">6000</span>);</span><br><span class="line">        <span class="comment">//调用工作方法</span></span><br><span class="line">        m.work();</span><br><span class="line">        <span class="comment">//创建程序员对象</span></span><br><span class="line">        <span class="type">Coder</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Coder</span>(<span class="string">&quot;小王&quot;</span>,<span class="number">135</span>,<span class="number">10000</span>);</span><br><span class="line">        <span class="comment">//调用工作方法</span></span><br><span class="line">        c.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目4（训练）">题目4（训练）</h4><p>定义猫类Cat。属性:毛的颜色color，品种breed。行为:吃饭eat()，抓老鼠catchMouse()<br>定义狗类Dog。属性:毛的颜色color，品种breed。行为:吃饭()，看家lookHome()<br>要求:<br>1.按照以上要求定义Cat类和Dog类,属性要私有,生成空参、有参构造，set和get方法<br>2.定义测试类,在main方法中创建该类的对象并给属性赋值(set方法或有参构造方法)<br>3.调用成员方法,打印格式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">花色的波斯猫正在吃鱼.....</span><br><span class="line">花色的波斯猫正在逮老鼠....</span><br><span class="line">黑色的藏獒正在啃骨头.....</span><br><span class="line">黑色的藏獒正在看家.....</span><br></pre></td></tr></table></figure><p><strong>训练提示</strong></p><ol><li>类中的属性就是成员变量，类中的行为功能就是成员方法。</li><li>成员变量要被private修饰。</li></ol><p><strong>解题方案</strong></p><p><strong>操作步骤</strong></p><ol><li>定义猫类，定义成员变量，构造方法，set和get方法，吃饭方法eat()，抓老鼠方法catchMouse()，方法中根据题目给出的格式输出成员变量的值。</li><li>定义狗类，定义成员变量，构造方法，set和get方法，吃饭方法eat()，看家方法lookHome()，方法中根据题目给出的格式输出成员变量的值。</li><li>在测试类中使用有参构造创建猫类对象，调用eat()方法和catchMouse()方法。</li><li>在测试类中使用有参构造创建狗类对象，调用eat()方法和lookHome()方法。</li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">猫类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> String breed;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String color, String breed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.breed = breed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBreed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> breed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBreed</span><span class="params">(String breed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.breed = breed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(color+<span class="string">&quot;的&quot;</span>+breed+<span class="string">&quot;正在吃鱼.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(color + <span class="string">&quot;的&quot;</span>+ breed +<span class="string">&quot;正在逮老鼠....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">狗类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> String breed;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String color, String breed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.breed = breed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBreed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> breed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBreed</span><span class="params">(String breed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.breed = breed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(color + <span class="string">&quot;的&quot;</span>+ breed +<span class="string">&quot;正在啃骨头.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookhome</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(color + <span class="string">&quot;的&quot;</span>+ breed +<span class="string">&quot;正在看家.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">测试类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建猫对象</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;花色&quot;</span>,<span class="string">&quot;波斯猫&quot;</span>);</span><br><span class="line">        <span class="comment">//调用猫的方法</span></span><br><span class="line">        c.eat();</span><br><span class="line">        c.catchMouse();</span><br><span class="line">        <span class="comment">//创建狗对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;黑色&quot;</span>,<span class="string">&quot;藏獒&quot;</span>);</span><br><span class="line">        d.eat();</span><br><span class="line">        d.lookhome();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day08">day08</h2><h3 id="题目1-3">题目1</h3><p>需求：已知用户名和密码，请用程序实现模拟用户登录。总共给三次机会，登录之后，给出相应的提示</p><p>参考答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:已知用户名和密码，定义两个字符串表示即可</span></span><br><span class="line"><span class="comment">        2:键盘录入要登录的用户名和密码，用 Scanner 实现</span></span><br><span class="line"><span class="comment">        3:拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。字符串的内容比较，用equals() 方法实现</span></span><br><span class="line"><span class="comment">        4:用循环实现多次机会，这里的次数明确，采用for循环实现，并在登录成功的时候，使用break结束循环</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//已知用户名和密码，定义两个字符串表示即可</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;itheima&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;czbk&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用循环实现多次机会，这里的次数明确，采用for循环实现，并在登录成功的时候，使用break结束循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//键盘录入要登录的用户名和密码，用 Scanner 实现</span></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。字符串的内容比较，用equals() 方法实现</span></span><br><span class="line">            <span class="keyword">if</span> (name.equals(username) &amp;&amp; pwd.equals(password)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">2</span>-i == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;你的账户被锁定，请与管理员联系&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//2,1,0</span></span><br><span class="line">                    <span class="comment">//i,0,1,2</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;登录失败，你还有&quot;</span> + (<span class="number">2</span> - i) + <span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目2：">题目2：</h3><p>遍历字符串案例</p><p>​键盘录入一个字符串，使用程序实现在控制台遍历该字符串</p><p>提示：键盘录入字符串使用next方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line"><span class="comment">        2:遍历字符串，首先要能够获取到字符串中的每一个字符</span></span><br><span class="line"><span class="comment">            public char charAt(int index)：返回指定索引处的char值，字符串的索引也是从0开始的</span></span><br><span class="line"><span class="comment">        3:遍历字符串，其次要能够获取到字符串的长度</span></span><br><span class="line"><span class="comment">            public int length()：返回此字符串的长度</span></span><br><span class="line"><span class="comment">            数组的长度：数组名.length</span></span><br><span class="line"><span class="comment">            字符串的长度：字符串对象.length()</span></span><br><span class="line"><span class="comment">        4:遍历字符串的通用格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;line.length(); i++) &#123;</span><br><span class="line">            System.out.println(line.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目3-2">题目3</h3><p>请编写程序，由键盘录入一个字符串，统计字符串中英文字母和数字分别有多少个。比如：Hello12345World中字母：10个，数字：5个。</p><p>参考答案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="comment">// 为方便统计，将字符串中的字母都转为小写</span></span><br><span class="line">        line = line.toLowerCase();</span><br><span class="line">        <span class="comment">//要统计两种类型的字符个数，需定义两个统计变量，初始值都为0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">letterCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numberCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 遍历字符串，得到每一个字符</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;line.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> line.charAt(i);</span><br><span class="line">            <span class="comment">// 判断该字符属于哪种类型，然后对应类型的统计变量+1</span></span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">                letterCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                numberCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出两种类型的字符个数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;英文字母：&quot;</span> + letterCount + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;数字：&quot;</span> + numberCount + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目4：">题目4：</h3><p>字符串拼接案例</p><p>​定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，</p><p>​并在控制台输出结果。例如，数组为 int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:定义一个 int 类型的数组，用静态初始化完成数组元素的初始化</span></span><br><span class="line"><span class="comment">        2:定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回。</span></span><br><span class="line"><span class="comment">          返回值类型 String，参数列表 int[] arr</span></span><br><span class="line"><span class="comment">        3:在方法中遍历数组，按照要求进行拼接</span></span><br><span class="line"><span class="comment">        4:调用方法，用一个变量接收结果</span></span><br><span class="line"><span class="comment">        5:输出结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//定义一个 int 类型的数组，用静态初始化完成数组元素的初始化</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，用一个变量接收结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> arrayToString(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s:&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">            返回值类型：String</span></span><br><span class="line"><span class="comment">            参数：int[] arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">arrayToString</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//在方法中遍历数组，按照要求进行拼接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        s += <span class="string">&quot;[&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==arr.length-<span class="number">1</span>) &#123;</span><br><span class="line">                s += arr[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s += arr[i];</span><br><span class="line">                s += <span class="string">&quot;, &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s += <span class="string">&quot;]&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目5：">题目5：</h3><p>​请定义一个方法用于判断一个字符串是否是对称的字符串，并在主方法中测试方法。例如：“abcba”、&quot;上海自来水来自海上&quot;均为对称字符串。</p><p>参考答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest05</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        请定义一个方法用于判断一个字符串是否是对称的字符串，并在主方法中测试方法。例如：&quot;abcba&quot;、&quot;上海自来水来自海上&quot;均为对称字符串。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(check(<span class="string">&quot;上海自来水来自海上&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 将字符串传入StringBuilder, 为了调用反转的方法</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(content);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 反转</span></span><br><span class="line">        sb.reverse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 如果反转后的内容, 和原内容相同, 判定为对称字符串</span></span><br><span class="line">        <span class="keyword">if</span> (content.equals(sb.toString())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day09">day09</h2><h3 id="数组">数组</h3><p>1、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">需求：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、创建一个长度为<span class="number">10</span>的数组，并使用随机数(Random)给数组进行赋值(随机数范围<span class="number">15</span>-<span class="number">80</span>)：</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、将数组元素为[偶数的数]累加，并在控制台打印偶数和。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、将数组中[元素和索引]都为[偶数]的数，在控制台打印。</span><br></pre></td></tr></table></figure><p>2、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">需求：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、随机生成六个<span class="number">5</span>-<span class="number">65</span>（包含<span class="number">5</span>和<span class="number">65</span>）之间的数存入数组中</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、计算出去掉最大值与最小值的平均数（如果有两个最大值或者有两个最小值只去掉一个即可）</span><br></pre></td></tr></table></figure><p>3、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">需求：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、定义一个方法获取<span class="type">int</span>类型的数组：数组的长度通过键盘录入获取，要求数组的长度为<span class="number">4</span>-<span class="number">7</span>之间</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、通过随机数进行赋值，范围为<span class="number">20</span>-<span class="number">99</span>之间</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、定义一个方式实现查找索引：键盘录入一个数，在指定的数组中获取该数在数组中的索引，如果没有则返回-<span class="number">1</span>。有，有几个索引返回几个索引</span><br></pre></td></tr></table></figure><h3 id="集合">集合</h3><p>1、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">需求：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、定义一个汽车类(Car类)，定义三个属性：品牌(brand),价格(price),颜色(color)，定义构造方法，定义get、set方法。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、定义测试类Test,创建一个ArrayList集合，创建三个汽车对象：c1(“宝马”,<span class="number">300000</span>,”白色”),c2(“五菱宏光”,<span class="number">30000</span>,”红色”),c3(“奔驰”,<span class="number">588888</span>,”黑色”)，把上述三个对象添加进集合。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、遍历集合，打印集合中价格高于<span class="number">100000</span>的汽车的所有属性。</span><br></pre></td></tr></table></figure><p>2、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">需求：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、定义User类，包含空参、满参构造、以下成员变量及其get、set方法</span><br><span class="line">    姓名 name（Sting 类型）</span><br><span class="line">    年龄 age（<span class="type">int</span> 类型）</span><br><span class="line">    性别 sex（String 类型）</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>定义测试类Test,完成以下要求：</span><br><span class="line">   ①定义方法，<span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;User&gt; <span class="title function_">getUser</span><span class="params">(ArrayList&lt;User&gt; users)</span>，</span><br><span class="line">获得年龄大于等于<span class="number">18</span>岁，并且性别为 “男”的User，加入新的集合并返回。</span><br><span class="line">   ②在main方法中完成以下功能：创建<span class="number">5</span>个User对象并赋值，加入ArrayList&lt;User&gt;集合中，</span><br><span class="line">   调用getUser方法并接收，遍历返回的新集合输出新集合中所有元素信息</span><br></pre></td></tr></table></figure><p>3、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">需求：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、现有三本图书的信息，信息分别是【编号】【书名】【价格】，具体内容为</span><br><span class="line">（book001，三国演义，<span class="number">80</span>）</span><br><span class="line">（book002，水浒传，<span class="number">80</span>）</span><br><span class="line">（book003，故事会，<span class="number">5</span>）</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、把图书对象存入到集合容器中</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、从集合中找出书名为三国演义的图书，并打印该图书的信息</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、找出价格小于<span class="number">10</span>元的图书，并将该图书的价格设置成<span class="number">10</span>元，最终在控制台打印修改后的图书信息</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software_Typora_Error</title>
      <link href="/2022/07/05/Software_Typora_Error/"/>
      <url>/2022/07/05/Software_Typora_Error/</url>
      
        <content type="html"><![CDATA[<h1>Software_Typora_Error</h1><h2 id="1-One-of-the-glob-patterns-doesn’t-match-any-files">1.One of the glob patterns doesn’t match any files.</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ hexo cl &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo s</span><br><span class="line">WARN  [</span><br><span class="line">  <span class="string">&quot;One of the glob patterns doesn&#x27;t match any files. Please remove or fix the fo</span></span><br><span class="line"><span class="string">llowing: &#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&#x27;  &quot;globDirectory&quot;: &quot;public&quot;,\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;  &quot;globPattern&quot;: &quot;**/*.&#123;js,html,css,png,jpg,gif,svg,webp,eot,ttf,woff,woff2</span></span><br><span class="line"><span class="string">&#125;&quot;,\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;  &quot;globIgnores&quot;: [\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;    &quot;**/node_modules/**/*&quot;,\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;    &quot;service-worker.js&quot;,\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;    &quot;workbox-*.js&quot;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;  ]\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解决方式：问题出在git Bash Here启动的文件夹路径不对，应在Blog根目录下右击启动git Bash Here ,重新启动git时记得把因错误操作产生的<span class="keyword">public</span>文件夹删除。</span><br></pre></td></tr></table></figure><h2 id="2-文章开头出现-而不是文章标题">2.文章开头出现#而不是文章标题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解决方式：在文章标题源代码###和文字之间加上一个空格。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE_Exercises_Short Answer</title>
      <link href="/2022/07/03/JavaSE_Exercises_Short%20Answer/"/>
      <url>/2022/07/03/JavaSE_Exercises_Short%20Answer/</url>
      
        <content type="html"><![CDATA[<h2 id="day01-4">day01</h2><h3 id="二-Java概述">二.Java概述</h3><h4 id="1-Java语言背景介绍">1.Java语言背景介绍</h4><p>1.Java语言背景介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>Java之父</span><br><span class="line">詹姆斯·高斯林 （James Gosling）</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>Java的三个版本</span><br><span class="line">Java SE（标准版，支持的是面向桌面级的Java平台，提供了完整的Java核心API，是其他两个版本的基础）.Java ME（Java ME : Java 语言的（小型版），用于嵌入式消费类电子设备。）.Java EE（Java 语言的（企业版），用于 Web 方向的网站开发。）。</span><br></pre></td></tr></table></figure><h4 id="2-Java语言的跨平台原理">2.Java语言的跨平台原理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>平台与跨平台</span><br><span class="line">计算机操作系统；Linux.Windows.macOS</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>Java跨平台的原理</span><br><span class="line">Java程序可以在任意操作系统上运行（不是所有的语言都具备这样的特征。比如：C#只能在windows上运行）</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>JVM本身是否可以跨平台</span><br><span class="line">只要在运行Java程序的操作系统中安装一个对应的JVM （Java虚拟机）；JVM本身不可以跨平台</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>跨平台的好处</span><br><span class="line">针对于企业来讲，只要开发一次，就可以在任意的平台上运行，可以节省成本。摆脱了硬件平台的束缚，实现了一次编写，到处运行的理想（Java的口号）</span><br></pre></td></tr></table></figure><h4 id="3-JRE和JDK">3.JRE和JDK</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>Java程序开发的三个步骤?</span><br><span class="line">    编写代码：在.Java的文件中去使用Java语法规则是书写源代码</span><br><span class="line">    编译代码：Java文件使用jdk中的编译工具Javac 编译为jvm能够识别运行的.class文件（字节码文件）</span><br><span class="line">    运行代码：使用jdk的运行工具Java 去运行.class文件  运行在jvm虚拟机中</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>JRE（Java RunTime Environment） Java运行环境是干什么的?</span><br><span class="line">JRE：Java运行环境，包括Java虚拟机（jvm）和Java程序所需要的核心类库，如果需要运行一个写好的Java程序，计算机中只需要安装一个jre即可</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>JDK（Java developement kit） Java开发工具包是干什么的?</span><br><span class="line">    JDK：Java开发工具包， 提供给Java开发人员使用,其中包含了Java开发工具,也包括jre，就不用再单独安装jre</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>JRE,JDK,JVM三者的作用及关系是什么?</span><br><span class="line">    jdk&gt;jre&gt;jvm</span><br><span class="line">    jdk=jre+开发工具+编译器</span><br><span class="line">    jre=类库+jvm+解释器</span><br><span class="line">    .Java文件---&gt;（编译） .class文件---&gt;（解释运行）JVM ----&gt;操作系统中</span><br></pre></td></tr></table></figure><h3 id="三-Java入门程序-2">三.Java入门程序</h3><h4 id="1-常用的DOS命令">1.常用的DOS命令</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>学习DOS命令提示符的目的 </span><br><span class="line">为了能够使用JDK的bin目录中的编译（javac.exe）和运行（java.exe）工具</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>如何打开DOS命令提示符</span><br><span class="line">win+R---&gt;输入cmd+enter</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>常用的DOS命令提示符</span><br><span class="line"><span class="number">4.</span>如何使用编译和运行工具</span><br><span class="line">打开DOS命令行，进入bin目录，输入javac或java</span><br></pre></td></tr></table></figure><p>3.常用的DOS命令</p><table><thead><tr><th>操作</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>盘符名称:</td><td style="text-align:left">盘符切换。E:回车，表示切换到E盘。</td></tr><tr><td>dir</td><td style="text-align:left">查看当前路径下的内容。</td></tr><tr><td>cd 目录</td><td style="text-align:left">进入单级目录。cd itheima</td></tr><tr><td>cd 目录1\目录2…</td><td style="text-align:left">进入多级目录。cd itheima\JavaSE</td></tr><tr><td>cd …</td><td style="text-align:left">回退到上一级目录。</td></tr><tr><td>cd \</td><td style="text-align:left">回退到盘符目录。</td></tr><tr><td>cls</td><td style="text-align:left">清屏。</td></tr><tr><td>exit</td><td style="text-align:left">退出命令提示符窗口。</td></tr></tbody></table><h4 id="2-Path环境变量的配置">2.Path环境变量的配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>配置环境变量的目的</span><br><span class="line">为了在任意的目录下都可以使用javac 和 java 工具</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>配置步骤</span><br><span class="line">    - 按下 Win键 + E ，找到此电脑</span><br><span class="line">    - 右键点击此电脑，选择属性</span><br><span class="line">    - 点击高级系统设置</span><br><span class="line">    - 选择高级，再点击下面的环境变量</span><br><span class="line">    - 点击系统变量下面的新建</span><br><span class="line">    - 会弹出这样的界面</span><br><span class="line">    - 变量名后面输入：JAVA_HOME </span><br><span class="line">      变量值后面：将JDK的安装路径复制过来，</span><br><span class="line">      注意：不带bin目录</span><br><span class="line">      操作完毕点击确定</span><br><span class="line">    - 选择Path。</span><br><span class="line">      此处还是要选择下方系统变量中的Path。</span><br><span class="line">      点击编辑</span><br><span class="line">    - 在弹出的页面中点击新建，会出现一个输入框</span><br><span class="line">    - 在输入框中输入%JAVA_HOME%\bin; 输入完毕确定。</span><br><span class="line">      其中使用两个百分号包住JAVA_HOME，表示引用了JAVA_HOME里面的值。</span><br><span class="line">    - 快速打开cmd，输入java回车校验环境变量配置是否成功</span><br><span class="line">      如果出现一长串很多的白色文字，表示配置成功</span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span>用户变量和系统变量的区别</span><br><span class="line">    系统变量：配置以后，整个计算机操作系统有效</span><br><span class="line"></span><br><span class="line">    用户变量：配置以后，对于当前计算机用户有效</span><br><span class="line"></span><br><span class="line">    二者本质都是变量，系统变量针对所有用户，而用户变量是当前用户私有的</span><br></pre></td></tr></table></figure><h4 id="4-HelloWorld案例详解">4.HelloWorld案例详解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">public</span>的作用</span><br><span class="line">限定文件名和类名保持一致</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>class的作用</span><br><span class="line">class表示定义一个类，后面是类名，再后面是&#123;&#125;表示的是类的范围。类是Java中最基本的组成单元</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>main方法（主方法）的作用</span><br><span class="line">main方法程序的入口方法，main方法称之为主方法，一个类中只能有一个主方法</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>System.out.println（）;的作用</span><br><span class="line">输出语句，使程序能够输出打印双引号中包裹的内容</span><br></pre></td></tr></table></figure><h3 id="四-Java语法-2">四.Java语法</h3><h4 id="1-注释">1.注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>注释的概念及作用</span><br><span class="line">就是对代码的解释和说明。其目的是让人们能够更加轻松地了解代码。为代码添加注释，是十分必须要的，它不影响程序的编译和运行</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>注释的分类</span><br><span class="line">    - 单行注释</span><br><span class="line">        格式：<span class="comment">// 注释信息</span></span><br><span class="line">    - 多行注释</span><br><span class="line">        格式： <span class="comment">/* 注释信息 */</span></span><br><span class="line">    - 文档注释</span><br><span class="line">        格式：格式：<span class="comment">/** 注释信息 */</span></span><br></pre></td></tr></table></figure><h4 id="2-关键字">2.关键字</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>什么是关键字</span><br><span class="line">关键字是指被java语言赋予了特殊含义的单词</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>关键字有什么特点</span><br><span class="line">    - 关键字的字母全部小写。</span><br><span class="line">    - 常用的代码编辑器对关键字都有高亮显示。比如：<span class="keyword">public</span>.class.<span class="keyword">static</span></span><br><span class="line">    - main不是关键字</span><br></pre></td></tr></table></figure><h4 id="3-常量（字面量）">3.常量（字面量）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>常量的概念</span><br><span class="line">    在程序的执行过程中，其值不会发生改变的量（数据）</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>常量的分类</span><br><span class="line">    - 字符串常量 ：</span><br><span class="line">        用双引号括起来的多个字符（可以包含<span class="number">0</span>个.一个或多个）。</span><br><span class="line">        例如：<span class="string">&quot;a&quot;</span>.<span class="string">&quot;abc&quot;</span>.<span class="string">&quot;中国&quot;</span>等</span><br><span class="line">    - 整型常量  </span><br><span class="line">        所有的整数。</span><br><span class="line">        例如：-<span class="number">10.0</span><span class="number">.88</span>等</span><br><span class="line">    - 浮点型常量  </span><br><span class="line">        所有的小数。</span><br><span class="line">        例如：-<span class="number">5.5</span><span class="number">.1</span><span class="number">.0</span><span class="number">.88</span><span class="number">.88</span>等</span><br><span class="line">    - 字符型常量  </span><br><span class="line">        用单引号括起来的一个字符。</span><br><span class="line">        例如：<span class="string">&#x27;a&#x27;</span>.<span class="string">&#x27;5&#x27;</span>.<span class="string">&#x27;B&#x27;</span>.<span class="string">&#x27;中&#x27;</span>等</span><br><span class="line">    - 布尔型常量  </span><br><span class="line">        布尔值，表示真假，只有两个值<span class="literal">true</span>和<span class="literal">false</span>。</span><br><span class="line">    - 空常量 </span><br><span class="line">         一个特殊的值，空值，值为<span class="literal">null</span>。</span><br></pre></td></tr></table></figure><h4 id="4-数据类型">4.数据类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>计算机的最小存储单元</span><br><span class="line">计算机中最小的存储单元叫字节（<span class="type">byte</span>），通常用大写字母B表示；计算机存储设备的最小信息单元叫位（bit），我们通常称之为比特位，通常用小写字母b表示；一个字节由<span class="number">8</span>个位组成。</span><br><span class="line">1B = 8bit;1KB = 1024B;1MB = 1024KB;1GB = 1024MB;1TB = 1024GB;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>Java中数据类型的分类</span><br><span class="line">    - 基本数据类型</span><br><span class="line">    - 引用数据类型（后面讲解）</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>基本数据类型分类</span><br></pre></td></tr></table></figure><table><thead><tr><th>数据类型</th><th>关键字</th><th style="text-align:left">取值范围</th><th style="text-align:center">内存占用</th></tr></thead><tbody><tr><td>整数</td><td>byte</td><td style="text-align:left">-128~127</td><td style="text-align:center">1</td></tr><tr><td></td><td>short</td><td style="text-align:left">-32768~32767</td><td style="text-align:center">2</td></tr><tr><td></td><td>int <strong>(默认)</strong></td><td style="text-align:left">-2147483648~2147483647 <strong>(10位数)</strong></td><td style="text-align:center">4</td></tr><tr><td></td><td>long</td><td style="text-align:left">-9223372036854775808 ~ 9223372036854775807 <strong>(19位数)</strong></td><td style="text-align:center">8</td></tr><tr><td>浮点数</td><td>float</td><td style="text-align:left">1.401298e-45到3.402823e+38**(38位数)**</td><td style="text-align:center">4</td></tr><tr><td></td><td>double <strong>(默认)</strong></td><td style="text-align:left">4.9000000e-324 到1.797693e+308**(308位数)**</td><td style="text-align:center">8</td></tr><tr><td>字符</td><td>char</td><td style="text-align:left">0-65535</td><td style="text-align:center">2</td></tr><tr><td>布尔</td><td>boolean</td><td style="text-align:left">true，false</td><td style="text-align:center">1</td></tr></tbody></table><p>说明：</p><ul><li>e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。</li><li>在java中整数默认是int类型</li><li>浮点数默认是double类型。</li><li>字符在底层都会跟一个数字产生一个一一对应的关系。这个关系可以在ASCII码表中查询</li></ul><h2 id="day02-4">day02</h2><h3 id="一-Java基础语法-2">一.Java基础语法</h3><h4 id="1-变量-2">1.变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>变量的概念</span><br><span class="line">变量就是内存中的存储空间，空间中记录着经常发生改变的数据</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>变量的作用</span><br><span class="line">用于在内存中保存数据；今后要操作的数据，如果是经常发生改变的， 就应该用变量进行维护</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>变量的定义格式</span><br><span class="line">数据类型 变量名 = 数据值;</span><br><span class="line"></span><br><span class="line">- 数据类型：为空间中存储的数据，加入类型【限制】，可以限定整数.小数或者其他。</span><br><span class="line">- 变量名：自己要为空间起的名字。</span><br><span class="line">- 数据值：空间中要存储的数值</span><br></pre></td></tr></table></figure><h4 id="2-键盘录入-2">2.键盘录入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>什么是Scanner以及使用Scanner的目的</span><br><span class="line">Java已经写好了一个类，叫做Scanner，用于获取用户的输入的内容。因为是Java已经写好了，我们直接拿过来用就可以了。目的：增加程序的灵活性，不需要再次编译，直接运行，在运行过程中输入数据</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>使用步骤</span><br><span class="line"><span class="number">1.</span>导包。导包的语句需要定义在类的上面。相当于告诉虚拟机Scanner类在哪里</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner; </span><br><span class="line"><span class="number">2.</span>创建Scanner对象。相当于给虚拟机打个招呼，我要用这个类了。</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">// 创建Scanner对象，sc表示变量名，其他均不可变</span></span><br><span class="line"><span class="number">3.</span>定义变量，接收数据。才是真正干活的代码<span class="comment">//增加友情提示</span></span><br></pre></td></tr></table></figure><h4 id="3-标识符">3.标识符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>什么是标识符</span><br><span class="line">标识符是用户编程时使用的名字，用于给类.方法.变量等命名。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>标识符的命名规则</span><br><span class="line">- 由<span class="number">26</span>个大小写字母.数字<span class="number">0</span>-<span class="number">9.</span>下划线“_”.美元符号“$”组成</span><br><span class="line">- 不能以数字开头</span><br><span class="line">- 不能是关键字</span><br><span class="line">- 大小写敏感（区分大小写）</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>标识符的命名规范</span><br><span class="line">包名：全小写</span><br><span class="line">类名 接口名：（大驼峰命名法）多单词构成时 ，所有单词首字母大写</span><br><span class="line">方法 变量名：（小驼峰命名法）多单词构成时，开头单词全小写，第二个单词及之后单词首字母大写</span><br><span class="line">常量名：多单词构成时，所有单词全大写中间用下划线_连接</span><br><span class="line"></span><br><span class="line">编码规范详情见《阿里巴巴java开发手册》</span><br></pre></td></tr></table></figure><h4 id="4-类型转换-隐式转换-2">4.类型转换-隐式转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>类型转换的分类</span><br><span class="line">类型转换分为两种：</span><br><span class="line">- 隐式转换</span><br><span class="line">- 强制转换</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>什么是隐式转换</span><br><span class="line">隐式转换也叫作自动转换，把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量。这种转换方式是自动的，直接书写即可</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">num</span> <span class="operator">=</span> a; <span class="comment">// 将int类型变量a里面的值，直接赋值给double类型</span></span><br><span class="line">System.out.println(num); <span class="comment">// 输出10.0</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>隐式转换的规则</span><br><span class="line">- 取值范围小的数据，和取值范围大的数据进行运算，小的会先提升为大的之后，再进行运算</span><br><span class="line">- 整数默认是<span class="type">int</span>类型，<span class="type">byte</span>.<span class="type">short</span>和<span class="type">char</span>类型数据参与运算均会自动转换为<span class="type">int</span>类型。</span><br><span class="line">- <span class="type">boolean</span>类型不能与其他基本数据类型相互转换。</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/07/uDNHLUz5qMFPXCn.png" alt=""></p><h4 id="5-类型转换-强制转换">5.类型转换-强制转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>什么是强制转换</span><br><span class="line">自动类型提升的逆运算，把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>强转转换的格式</span><br><span class="line">目标数据类型 变量名 = (目标数据类型)值或者变量;</span><br><span class="line"><span class="type">double</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">5.5</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> (<span class="type">int</span>) num1; <span class="comment">// 将double类型的num1强制转换为int类型</span></span><br><span class="line">System.out.println(num2); <span class="comment">// 输出5（小数位直接舍弃）</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>强制转换的细节</span><br><span class="line">强制类型转换有可能会损失精度</span><br><span class="line"><span class="comment">//损失精度:  </span></span><br><span class="line"><span class="type">double</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">12.5</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> (<span class="type">int</span>)num;  <span class="comment">//将double类型的num强制转换为int类型,a = 12（小数位直接舍弃）;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i; <span class="comment">//-128</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//没有损失精度:</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)a; <span class="comment">//b=12;  </span></span><br></pre></td></tr></table></figure><h3 id="二-运算符-2">二.运算符</h3><h4 id="1-算数运算符">1.算数运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 什么叫做运算符</span><br><span class="line">对常量或者变量进行操作的符号</span><br><span class="line"><span class="number">2</span> 什么叫做表达式</span><br><span class="line">用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式。</span><br><span class="line"><span class="number">3</span> 算术运算符有哪些</span><br><span class="line">+-<span class="comment">/*%</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">- /和%的区别：两个数据做除法，/取结果的商，%取结果的余数。</span></span><br><span class="line"><span class="comment">- 整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><h4 id="2-字符的-操作">2.字符的+操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 字符的+操作运算过程</span><br><span class="line">当（<span class="type">byte</span> <span class="type">short</span> <span class="type">char</span> <span class="type">int</span>）在一起运算的时候，都会提升为<span class="type">int</span>之后，再进行运算；<span class="type">char</span>提升为<span class="type">int</span>的过程，就是查找码表中，字符所对应的数值表示形式</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 什么是ASCII码表</span><br><span class="line">ASCII (American Standard Code <span class="keyword">for</span> Information Interchange)：美国信息交换标准代码，是计算机中字节到字符的一套对应关系。通俗讲就是每个字符都有一个对应的数字.常见的<span class="type">char</span>类型数据代表的<span class="type">int</span>值</span><br><span class="line"><span class="string">&#x27;a&#x27;</span>----<span class="number">97</span><span class="string">&#x27;A&#x27;</span>----<span class="number">65</span><span class="string">&#x27;0&#x27;</span>----<span class="number">48</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span> 为什么要有这样的码表</span><br><span class="line">计算机中数据的存储，都是以字节的形式在进行存储，我们不会直接操作繁琐的.不便于记忆的字节</span><br></pre></td></tr></table></figure><h4 id="3-字符串的-操作-2">3.字符串的+操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  字符串是什么数据类型</span><br><span class="line">字符串是引用数据类型</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>  字符串的表现形式</span><br><span class="line">用一对双引号包裹起来的</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>  字符串的+操作是什么意思</span><br><span class="line">当“+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">1</span> + <span class="number">23</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄为:&quot;</span> + <span class="number">23</span>);   </span><br><span class="line">        System.out.println(<span class="number">1</span> + <span class="number">99</span> + <span class="string">&quot;年黑马&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-自增自减运算符-2">5.自增自减运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 自增自减的符号</span><br><span class="line">++ 自增：变量的值加<span class="number">1</span></span><br><span class="line">-- 自减：变量的值减<span class="number">1</span></span><br><span class="line">++和-- 既可以放在变量的后边，也可以放在变量的前边。单独使用的时候， ++和-- 无论是放在变量的前边还是后边，结果是一样的。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 参与操作，在前和在后的区别</span><br><span class="line">如果放在变量的后边，先将该变量原本的值，取出来参与操作，随后再进行自增（++），自减（--）</span><br><span class="line">如果放在变量的前边，先对该变量做自增（++）或者自减（--），然后再拿变量参与操作</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>注意事项</span><br><span class="line">使用自增/自减运算时应注意下面几个问题：</span><br><span class="line">    自增/自减只能作用于变量，不允许对常量.表达式或其他类型的变量进行操作。常见的错误是试图将自增或自减运算符用于非简单变量表达式中。</span><br><span class="line">    自增/自减运算可以用于整数类型 <span class="type">byte</span>.<span class="type">short</span>.<span class="type">int</span>.<span class="type">long</span>，浮点类型 <span class="type">float</span>.<span class="type">double</span>，以及字符串类型 <span class="type">char</span>。 </span><br><span class="line">    在 Java <span class="number">1.5</span> 以上版本中，自增/自减运算可以用于基本类型对应的包装器类 Byte.Short.Integer.Long.Float.Double 和 Character。</span><br></pre></td></tr></table></figure><h4 id="6-赋值运算符">6.赋值运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>赋值运算符的作用</span><br><span class="line">赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>基本赋值运算符有哪些？</span><br><span class="line">符号：=</span><br><span class="line">作用：赋值</span><br><span class="line">说明：将等号右边的数据值赋值给等号左边的变量（a = <span class="number">10</span>; 将<span class="number">10</span>赋值给a变量）</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>扩展赋值运算符有哪些</span><br></pre></td></tr></table></figure><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>+=</td><td>加后赋值</td><td>a+=b，将a+b的值给a</td></tr><tr><td>-=</td><td>减后赋值</td><td>a-=b，将a-b的值给a</td></tr><tr><td>*=</td><td>乘后赋值</td><td>a*=b，将a×b的值给a</td></tr><tr><td>/=</td><td>除后赋值</td><td>a/=b，将a÷b的商给a</td></tr><tr><td>%=</td><td>取余后赋值</td><td>a%=b，将a÷b的余数给a</td></tr></tbody></table><p>注意事项：扩展的赋值运算符隐含了强制类型转换。</p><h4 id="7-关系运算符（比较运算符）">7.关系运算符（比较运算符）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1 关系运算符分类</span><br><span class="line">关系运算符有6种关系，分别为小于.小于等于.大于.等于.大于等于.不等于</span><br><span class="line"></span><br><span class="line">2 关系运算符的结果是什么</span><br><span class="line">关系运算符的结果都是boolean类型，要么是true，要么是false。</span><br><span class="line"></span><br><span class="line">3 =和==的区别</span><br><span class="line">=赋值运算符</span><br><span class="line">==比较运算符</span><br><span class="line">    比较基本数据类型，比较的是数据值本身</span><br><span class="line">    比较引用数据类型，比较的是地址值(后续学习)</span><br></pre></td></tr></table></figure><h4 id="8-逻辑运算符">8.逻辑运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>逻辑运算符的概念</span><br><span class="line">- 理解层面：逻辑运算符，可以用来整合多个条件，为一段整体的逻辑</span><br><span class="line">- 代码层面：连接布尔类型的表达式， 或者是值</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>逻辑运算符的分类</span><br><span class="line">&amp;逻辑与  |逻辑或  ^逻辑异或  !逻辑非</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>逻辑运算符的作用</span><br><span class="line">用于（整合）多个比较表达式的条件，最终得到的结果是<span class="type">boolean</span>类型的<span class="literal">true</span>或<span class="literal">false</span>。</span><br><span class="line">其实就是用来连接关系表达式的运算符（也可以直接连接布尔类型的常量或者变量）</span><br></pre></td></tr></table></figure><h4 id="9-短路逻辑运算符">9.短路逻辑运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>分类</span><br><span class="line">&amp;&amp;短路与  ||短路或</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>作用</span><br><span class="line">在逻辑与运算中，只要有一个表达式的值为<span class="literal">false</span>，那么结果就可以判定为<span class="literal">false</span>了，没有必要将所有表达式的值都计算出来，短路与操作就有这样的效果，可以提高效率。同理在逻辑或运算中，一旦发现值为<span class="literal">true</span>，右边的表达式将不再参与运算</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>计算规则</span><br><span class="line">- 逻辑与&amp;，无论左边真假，右边都要执行。</span><br><span class="line">- 短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。</span><br><span class="line">- 逻辑或|，无论左边真假，右边都要执行。</span><br><span class="line">- 短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。</span><br></pre></td></tr></table></figure><h4 id="10-三元运算符">10.三元运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>格式</span><br><span class="line">关系表达式 ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>执行流程</span><br><span class="line">问号前面的位置是判断的条件，判断结果为<span class="type">boolean</span>型。</span><br><span class="line">为<span class="literal">true</span>时调用表达式<span class="number">1</span>，为<span class="literal">false</span>时调用表达式<span class="number">2</span>。</span><br><span class="line">其逻辑为：如果条件表达式成立或者满足则执行表达式<span class="number">1</span>，否则执行第二个。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>示例代码</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a &gt; b ? a : b; <span class="comment">// 判断 a&gt;b 是否为真，如果为真取a的值，如果为假，取b的值</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>注意事项</span><br><span class="line"> <span class="number">1.</span>表达式<span class="number">1</span>和<span class="number">2</span>要有明确的计算结果,不能写输出语句</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> num1 &gt; num2 ? System.out.println(num1) : System.out.println(num);</span><br><span class="line">        <span class="comment">//大错特错</span></span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span>三元运算符的运算结果不能直接摆在那里,要么定义变量接收,要么直接打印输出</span><br><span class="line">        num1 &gt; num2 ? num1 : num2;<span class="comment">//错误的</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> num1 &gt; num2 ? num1 : num2;</span><br><span class="line">        可以直接打印(单纯展示数据)</span><br><span class="line">        System.out.println(num1 &gt; num2 ? num1 : num2);</span><br><span class="line"></span><br><span class="line">    <span class="number">3.</span>表达式<span class="number">1</span>和<span class="number">2</span> 结果要有一个统一的类型</span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span> &gt; <span class="number">5</span> ? <span class="number">2</span> : <span class="number">1.0</span>; 提升，隐式转换</span><br><span class="line"></span><br><span class="line">        ???=<span class="number">10</span> &gt; <span class="number">5</span> ? <span class="string">&quot;2&quot;</span> : <span class="number">1.0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="number">4.</span>三元运算符可以嵌套使用:</span><br><span class="line">        <span class="type">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line">        String result=a&gt;b?<span class="string">&quot;a大&quot;</span>:<span class="string">&quot;b大&quot;</span>;</span><br><span class="line">        如果a和b相等嵌套一下</span><br><span class="line">        String result=a&gt;b?<span class="string">&quot;a大&quot;</span>:(a==b?<span class="string">&quot;相等&quot;</span>:<span class="string">&quot;b大&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="day03-4">day03</h2><h3 id="二、流程控制语句-2">二、流程控制语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>顺序结构</span><br><span class="line">    System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;执行代码1&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;执行代码2&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;执行代码3&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    <span class="comment">//从上往下依次执行</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>分支结构-<span class="keyword">if</span></span><br><span class="line">    <span class="title function_">if</span> <span class="params">(关系表达式)</span> &#123;</span><br><span class="line">        语句体;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">        语句体<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        语句体<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">        语句体<span class="number">2</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    …</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>分支结构-<span class="keyword">switch</span></span><br><span class="line">    <span class="title function_">switch</span> <span class="params">(表达式)</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            语句体<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            语句体<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            语句体n+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    - 表达式：（将要匹配的值） 取值为<span class="type">byte</span>、<span class="type">short</span>、<span class="type">int</span>、<span class="type">char</span>，JDK5以后可以是枚举，JDK7以后可以是String。</span><br><span class="line">    - <span class="keyword">case</span>：后面跟的是要和表达式进行比较的值 （被匹配的值）。</span><br><span class="line">    - <span class="keyword">break</span>：表示中断，结束的意思，用来结束<span class="keyword">switch</span>语句。</span><br><span class="line">    - <span class="keyword">default</span>：表示所有情况都不匹配的时候，就执行该处的内容，和<span class="keyword">if</span>语句的<span class="keyword">else</span>相似。</span><br><span class="line"></span><br><span class="line">    执行流程：</span><br><span class="line">    ① 首先计算出表达式的值 </span><br><span class="line">    ② 其次，和<span class="keyword">case</span>依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到<span class="keyword">break</span>就会结 束。 </span><br><span class="line">    ③ 最后，如果所有的<span class="keyword">case</span>都和表达式的值不匹配，就会执行<span class="keyword">default</span>语句体部分，然后程序结束掉。 </span><br><span class="line"></span><br><span class="line">注意事项：</span><br><span class="line">- <span class="keyword">case</span>给出的值不允许重复</span><br><span class="line">- <span class="keyword">case</span>后面的值只能是常量，不能是变量</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">switch</span>语句<span class="keyword">case</span>穿透</span><br><span class="line">    <span class="number">1</span>、<span class="keyword">case</span>穿透产生的原因</span><br><span class="line">在<span class="keyword">switch</span>语句中，如果<span class="keyword">case</span>控制的语句体后面不写<span class="keyword">break</span>，将出现穿透现象</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>、<span class="keyword">case</span>穿透产生的现象</span><br><span class="line">    当开始<span class="keyword">case</span>穿透，后续的<span class="keyword">case</span>就不会具有匹配效果，内部的语句都会执行，直到遇见<span class="keyword">break</span>，或者将整体<span class="keyword">switch</span>语句执行完毕，才会结束</span><br><span class="line">    </span><br><span class="line">    <span class="number">3</span>、<span class="keyword">case</span>穿透的应用场景</span><br><span class="line">    当发现<span class="keyword">switch</span>语句中，多个<span class="keyword">case</span>给出的语句体出现了重复的，就可以考虑使用<span class="keyword">case</span>穿透来优化代码</span><br></pre></td></tr></table></figure><h3 id="四、位移运算符">四、位移运算符</h3><h4 id="1、分类">1、分类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">位移运算符的分类</span><br><span class="line">&lt;&lt;: 左移            规则:让操作数乘以<span class="number">2</span>的n次幂  n是移动的位数</span><br><span class="line">最高效的计算 <span class="number">2</span>*<span class="number">8</span></span><br><span class="line">        <span class="number">2</span>&lt;&lt;<span class="number">3</span>  或者 <span class="number">8</span>&lt;&lt;<span class="number">1</span> </span><br><span class="line">    &gt;&gt;: 右移          规则:让操作数除以<span class="number">2</span>的n次幂  n是移动的位数</span><br><span class="line">    <span class="type">int</span> a=<span class="number">32</span>&gt;&gt;<span class="number">2</span>; <span class="comment">//操作数  32/2^2 =32/4=8</span></span><br></pre></td></tr></table></figure><h2 id="day04-4">day04</h2><h3 id="一、循环-2">一、循环</h3><h4 id="1、for循环-2">1、for循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、循环的概述</span><br><span class="line">循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、Java中循环的分类</span><br><span class="line">    - <span class="keyword">for</span>循环</span><br><span class="line">    - <span class="keyword">while</span>循环</span><br><span class="line">    - <span class="keyword">do</span>...<span class="keyword">while</span>循环</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、<span class="keyword">for</span>循环的格式</span><br><span class="line">    <span class="keyword">for</span> (初始化语句;条件判断语句;条件控制语句) &#123;</span><br><span class="line">        循环体语句;</span><br><span class="line">    &#125;</span><br><span class="line">    - 初始化语句：  用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样</span><br><span class="line">    - 条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去</span><br><span class="line">    - 循环体语句：  用于表示循环反复执行的内容，简单说就是循环反复执行的事情</span><br><span class="line">    - 条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去</span><br><span class="line">    </span><br><span class="line"><span class="number">4</span>、<span class="keyword">for</span>循环的执行流程</span><br><span class="line">    ①执行初始化语句</span><br><span class="line">    ②执行条件判断语句，看其结果是<span class="literal">true</span>还是<span class="literal">false</span></span><br><span class="line">    ​ 如果是<span class="literal">false</span>，循环结束</span><br><span class="line">    ​ 如果是<span class="literal">true</span>，继续执行</span><br><span class="line">    ③执行循环体语句</span><br><span class="line">    ④执行条件控制语句</span><br><span class="line">    ⑤回到②继续</span><br><span class="line">    </span><br><span class="line">    注意事项：</span><br><span class="line">    <span class="number">1.</span><span class="keyword">for</span>循环初始化语句定义变量的作用范围：定义的()以及&#123;&#125;内,出了这个范围就失效</span><br><span class="line">    <span class="number">2.</span>循环 &#123; &#125; 中定义的变量，在每一轮循环结束后，都会从内存中释放</span><br><span class="line">    <span class="number">3.</span>循环 ( ) 中定义的变量，在整个循环结束后，都会从内存中释放</span><br></pre></td></tr></table></figure><h4 id="7、while循环">7、while循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、格式</span><br><span class="line">    初始化语句;</span><br><span class="line">    <span class="keyword">while</span> (条件判断语句) &#123;</span><br><span class="line">        循环体语句;</span><br><span class="line">        条件控制语句;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、执行流程</span><br><span class="line">    ①执行初始化语句</span><br><span class="line">    ②执行条件判断语句，看其结果是<span class="literal">true</span>还是<span class="literal">false</span></span><br><span class="line">    ​ 如果是<span class="literal">false</span>，循环结束</span><br><span class="line">    ​ 如果是<span class="literal">true</span>，继续执行</span><br><span class="line">    ③执行循环体语句</span><br><span class="line">    ④执行条件控制语句</span><br><span class="line">    ⑤回到②继续</span><br><span class="line">   示例代码： </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileDemo</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="comment">//需求：在控制台输出3次 黑马程序员</span></span><br><span class="line">            <span class="comment">//while循环实现</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;=<span class="number">3</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;黑马程序员&quot;</span>);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">注意事项：</span><br><span class="line">- <span class="keyword">while</span>循环初始化语句定义变量的作用范围</span><br><span class="line">- <span class="keyword">while</span>循环的初始化语句定义在循环的外面；循环结束之后，变量仍然能够被使用</span><br><span class="line">- 不要丢失条件控制语句,否则可能会造成死循环</span><br></pre></td></tr></table></figure><h4 id="9、do…while循环">9、do…while循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="keyword">do</span>...<span class="keyword">while</span>格式</span><br><span class="line">    初始化语句;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        循环体语句;</span><br><span class="line">        条件控制语句;</span><br><span class="line">    &#125;<span class="keyword">while</span>(条件判断语句);</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、<span class="keyword">do</span>...<span class="keyword">while</span>执行流程</span><br><span class="line">    ① 执行初始化语句</span><br><span class="line">    ② 执行循环体语句</span><br><span class="line">    ③ 执行条件控制语句</span><br><span class="line">    ④ 执行条件判断语句，看其结果是<span class="literal">true</span>还是<span class="literal">false</span></span><br><span class="line">        如果是<span class="literal">false</span>，循环结束；如果是<span class="literal">true</span>，继续执行</span><br><span class="line">    ⑤ 回到②继续</span><br><span class="line"></span><br><span class="line">示例代码：</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileDemo</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="comment">//do...while循环实现</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">while</span>(j&gt;=<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">3</span>、<span class="keyword">do</span>...<span class="keyword">while</span>特点  </span><br><span class="line">无论条件判断语句结果是否为<span class="literal">true</span>，都要执行一次循环体</span><br></pre></td></tr></table></figure><h4 id="10、三种循环的区别">10、三种循环的区别</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、三种循环的区别</span><br><span class="line">    <span class="keyword">for</span>循环和<span class="keyword">while</span>循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行） </span><br><span class="line">    <span class="keyword">do</span>...<span class="keyword">while</span>循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断）</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>、<span class="keyword">for</span>和<span class="keyword">while</span>的区别以及使用场景</span><br><span class="line">    区别：</span><br><span class="line">        条件控制语句所控制的自增变量，因为归属<span class="keyword">for</span>循环的语法结构中，在<span class="keyword">for</span>循环结束后，就不能再次被访问到了 </span><br><span class="line">        条件控制语句所控制的自增变量，对于<span class="keyword">while</span>循环来说不归属其语法结构中，在<span class="keyword">while</span>循环结束后，该变量还可以继续使用 </span><br><span class="line">    使用场景：</span><br><span class="line">    - <span class="keyword">for</span>：明确循环次数，使用<span class="keyword">for</span></span><br><span class="line">    - <span class="keyword">while</span>：不明确循环次数，但是知道什么时候结束</span><br><span class="line">    - <span class="keyword">do</span>...<span class="keyword">while</span>：基本不用</span><br><span class="line">    注意：</span><br><span class="line">    手动改写 <span class="keyword">for</span> 循环格式后，将不存在区别，<span class="keyword">for</span> 循环能够实现的 <span class="keyword">while</span> 都能实现，反之也一样</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; <span class="number">4</span>; i++;) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);   <span class="comment">// 正常使用</span></span><br></pre></td></tr></table></figure><h4 id="11、死循环">11、死循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、死循环的格式</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;&#125;</span><br><span class="line">    <span class="keyword">do</span>&#123;&#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">注意：<span class="keyword">while</span>的死循环格式是最常用的</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、死循环的注意点</span><br><span class="line">死循环单独使用没有意义（不能单独书写在那里），需要配合跳转控制语句来使用（当达到某种条件的时候去结束死循环） </span><br></pre></td></tr></table></figure><h4 id="12、跳转控制语句">12、跳转控制语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、概述</span><br><span class="line">跳转控制语句是用于在循环的过程中，控制循环运行的。</span><br><span class="line"><span class="number">2</span>、分类</span><br><span class="line">    <span class="keyword">continue</span> 【跳过】某次循环体内容的执行，继续下一次的执行</span><br><span class="line"><span class="keyword">break</span> 【终止】循环体内容的执行，也就是说结束当前的整个循环</span><br><span class="line">注意：<span class="keyword">break</span>可以用于分支语句<span class="keyword">switch</span>中，执行对应的<span class="keyword">case</span>匹配项之后用来结束<span class="keyword">switch</span>语句</span><br><span class="line">示例代码：</span><br><span class="line">    <span class="comment">// continue</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">24</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i + <span class="string">&quot;层到了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// break</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>; i &lt;= <span class="number">80</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">60</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i + <span class="string">&quot;层到了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="14、Random随机数">14、Random随机数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>Random随机数使用步骤</span><br><span class="line">    <span class="keyword">import</span> java.util.Random;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(); <span class="comment">//r 是变量名，可以变，其他的都不允许变</span></span><br><span class="line">    <span class="comment">//小扩号中的数字代表一个范围,  如果传入10;生成的就是10以内的随机数, 也就是 0-9</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> r.nextInt(<span class="number">10</span>); <span class="comment">//获取数据的范围：[0,10) 包括0,不包括10</span></span><br><span class="line">    r.nextInt(<span class="number">61</span>) <span class="number">0</span>-<span class="number">60</span></span><br><span class="line">    </span><br><span class="line">    注意事项：</span><br><span class="line">    要取<span class="number">12</span>-<span class="number">60</span>：r.nextInt(<span class="number">49</span>)+<span class="number">12</span> 最小值：<span class="number">12</span> 最大值+<span class="number">12</span> = <span class="number">60</span> 最大值为<span class="number">48</span></span><br><span class="line">    最小值：从<span class="number">0</span>开始</span><br><span class="line">    小括号后面需要加的数：最小值是多少，加的就是多少，小括号后面加的就是最小值</span><br><span class="line">    小括号里面：最大值 - 最小值 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    示例：</span><br><span class="line">    <span class="number">15</span> - <span class="number">80</span></span><br><span class="line">    r.nextInt(<span class="number">80</span> - <span class="number">15</span> + <span class="number">1</span>) + <span class="number">15</span> ---&gt;r.nextInt(<span class="number">66</span>) + <span class="number">15</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0</span> - <span class="number">20</span></span><br><span class="line">    r.nextInt(<span class="number">21</span>);</span><br></pre></td></tr></table></figure><h2 id="day05-4">day05</h2><h3 id="一-数组-2">一.数组</h3><h4 id="1-数组介绍">1.数组介绍</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>数组的基本概念</span><br><span class="line">数组（array）是一种容器，用来存储（同种数据类型）的多个值。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>使用场景</span><br><span class="line">    要操作的数据，是同一组数据，就可以使用数组容器进行存储</span><br><span class="line">    注意：数组容器在存储数据的时候，需要结合数据类型考虑。</span><br><span class="line">    建议：容器的类型，和存储的数据类型保持一致</span><br></pre></td></tr></table></figure><h4 id="2-数组的定义格式">2.数组的定义格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>数组的定义格式</span><br><span class="line">    第一种格式</span><br><span class="line">    数据类型[] 数组名</span><br><span class="line">    示例：</span><br><span class="line">        <span class="type">int</span>[] arr;        </span><br><span class="line">        <span class="type">double</span>[] arr;      </span><br><span class="line">        <span class="type">char</span>[] arr;</span><br><span class="line"></span><br><span class="line">    第二种格式</span><br><span class="line">    数据类型 数组名[]</span><br><span class="line">    示例：</span><br><span class="line">        <span class="type">int</span> arr[];</span><br><span class="line">        <span class="type">double</span> arr[];</span><br><span class="line">        <span class="type">char</span> arr[];</span><br><span class="line">注意：</span><br><span class="line">Java中的数组必须先初始化，然后才能使用，数组仅仅定义，如果不完成赋值（初始化），是不能使用的；如果需要使用还需要赋值</span><br><span class="line">    例如：数据类型[] 数组名 = 创建数组容器</span><br><span class="line">    初始化：就是在内存中，为数组容器开辟空间，并将数据存入容器中的过程</span><br></pre></td></tr></table></figure><h4 id="3-数组的动态初始化">3.数组的动态初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>动态初始化概念</span><br><span class="line">数组动态初始化就是只给定数组的长度，由系统给出默认初始化值</span><br><span class="line"><span class="number">2.</span>动态初始化格式</span><br><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[数组长度];</span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><h4 id="4-数组元素访问">4.数组元素访问</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 什么是数组索引</span><br><span class="line">    每一个存储到数组的元素，都会自动的拥有一个编号，从<span class="number">0</span>开始，这个自动编号称为数组索引（index），可以通过数组的索引访问到数组中的元素。 </span><br><span class="line">索引特征：</span><br><span class="line">特征①：索引从<span class="number">0</span>开始 </span><br><span class="line">特征②：索引是连续的 </span><br><span class="line">特征③：索引逐一增加，每次加<span class="number">1</span> </span><br><span class="line"></span><br><span class="line">    索引作用：</span><br><span class="line">    访问数组容器中的空间位置</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 访问数组元素的格式是什么</span><br><span class="line">    数组名[索引];</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line">    <span class="comment">// 需求1: 将元素44取出来打印在控制台</span></span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">    <span class="comment">// 需求2: 修改0号元素位置元素为66, 修改后取出并打印.</span></span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">66</span>;</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> 数组中元素的默认值分别是什么</span><br><span class="line">动态初始化:由咱们自己给定数组的长度,系统JVM根据你的数据类型和长度给你默认的初始化值</span><br><span class="line">数组中数据类型对应的默认初始化值:</span><br><span class="line">基本数据类型：</span><br><span class="line">        整数型:<span class="number">0</span></span><br><span class="line">        浮点型:<span class="number">0.0</span></span><br><span class="line">        布尔型:<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        引用数据类型:</span><br><span class="line">        String  <span class="literal">null</span></span><br><span class="line">        例子: </span><br><span class="line">        String[] s=<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我要进来喽&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="5-Java内存分配-一个数组内存图">5.Java内存分配-一个数组内存图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>Java内存分配</span><br><span class="line">    Java 程序在运行时，需要在内存中分配空间。为了提高运算效率，就对空间进行了不同区域的划分。每一片区域都有特定的处理数据方式和内存管理方式</span><br><span class="line">    目前我们只需要记住两个内存，分别是：栈内存和堆内存</span><br></pre></td></tr></table></figure><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td>寄存器</td><td>给CPU使用，和我们开发无关。</td></tr><tr><td>本地方法栈</td><td>JVM在使用操作系统功能的时候使用，和我们开发无关。</td></tr><tr><td>方法区</td><td>存储可以运行的class文件。</td></tr><tr><td>堆内存</td><td>存储对象或者数组，new来创建的，都存储在堆内存。</td></tr><tr><td>方法栈</td><td>方法运行时使用的内存，比如main方法运行，进入方法栈中执行。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>一个数组的内存图</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/06/mT9HPyfQgz6iVBv.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>两个数组内存图</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/06/SHyGvfmXcCxQ5OF.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line">每<span class="keyword">new</span>一次，就会在堆中开辟一个新的空间，得到一个新的空间会有一个新的地址，地址之间是互不干扰的，也不会重复。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>多个数组指向相同内存图</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/06/XCwvoiNJqPGxMRO.png" alt=""></p><h4 id="8-数组的静态初始化">8.数组的静态初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 静态初始化的概念  </span><br><span class="line">    初始化时，就可以指定数组要存储的元素，系统还会自动计算出该数组长度</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 静态初始化的格式</span><br><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,...&#125;;</span><br><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>,...&#125;;</span><br><span class="line"></span><br><span class="line">示例代码：</span><br><span class="line">    <span class="comment">// 数据类型[] 数组名 = new 数据类型[]&#123;元素1, 元素2, 元素2...&#125;;</span></span><br><span class="line">    <span class="comment">// 创建了一个int类型的数组, 数组名叫arr, 数组中存储了 11 22 33 这个三个数据.</span></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;;</span><br><span class="line">    System.out.println(arr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据类型[] 数组名 = &#123;元素1, 元素2, 元素2...&#125;;</span></span><br><span class="line">    <span class="type">double</span>[] dArr = &#123;<span class="number">12.3</span>, <span class="number">22.3</span>, <span class="number">33.3</span>&#125;;</span><br><span class="line">    System.out.println(dArr);</span><br><span class="line"><span class="number">3</span> 静态初始化注意点</span><br><span class="line">    区别：</span><br><span class="line">    - 动态初始化：手动指定数组长度，由系统给出默认初始化值</span><br><span class="line">    - 静态初始化：手动指定数组元素，系统会根据元素个数，计算出数组的长度</span><br><span class="line"></span><br><span class="line">    使用场景：</span><br><span class="line">    - 动态初始化：只明确元素个数，不明确具体数值，推荐使用动态初始化</span><br><span class="line">      例如：使用数组容器来存储<span class="number">5</span>个[<span class="number">8</span>-<span class="number">20</span>]的随机数</span><br><span class="line">    - 静态初始化：需求中已经明确了要操作的具体数据，直接静态初始化即可</span><br><span class="line">      例如：存储学生的成绩</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="9-数组操作的两个常见问题">9.数组操作的两个常见问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>什么是索引越界ArrayIndexOutOfBoundsException</span><br><span class="line">原因：当访问了数组中不存在的索引，就会引发索引越界异常</span><br><span class="line">示例代码：</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;;</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">10</span>]);<span class="comment">//当访问了数组中不存在的索引，就会引发索引越界异常。</span></span><br><span class="line"></span><br><span class="line">    如何避免：牢记索引的取值范围</span><br><span class="line">    - 最小索引：<span class="number">0</span></span><br><span class="line">    - 最大索引：数组长度-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>什么是空指针异常NullPointerException</span><br><span class="line">原因：当引用数据类型变量被赋值为<span class="literal">null</span>之后，地址的指向被切断，还继续访问堆内存数据，就会引发空指针异常</span><br><span class="line">示例代码：</span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">arr = <span class="literal">null</span>;</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">如何避免：需要对数组的地址是否为<span class="literal">null</span>进行合法的判断</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="10-数组遍历">10.数组遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>什么是数组遍历以及目的</span><br><span class="line">遍历：将数组中所有的内容取出来，取出来之后可以（打印，求和，判断..）</span><br><span class="line">目的：每循环一次，得到一个索引值，根据索引值可以获取到该索引对应的元素</span><br><span class="line">    </span><br><span class="line">    <span class="number">10.3</span> 注意事项</span><br><span class="line">    - 遍历指的是取出数据的过程，不要局限的理解为，遍历就是打印！ </span><br><span class="line">    - 数组的长度属性：数组名.length（arr.length）</span><br><span class="line">    - IDEA快速生成遍历的方式：数组名 + fori 回车</span><br><span class="line">示例代码：</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">33</span>, <span class="number">44</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-二维数组-2">二.二维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>什么是二维数组</span><br><span class="line">    二维数组也是一种容器，该容器存储的都是一维数组容器。</span><br><span class="line">    一维数组可以看成是装数据的小箱子。然后我们把小箱子放到一个大箱子当中，这个大箱子就是二维数组</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>二维数组动态初始化</span><br><span class="line">数据类型[][] 变量名 = <span class="keyword">new</span> 数据类型[m][n];</span><br><span class="line">    m表示这个二维数组，可以存放多少个一维数组</span><br><span class="line">    n表示每一个一维数组，可以存放多少个元素</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>二维数组访问格式</span><br><span class="line">数组名[m][n]</span><br><span class="line"></span><br><span class="line">数组名：就是二维数组的名字。</span><br><span class="line">m：表示二维数组中第几个一维数组。（从<span class="number">0</span>索引开始计算）</span><br><span class="line">n：表示一维数组中第几个元素。（从<span class="number">0</span>索引开始计算）</span><br><span class="line"></span><br><span class="line">代码示例：</span><br><span class="line">    <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];<span class="comment">//该数组可以存放3个一维数组，每个一维数组中可以存放3个int类型元素</span></span><br><span class="line">    <span class="comment">// 向二维数组中存储元素</span></span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">22</span>;</span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">33</span>;</span><br><span class="line">    </span><br><span class="line">    arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">    arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">22</span>;</span><br><span class="line">    arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">33</span>;</span><br><span class="line">    </span><br><span class="line">    arr[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">    arr[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">22</span>;</span><br><span class="line">    arr[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">33</span>;</span><br><span class="line">    <span class="comment">//遍历二维数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">            System.out.println(arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">核心点：二维数组实际存储的是一维数组的地址值。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>二维数组访问细节</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/06/SFKROibk6Wz7tfN.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4.</span>二维数组静态初始化</span><br><span class="line"><span class="number">1.</span> 静态初始化格式</span><br><span class="line">        完整格式 : </span><br><span class="line">        数据类型 变量名 = <span class="keyword">new</span> 数据类型&#123; &#123;元素<span class="number">1</span>, 元素<span class="number">2.</span>..&#125; , &#123;元素<span class="number">1</span>, 元素<span class="number">2.</span>..&#125; </span><br><span class="line">    简化格式 : </span><br><span class="line">        数据类型 变量名 = &#123; &#123;元素<span class="number">1</span>, 元素<span class="number">2.</span>..&#125; , &#123;元素<span class="number">1</span>, 元素<span class="number">2.</span>..&#125; ...&#125;;</span><br><span class="line"></span><br><span class="line">代码示例：</span><br><span class="line"><span class="comment">//完整格式</span></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">11</span>,<span class="number">22</span>&#125;,&#123;<span class="number">33</span>,<span class="number">44</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//简写格式：</span></span><br><span class="line"><span class="type">int</span>[][] arr = &#123;&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;, &#123;<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/06/ZuhyxSLaYqgd1NV.png" alt=""></p><p><img src="https://s2.loli.net/2022/07/06/2O85zsXnBia6DRv.png" alt=""></p><h2 id="day06-3">day06</h2><h3 id="一-方法-2">一.方法</h3><h4 id="1-方法概述">1.方法概述</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 什么是方法</span><br><span class="line">方法就是一段具有独立功能的代码块，不调用就不执行。方法也叫函数</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 为什么要有方法</span><br><span class="line">- 提高代码的可阅读性</span><br><span class="line">- 提高代码的复用性</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>方法使用说明</span><br><span class="line">- 方法必须先创建才可以使用，该过程称为方法定义</span><br><span class="line">- 方法创建后并不是直接运行的，需要手动使用后才执行，该过程称为方法调用</span><br></pre></td></tr></table></figure><h4 id="2-方法的定义和调用">2.方法的定义和调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 方法的定义格式</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 ( ) &#123;</span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//范例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span> 方法调用格式</span><br><span class="line">方法名();</span><br><span class="line">例如：eat( );</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>注意事项</span><br><span class="line">- 方法的定义位置：类中其他方法外</span><br><span class="line">- 方法和方法之间是平级关系，不能够嵌套定义</span><br><span class="line">    - 方法必须先定义后调用，否则程序报错</span><br><span class="line">- 方法的编写顺序和执行顺序无关,  要想梳理执行顺序，就看调用顺序</span><br></pre></td></tr></table></figure><h4 id="3-方法的调用过程-2">3.方法的调用过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 方法未被调用时，存储的位置</span><br><span class="line">- 方法没有被调用的时候，都在方法区中的字节码文件(.class)中存储</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 方法被调用时，进入的位置</span><br><span class="line">- 方法被调用的时候，需要进入到栈内存中运行</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> 栈的特点</span><br><span class="line">- 栈的特点：先进后出</span><br></pre></td></tr></table></figure><h4 id="5-带参数方法的定义和调用">5.带参数方法的定义和调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>带参数方法的定义格式是什么</span><br><span class="line">    <span class="comment">//格式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名(参数) &#123; … … &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单个参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名(数据类型 变量名) &#123; … … &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> number)</span> &#123; … … &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多个参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名(数据类型 变量名<span class="number">1</span>，数据类型 变量名<span class="number">2</span>，……) &#123; … … &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> number1，<span class="type">int</span> number2)</span> &#123; … … &#125;</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">- 方法定义时，参数中的数据类型与变量名都不能缺少，缺少任意一个程序将报错 </span><br><span class="line">- 方法定义时，多个参数之间使用逗号( ，)分隔</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>如何调用带参数的方法</span><br><span class="line">格式：方法名 (参数);</span><br><span class="line">    格式（单个参数）：方法名 (变量名/常量值);</span><br><span class="line">    范例（单个参数）：method(<span class="number">5</span>); </span><br><span class="line">    格式（多个参数）：方法名 (变量名<span class="number">1</span>/常量值<span class="number">1</span>，变量名<span class="number">2</span>/常量值<span class="number">2</span>);</span><br><span class="line">    范例（多个参数）：getMax(<span class="number">5</span>，<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序将报错</span><br></pre></td></tr></table></figure><h4 id="6-形式参数和实际参数">6.形式参数和实际参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 什么是形参</span><br><span class="line">全称形式参数，是指方法定义中的参数。方法定义的（）里面</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 什么是实参</span><br><span class="line">全称实际参数，方法调用中的参数。方法调用的（）里面</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method(<span class="number">10</span>,<span class="number">3.14</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> a, <span class="type">double</span> b)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实际参数:10 3.14</span></span><br><span class="line">    <span class="comment">//形式参数:int a double b</span></span><br></pre></td></tr></table></figure><h4 id="8-带返回值方法的定义和调用">8.带返回值方法的定义和调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 为什么要有带返回值的方法</span><br><span class="line">我们经常会根据一个方法产出的结果，来去组织另外一段代码逻辑。为了拿到这个方法产生的结果，就需要定义带有返回值的方法</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 带返回值方法的定义格式</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(形式参数表可以有多个)&#123;</span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">        <span class="keyword">return</span> 常量值/变量名;</span><br><span class="line">    &#125;</span><br><span class="line">    示例代码：</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEvenNumber</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    注意：</span><br><span class="line">    方法定义时<span class="keyword">return</span>后面的返回值与方法定义上的数据类型要匹配，否则程序将报错</span><br><span class="line">    </span><br><span class="line"><span class="number">3</span> 带返回值方法的调用</span><br><span class="line">    - 输出调用，直接将返回值进行打印输出</span><br><span class="line">    <span class="comment">//System.out.println(方法名(实际参数));</span></span><br><span class="line">System.out.println(isEvenNumber(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">- 赋值调用，方法的返回值通常会使用变量接收，否则该返回值将无意义</span><br><span class="line"><span class="comment">//返回值类型 变量名 = 方法名(实际参数);</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> isEvenNumber(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">- 直接调用，很少用</span><br><span class="line"><span class="comment">//方法名(实际参数)</span></span><br><span class="line">isEvenNumber(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h4 id="10-方法通用格式">10.方法通用格式</h4><h5 id="10-1-通用格式">10.1 通用格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(参数) &#123;</span><br><span class="line">方法体;</span><br><span class="line"><span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>格式说明：</strong></p><p>**public static：**权限修饰符，先记住，后续会学习其他权限修饰符</p><p><strong>返回值类型：</strong></p><ul><li>有返回值：八种基本数据类型.引用数据类型</li><li>无返回值：void</li></ul><p>**方法名：**见名知意，小驼峰命名法</p><p>**参数：**由数据类型和变量名组成，多个参数之间用逗号隔开</p><p>**方法体：**完成功能的代码块</p><p>**return：**把数据返回给调用者</p><ul><li>有返回值，return后面的数据需要和返回值类型保持一致</li><li>void(无返回值)，省略return不写</li></ul><h5 id="10-2-定义方法时的两个明确">10.2 定义方法时的两个明确</h5><ul><li><p>明确参数：主要是明确参数的类型和数量</p></li><li><p>明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型</p></li></ul><h5 id="10-3-调用方法">10.3 调用方法</h5><ul><li>void类型的方法，直接调用即可</li><li>非void类型的方法，推荐用变量接收调用</li></ul><h4 id="11-方法的注意事项">11.方法的注意事项</h4><h5 id="11-1-注意事项">11.1 注意事项</h5><ul><li>方法需要先定义，后调用</li><li>方法调用时传递的实际参数的个数和数据类型要与方法定义位置的形式参数个数及数据类型一致</li><li>方法是平级关系，不能嵌套定义</li><li>方法的返回值类型为void，表示该方法没有返回值，没有返回值的方法可以省略return语句不写，如果要编写return，后面不能跟具体的数据。</li><li>return语句下面，不能编写代码，因为永远执行不到，属于无效的代码</li></ul><h5 id="11-2-return">11.2 return</h5><ul><li>return ：是一个关键字，表示方法的返回，这个方法执行到return就表示要返回了</li><li>使用范围：在方法体中</li><li>作用：结束方法</li><li>针对于有返回值类型的方法：结束方法并返回具体的数据或者变量</li></ul><p><strong>注意：</strong></p><ul><li>return 关键字后边不应该再有执行语句</li><li>一个方法只能有一个返回值</li><li>如果说是 void，return可写.可不写，写return；后面不能跟具体的数据</li></ul><h4 id="12-方法重载-2">12.方法重载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 什么是方法的重载</span><br><span class="line">在同一个类中，定义了多个同名的方法，但每个方法具有不同的参数类型或参数个数，这些同名的方法，就构成了重载关系</span><br><span class="line">注意：</span><br><span class="line">    - 顺序不同也可以构成重载，但是不建议使用</span><br><span class="line">    - 识别方法之间是否是重载关系，只看方法名和参数，跟返回值无关</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span> 方法重载的特点</span><br><span class="line">不用记忆过多繁琐的方法名字</span><br></pre></td></tr></table></figure><h4 id="14-方法参数传递基本数据类型">14.方法参数传递基本数据类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 形参的改变能否影响实参的值</span><br><span class="line">    基本数据类型：传递的是具体的值。</span><br><span class="line">    对于基本数据类型的参数，形式参数的改变，不影响实际参数的值</span><br></pre></td></tr></table></figure><h4 id="15-方法参数传递引用数据类型">15.方法参数传递引用数据类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 形参的改变能否影响实参的值</span><br><span class="line">引用数据类型：传递的是地址值。</span><br><span class="line">对于引用类型的参数，形式参数的改变，影响实际参数的值</span><br></pre></td></tr></table></figure><h5 id="15-3-参数传递总结">15.3 参数传递总结</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">java的实参如何传递给方法形参?</span><br><span class="line">    java方法中的参数传递只有一种方式: <span class="string">&quot;值传递&quot;</span>,即将实际参数值的副本(复制品)传递给方法的形参接收而实参本身不受影响</span><br><span class="line">   分类:</span><br><span class="line">     <span class="number">1</span> 形参是基本数据类型: 将实参基本数据类型变量的<span class="string">&quot;数据值&quot;</span> 传递给形参</span><br><span class="line">     <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a;</span><br><span class="line">     <span class="number">2</span> 形参是引用数据类型: 将实参引用数据类型变量的<span class="string">&quot;地址值&quot;</span> 传递给形参 </span><br><span class="line">         <span class="type">int</span>[] p = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"> <span class="type">int</span>[] p1 = p;</span><br></pre></td></tr></table></figure><h3 id="二-Debug">二.Debug</h3><h4 id="1-概述">1.概述</h4><p>供程序员使用的程序调试工具，它可以用于<strong>查看程序</strong>的<strong>执行流程</strong>，也可以用于追踪程序执行过程来<strong>调试程序</strong></p><h4 id="2-操作流程">2.操作流程</h4><p>Debug调试，又被称为断点调试，断点其实是一个标记，告诉Debug从标记的地方开始查看</p><h5 id="①-如何加断点">① 如何加断点</h5><ul><li>选择要设置断点的代码行，在行号的区域后面单击鼠标左键即可</li></ul><h5 id="②-如何运行加了断点的程序">② 如何运行加了断点的程序</h5><p>在代码区域右键Debug执行</p><h5 id="③-看哪里">③ 看哪里</h5><ul><li>看Debugger窗口</li><li>看Console窗口</li></ul><h5 id="④-点哪里">④ 点哪里</h5><ul><li>点Step Over (F8)这个箭头，也可以直接按F8</li><li>点Step Into (F7)这个箭头，也可以直接按F7</li><li>点Stop结束</li></ul><h4 id="⑤-如何删除断点">⑤ 如何删除断点</h4><ul><li>选择要删除的断点，单击鼠标左键即可。</li><li>如果是多个断点，可以每一个再点击一次。也可以一次性全部删除。</li></ul><h2 id="day07-4">day07</h2><h3 id="一-面向过程和面向对象的对比。">一. 面向过程和面向对象的对比。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 什么是面向过程</span><br><span class="line">面向过程（pop）：是一种以过程为中心的编程思想，实现功能的每一步，都是自己实现的。</span><br><span class="line">过程的特点：亲力亲为，每一步都是自己去完成,强调的是完成这件事的过程步骤</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 什么是面向对象</span><br><span class="line">面向对象（oop）：是一种以对象为中心的编程思想，通过指挥对象实现具体的功能</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">面向对象思想小结： </span><br><span class="line">    可观存在的任何一种事物，都可以看做为程序中的对象 </span><br><span class="line">    使用面向对象思想可以将复杂的问题简单化 </span><br><span class="line">    将我们从执行者的位置，变成了指挥者</span><br></pre></td></tr></table></figure><h3 id="二-类和对象的关系">二 类和对象的关系</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 类的概念</span><br><span class="line">类是对现实生活中一类具有共同属性和行为的事物的抽象。</span><br><span class="line">【类】是对事物，也就是对象的一种描述，可以将类理解为一张设计图，根据设计图，可以创建出具体存在的事物</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 类的组成</span><br><span class="line">- 属性。该事物的各种特征。例如黑马学生事物的属性：姓名、年龄、毕业院校… </span><br><span class="line">- 行为。该事物存在的功能（能够做的事情）。例如黑马学生事物行为：学习、Java编程开发</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> 类和对象的关系</span><br><span class="line">- 前提 :  Java中想要创建对象，必须要先有类的存在</span><br><span class="line">- 类：是一组相关属性和行为的集合,  将其看做为是对象的设计图</span><br><span class="line">- 对象：根据类(设计图)创建出来的实体</span><br><span class="line">- 关系：类是对象的描述，对象是类的实体</span><br><span class="line">- 依赖关系 :  需要根据类创建对象</span><br><span class="line"> - 数量关系 :  一对多的关系,  根据一个类创建出多个对象</span><br></pre></td></tr></table></figure><h3 id="三-类的定义">三 类的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 类的组成</span><br><span class="line">属性(名词)：在代码中通过成员变量来体现。跟之前定义变量的格式一样, 只不过位置发生了改变, 类中方法外</span><br><span class="line">行为(名词)：在代码中通过成员方法来体现。跟之前定义方法的格式一样, 只不过去掉了<span class="keyword">static</span>关键字</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 类的定义步骤</span><br><span class="line">    <span class="number">1.</span> 定义类</span><br><span class="line">    <span class="number">2.</span> 编写类的成员变量</span><br><span class="line">    <span class="number">3.</span> 编写类的成员方法</span><br><span class="line"></span><br><span class="line">示例代码：</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">注意 : 当类写好了之后，需要在测试类中创建对象再使用</span><br></pre></td></tr></table></figure><h3 id="四-对象的创建和使用">四  对象的创建和使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 如何通过一个类创建一个对象</span><br><span class="line">    类的实例化  创建类的对象 = 类的实例化=实例化类</span><br><span class="line">    落地实现:</span><br><span class="line">       <span class="number">1</span> 创建类设计类的成员。</span><br><span class="line">       <span class="number">2</span> 创建类的对象。</span><br><span class="line">       <span class="number">3</span> 通过对象.属性。或对象.方法调用对象的成员结构。</span><br><span class="line"></span><br><span class="line">创建对象的格式</span><br><span class="line">    类名 对象名 = <span class="keyword">new</span> 类名();</span><br><span class="line">范例：</span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="number">2</span> 对象如何去使用</span><br><span class="line"><span class="number">1.</span>使用对象访问成员变量</span><br><span class="line">        对象名.成员变量名;</span><br><span class="line">范例：p.name</span><br><span class="line">    <span class="number">2.</span>使用对象访问成员方法</span><br><span class="line">        格式：对象名.成员方法名();</span><br><span class="line">范例：p.study();</span><br></pre></td></tr></table></figure><h3 id="六-单个对象的内存图。">六 单个对象的内存图。</h3><p><img src="https://s2.loli.net/2022/07/09/WZheFGipBHT5K6J.png" alt=""></p><h3 id="七-两个对象的内存图。">七 两个对象的内存图。</h3><p><img src="https://s2.loli.net/2022/07/09/zJfWeoHqK8jl93n.png" alt=""></p><h3 id="八-两个引用指向同一个对象的内存图">八  两个引用指向同一个对象的内存图</h3><p><img src="https://s2.loli.net/2022/07/09/HKT3JFYAh9LlX4R.png" alt=""></p><h4 id="垃圾回收">垃圾回收</h4><p><strong>注意：</strong></p><p>当堆内存中，<strong>对象</strong>或<strong>数组</strong>产生的地址，通过任何方式都不能被找到后，就会被判定为内存中的**“垃圾”**</p><p>垃圾会被Java垃圾回收器，空闲的时候自动进行清理</p><p>GC : Garbage Collection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;引用计数算法&quot;</span>  </span><br><span class="line">引用计数是垃圾收集器中的早期策略。在这种方法中，堆中每个对象实例都有一个引用计数。当一个对象被创建时，且将该对象实例分配给一个变量，该变量计数设置为<span class="number">1</span>。当任何其它变量被赋值为这个对象的引用时，计数加<span class="number">1</span>（a = b,则b引用的对象实例的计数器+<span class="number">1</span>），但当一个对象实例的某个引用超过了生命周期或者被设置为一个新值时，对象实例的引用计数器减<span class="number">1</span>。任何引用计数器为<span class="number">0</span>的对象实例可以被当作垃圾收集。当一个对象实例被垃圾收集时，它引用的任何对象实例的引用计数器减<span class="number">1</span>。 </span><br><span class="line">   </span><br><span class="line"><span class="string">&quot;可达性算法&quot;</span></span><br><span class="line">该方法的基本思想是通过一系列的“GC Roots”对象作为起点进行搜索，如果在“GC Roots”和一个对象之间没有可达路径，则称该对象是不可达的，不过要注意的是被判定为不可达的对象不一定就会成为可回收对象。</span><br><span class="line"></span><br><span class="line">一个对象的引用  强引用 软引用  弱引用  虚引用 </span><br></pre></td></tr></table></figure><p><strong>代码练习：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1  第一个实验</span></span><br><span class="line">        <span class="type">int</span>  a=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span>  b=a;</span><br><span class="line">        b++;</span><br><span class="line">        System.out.println(a);  <span class="comment">//打印多少   </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2  实验2</span></span><br><span class="line">        Student s1=<span class="keyword">new</span> <span class="title class_">Student</span>(); <span class="comment">//  </span></span><br><span class="line">        Student s2=s1;</span><br><span class="line">        s2.age++;</span><br><span class="line">        System.out.println(s1.age);  <span class="comment">//现在age是多少？</span></span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="type">int</span> age=<span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=======================================================================</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="comment">// 实验1</span></span><br><span class="line">        <span class="type">int</span> m=<span class="number">10</span>;</span><br><span class="line">        changeInt(m);</span><br><span class="line">        System.out.println(m); <span class="comment">//打印多少  </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//实验2</span></span><br><span class="line">        Student s1=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        changeAge(s1);</span><br><span class="line">        System.out.println(s1.age); <span class="comment">//打印多少。 </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//实验3</span></span><br><span class="line">        Student s2=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        changeStudent(s2); </span><br><span class="line">        System.out.println(s2.age); <span class="comment">//打印多少。  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">changeInt</span><span class="params">(<span class="type">int</span> a)</span>&#123;  <span class="comment">//a=10</span></span><br><span class="line">        a++; </span><br><span class="line">    &#125;</span><br><span class="line">`</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">changeAge</span><span class="params">(Student s)</span>&#123;<span class="comment">//s=s1;</span></span><br><span class="line">        s.age++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">changeStudent</span><span class="params">(Student s)</span>&#123;<span class="comment">//s=s2</span></span><br><span class="line">        s=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s.age++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="type">int</span> age=<span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">总结 :  java中参数传递的规则   <span class="string">&quot;值传递&quot;</span></span><br><span class="line">简单类型的参数  传值</span><br><span class="line">对象类型的参数  传地址  传引用 实参和形参指向同一对象(一个电脑可以插多个键盘)。</span><br></pre></td></tr></table></figure><h3 id="九-成员变量和局部变量的区别。">九 成员变量和局部变量的区别。</h3><p><img src="https://s2.loli.net/2022/07/09/tWebGk6YoFvMiVm.png" alt=""></p><h3 id="十-private关键词。">十 private关键词。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">private</span>关键字的含义是什么</span><br><span class="line">是一个权限修饰符，代表私有的意思，可以修饰成员（成员变量和成员方法）</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 被<span class="keyword">private</span>修饰的属性有什么特点</span><br><span class="line">只能本类内部使用，不能通过对象名 <span class="string">&quot;.&quot;</span> 的形式调用</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> 被<span class="keyword">private</span>修饰的方法有什么特点</span><br><span class="line">只能本类内部使用，不能通过对象名 <span class="string">&quot;.&quot;</span> 的形式调用</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>注意：针对<span class="keyword">private</span>修饰的成员变量，如果需要被其他类使用，提供相应的操作 </span><br><span class="line">- 提供“get变量名()”方法，用于获取成员变量的值，方法用<span class="keyword">public</span>修饰 </span><br><span class="line">- 提供“set变量名(参数)”方法，用于设置成员变量的值，方法用<span class="keyword">public</span>修饰</span><br></pre></td></tr></table></figure><h3 id="十一-private关键字的使用。">十一 private关键字的使用。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 标准类的书写是什么</span><br><span class="line">    属性私有 提供get/set方法</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span> 私有的属性如何使用</span><br><span class="line">    通过公开的get/set方法进行取值和赋值</span><br></pre></td></tr></table></figure><h3 id="十二-this关键字">十二 this关键字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="built_in">this</span>的本质</span><br><span class="line"><span class="built_in">this</span> 代表当前类对象的引用（地址)</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span> <span class="built_in">this</span>的作用</span><br><span class="line">可以调用本类的成员(变量, 方法)，解决局部变量和成员变量的重名问题</span><br></pre></td></tr></table></figure><h3 id="十三-this关键字内存图。">十三 this关键字内存图。</h3><p><img src="https://s2.loli.net/2022/07/09/PLcpgRNfHqCYmh2.png" alt=""></p><h3 id="十四-封装">十四 封装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 什么是封装</span><br><span class="line">- 封装是面向对象三大特征之一（封装，继承，多态）</span><br><span class="line">- 隐藏实现细节，仅对外暴露公共的访问方式</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 封装在代码中的体现</span><br><span class="line">- 私有成员变量，提供setXxx和getXxx方法 </span><br><span class="line">- 将代码抽取到方法中，这是对代码的一种封装 </span><br><span class="line">- 将属性抽取到类当中，这是对数据的一种封装</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> 封装的好处</span><br><span class="line">    - 提高了代码的安全性 </span><br><span class="line">    - 提高了代码的复用性</span><br></pre></td></tr></table></figure><h3 id="十五构造方法的格式和执行时机">十五构造方法的格式和执行时机</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 什么是构造方法</span><br><span class="line">构建、创造对象的时候，所调用的方法</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();<span class="comment">//Student()就是构造方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2</span> 构造方法的格式</span><br><span class="line">权限修饰符 类名()&#123;&#125;</span><br><span class="line">    例如：<span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">1.</span>方法名与类名相同，大小写也要一致</span><br><span class="line">    <span class="number">2.</span>没有返回值类型，连<span class="keyword">void</span>都没有</span><br><span class="line">    <span class="number">3.</span>没有具体的返回值（不能由<span class="keyword">return</span>带回结果数据）</span><br><span class="line">    </span><br><span class="line"><span class="number">3</span> 构造方法的执行时机</span><br><span class="line">创建对象的时候调用，每创建一次对象，就会执行一次构造方法 </span><br><span class="line">不能手动调用构造方法</span><br></pre></td></tr></table></figure><h3 id="十六构造方法的作用">十六构造方法的作用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 本质作用：创建对象</span><br><span class="line">- 结合构造方法执行时机：给对象中的属性（成员变量）进行初始化</span><br></pre></td></tr></table></figure><h3 id="十七-构造方法的注意事项">十七 构造方法的注意事项</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>构造方法的分类</span><br><span class="line">    - 有参构造</span><br><span class="line">- 无参构造</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>构造方法的注意事项：</span><br><span class="line">- 构造方法的构建：</span><br><span class="line">- 如果没有定义构造方法，系统将给出一个默认的无参数构造方法</span><br><span class="line">- 如果定义了构造方法，系统将不再提供默认的构造方法</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>构造方法的重载</span><br><span class="line">构造方法也是方法，允许重载关系出现</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>推荐的使用方式</span><br><span class="line">无参数构造方法，和带参数构造方法，都自己手动给出</span><br></pre></td></tr></table></figure><p><strong>构造方法内存图解</strong></p><p><img src="https://s2.loli.net/2022/07/09/J8mPCSQenqUc9aY.png" alt=""></p><h3 id="十八标准类的代码编写和使用">十八标准类的代码编写和使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>自定义类</span><br><span class="line">    <span class="number">1.</span>私有化成员变量</span><br><span class="line">    <span class="number">2.</span>构造方法</span><br><span class="line">        无参构造</span><br><span class="line">        满参构造</span><br><span class="line">    <span class="number">3.</span>set及get方法</span><br><span class="line">    <span class="number">4.</span>成员方法</span><br><span class="line">    <span class="number">5.</span>为了展示数据方便的show方法</span><br><span class="line"><span class="number">2.</span>测试类</span><br><span class="line">    <span class="number">1.</span>main方法</span><br><span class="line">    <span class="number">2.</span>创建对象使用成员变量,成员方法...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">需求：定义标准学生类，</span><br><span class="line">使用<span class="keyword">private</span>修饰成员变量(name,age,性别gender,成绩score)</span><br><span class="line">提供setXxx/getXxx方法</span><br><span class="line">提供空参有参构造方法，有参构造方法为成员变量赋值</span><br><span class="line">提供用于显示信息的show方法</span><br><span class="line"></span><br><span class="line">测试类分别使用空参和有参构造方法创建对象</span><br><span class="line">要求分别使用空参和有参构造方法创建对象，</span><br><span class="line">空参创建的对象通过setXxx赋值，</span><br><span class="line">有参创建的对象直接赋值，</span><br><span class="line">并通过show方法展示数据。</span><br><span class="line"></span><br><span class="line">快速生成一个类的信息快捷键:</span><br><span class="line">       alt +insert    <span class="title function_">toString</span><span class="params">()</span>   </span><br></pre></td></tr></table></figure><h3 id="十九、练习：使用标准-JavaBean-封装数据-2">十九、练习：使用标准 JavaBean 封装数据</h3><p><img src="https://s2.loli.net/2022/07/09/mOZn14PcyqYtsKo.png" alt=""></p><ul><li><p>步骤：</p><p>1.编写饮水机类 WaterDispenser</p><p>2.定义四个成员变量（品牌 brand）（颜色 color）（容量 capacity）（模式 model）</p><p>3.私有成员变量，提供 setXxx\getXxx 方法</p><p>4.提供空参、带参构造方法</p><p>5.提供成员方法 show - 用于展示出所有成员变量所记录的值</p><p>6.编写测试类 Test</p><p>7.使用带参构造方法创建对象，给属性赋值为（美的，红色，5L，手动净水）</p><p>8.调用show方法执行</p><p>9.将容量获取出来，并判断容量是否大于3L.</p></li><li><p>运行结果：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">品牌为:美的</span><br><span class="line">颜色为:红色</span><br><span class="line">容量为:<span class="number">5</span></span><br><span class="line">模式为:手动净水</span><br><span class="line">容量大于<span class="number">3L</span></span><br></pre></td></tr></table></figure><ul><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WaterDispenser</span> &#123;</span><br><span class="line">    <span class="comment">// 定义四个成员变量（品牌 brand）（颜色 color）（容量 capacity）（模式 model）</span></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> String model;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 空参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WaterDispenser</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WaterDispenser</span><span class="params">(String brand, String color, <span class="type">int</span> capacity, String model)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setXxx\getXxx</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrand</span><span class="params">(String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCapacity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCapacity</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getModel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setModel</span><span class="params">(String model)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// show 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;品牌为:&quot;</span> + brand);</span><br><span class="line">        System.out.println(<span class="string">&quot;颜色为:&quot;</span> + color);</span><br><span class="line">        System.out.println(<span class="string">&quot;容量为:&quot;</span> + capacity);</span><br><span class="line">        System.out.println(<span class="string">&quot;模式为:&quot;</span> + model);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestWaterDispenser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WaterDispenser</span> <span class="variable">wd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WaterDispenser</span>(<span class="string">&quot;美的&quot;</span>,<span class="string">&quot;红色&quot;</span>,<span class="number">5</span>,<span class="string">&quot;手动净水&quot;</span>);</span><br><span class="line">        wd.show();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(wd.getCapacity() &gt; <span class="number">3</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;容量大于3L&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;容量没有大于3L&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day08-4">day08</h2><h3 id="一、API-Application-Programming-Interface-应用编程接口">一、API(Application Programming Interface)应用编程接口</h3><h4 id="1、API概述-帮助文档的使用">1、API概述-帮助文档的使用</h4><h5 id="1-1-API概述">1.1 API概述</h5><p>API：应用程序编程接口</p><ul><li>简单理解 :   API就是别人写好的类</li><li>目标 :  学习别人写好的类，怎么用？有哪些方法是我们常用的</li></ul><p>**注意：**API 并不是 Java 独有的东西</p><h5 id="1-2-API-帮助文档的使用">1.2 API 帮助文档的使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 在索引的位置搜索自己要查看的类</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 看包</span><br><span class="line">目的: 查看是否是 java.lang(核心包)</span><br><span class="line">是 : 使用的时候, 不需要<span class="keyword">import</span>导包代码</span><br><span class="line">不是 : 使用的时候, 必须编写<span class="keyword">import</span>导包代码</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 看这个类的介绍</span><br><span class="line">目的: 明确这个类的作用</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 看这个类的构造方法</span><br><span class="line">目的: 能够根据构造方法, 创建出该类的对象</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 看这个类的成员方法</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) 方法名</span><br><span class="line"><span class="number">2</span>) 参数</span><br><span class="line"><span class="number">3</span>) 返回值</span><br><span class="line"><span class="number">4</span>) 介绍</span><br></pre></td></tr></table></figure><h4 id="2、键盘录入字符串">2、键盘录入字符串</h4><h5 id="2-1-next-和nextLine-的区别">2.1 next()和nextLine()的区别</h5><p><strong>next()：</strong></p><p>​next()结束标记：空格或者tab ‘\t’</p><p><strong>nextLine()：</strong><br>nextLine()结束标记：回车换行符’\r\n’(Windows)；</p><p>​nextLine()会吞掉回车换行符</p><p>**注意：**如果想录入字符串一般建议使用next()</p><h3 id="二、String-2">二、String</h3><h4 id="1、String概述">1、String概述</h4><ul><li>Java程序中, 所有的双引号字符串，都是String类的对象</li><li>字符串是常量，字符串一旦被创建，就 [不可改变]</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内容不可改变, 要想改变, 只能用新的对象做替换.</span></span><br><span class="line">  </span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">s = <span class="string">&quot;def&quot;</span>;<span class="comment">// 这里只是让s变量, 记录了新的字符串对象</span></span><br><span class="line"><span class="comment">// 原来 &quot;abc&quot;, 内容根本没有改变</span></span><br><span class="line">System.out.println(s);<span class="comment">// def</span></span><br></pre></td></tr></table></figure><ul><li>获取字符串长度：length()</li></ul><h4 id="2、String类常见构造方法">2、String类常见构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">public</span> <span class="title function_">String</span><span class="params">()</span> : 创建一个空白的字符串对象</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="keyword">public</span> <span class="title function_">String</span><span class="params">(<span class="type">char</span>[] chs)</span> : 根据传入的字符数组, 来创建字符串对象</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="keyword">public</span> <span class="title function_">String</span><span class="params">(String str)</span> : 根据传入的字符串, 来创建字符串对象</span><br><span class="line"></span><br><span class="line">今后创建字符串对象的方式, 一般来说, 都是双引号直接创建</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"><span class="number">1</span>、String这个类比较特殊，打印其对象名的时候，不会出现内存地址，而是该对象所记录的真实内容</span><br></pre></td></tr></table></figure><h4 id="3、创建字符串对象的区别对比">3、创建字符串对象的区别对比</h4><ul><li>双引号直接创建 :  字符串常量池中维护</li><li>构造方法new出来 :  堆内存中, 有自己独立的内存空间.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 创建字符串对象的方式有哪些</span><br><span class="line">方式<span class="number">1</span>:String(String s)根据传递的字符串去创建字符串</span><br><span class="line">方式<span class="number">2</span>:<span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;直接赋值(最常用)</span><br><span class="line">        </span><br><span class="line"><span class="number">2</span> 不同的方式创建的字符串对象有什么区别</span><br><span class="line">==比较:</span><br><span class="line">    比较基本数据类型:比较的是数据值</span><br><span class="line">    比较引用数据类型:比较的是地址值</span><br><span class="line">字符串常量池有自己的内存地址</span><br><span class="line">    字符串常量池中,每一个不同的<span class="string">&quot;&quot;</span>引起来的字符串,地址也不相同</span><br><span class="line"></span><br><span class="line">    补充案例:</span><br><span class="line">    <span class="type">char</span>[] chs = &#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>&#125;;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);<span class="comment">//new一次,堆中有一个地址</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;123&quot;</span>);<span class="comment">//new一次,堆中有一个地址</span></span><br><span class="line">    String s3= <span class="string">&quot;123&quot;</span>;<span class="comment">//字符串常量池中&quot;123&quot;的地址</span></span><br><span class="line"><span class="comment">//堆中地址和字符串常量池中&quot;123&quot;的地址比较,不同 false</span></span><br><span class="line">    System.out.println(s1 == s3);</span><br><span class="line"><span class="comment">//堆中地址和字符串常量池中&quot;123&quot;的地址比较,不同 false</span></span><br><span class="line">    System.out.println(s2 == s3);</span><br></pre></td></tr></table></figure><h4 id="4、String特点-常见面试题">4、String特点-常见面试题</h4><p><strong>说明：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span> 做了什么</span><br><span class="line">在栈中创建了一个名为 s1 的变量（引用）</span><br><span class="line">如果常量池中没有 “abc” 存在，则在常量池中创建一个 String 类型的“abc”对象，有就不创建，将 “abc” 的地址赋给s1所以，此句到底创建了几个对象，根据 “abc”的情况而定，“abc”之前不存在就是一个，否则就没有创建。</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>) 做了什么</span><br><span class="line">在栈中创建了一个名为 s2 的变量（引用）</span><br><span class="line">如果常量池中没有 “abc” 存在，则在常量池中创建一个String类型的“abc”对象,有就不创建，使用<span class="keyword">new</span>关键字在堆中创建了一个String对象将<span class="keyword">new</span>创建的String对象的地址赋给s2,所以，此句到底创建了几个对象，根据“abc”的情况而定，“abc”之前存在就是<span class="number">1</span>个,不存在就是<span class="number">2</span>个。</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s1 + <span class="string">&quot;12314&quot;</span>;</span><br><span class="line">    字符串的+操作:创建StringBuilder对象,将内容通过append()方法添加到StringBuilder对象空间内使用toString()方法,将StringBuilder转换为String类型,又得到一个新的String对象(有自己的内存地址)</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>+<span class="string">&quot;b&quot;</span>+<span class="string">&quot;c&quot;</span>;  <span class="comment">//s5=&quot;abc&quot;;</span></span><br><span class="line">    两个或者两个以上的字符串常量相加，在预编译的时候“+”会被优化，</span><br><span class="line">    相当于把两个或者两个以上字符串常量自动合成一个字符串常量</span><br></pre></td></tr></table></figure><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest1</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        看程序说结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span> + <span class="string">&quot;c&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s2 + <span class="string">&quot;c&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(s1 == s3);</span><br><span class="line">    <span class="comment">//false </span></span><br><span class="line">        <span class="comment">//有变量参与，在堆中new一个StringBuider对象，调用该对象的append和tostring方法，返回给s3地址值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5、字符串的比较">5、字符串的比较</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  == 比较有什么特点</span><br><span class="line">    <span class="number">1.</span>比较基本数据类型:比较数据值</span><br><span class="line">    <span class="number">2.</span>比较引用数据类型:比较地址值</span><br><span class="line">        </span><br><span class="line"><span class="number">2</span> equals方法比较有什么特点</span><br><span class="line">注意:何时equals方法比较内容?</span><br><span class="line">    何时比较内容,要看这个类中是否有自己的equals方法</span><br><span class="line">    这部分内容需要到继承学完(方法重写)</span><br><span class="line">        有自己的equals方法比较内容</span><br><span class="line">    没有自己的equals方法比较地址值</span><br><span class="line"></span><br><span class="line">比较字符串内容忽略大小写</span><br><span class="line">equalsIgnoreCase</span><br></pre></td></tr></table></figure><h4 id="7、字符串的遍历">7、字符串的遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  如何直接遍历字符串</span><br><span class="line">    使用方法:</span><br><span class="line">    <span class="number">1.</span>获取字符串长度 length() 注意:区别于数组的length属性</span><br><span class="line">    <span class="number">2.</span>获取字符串中的字符 charAt(<span class="type">int</span> index)</span><br><span class="line">    IDEA中快速遍历字符串的操作:</span><br><span class="line">    <span class="comment">/*//idea中快速遍历字符串</span></span><br><span class="line"><span class="comment">    String s1 = &quot;123456&quot;;</span></span><br><span class="line"><span class="comment">    //字符串变量名.length().fori</span></span><br><span class="line"><span class="comment">    for (int i = 0; i &lt; s1.length(); i++) &#123;//i表示字符在字符串中的索引位置</span></span><br><span class="line"><span class="comment">        //使用当前遍历的字符串对象.charAt(i)</span></span><br><span class="line"><span class="comment">        char c = s1.charAt(i);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="number">3.</span>转换并遍历字符串</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>  字符串如何转数组然后进行遍历</span><br><span class="line">将字符串转换为字符数组 toCharArray() 返回值<span class="type">char</span>[]</span><br><span class="line">    遍历字符数组</span><br><span class="line">    String a=<span class="string">&quot;1515ageawtweyt2462&quot;</span>;</span><br><span class="line">    <span class="type">char</span>[] chars = a.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        System.out.print(chars[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    将字符数组转换为字符串:<span class="keyword">new</span> <span class="title class_">String</span>(<span class="type">char</span>[] chs);</span><br></pre></td></tr></table></figure><h4 id="8、统计字符次数">8、统计字符次数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 统计一个字符串中大写,小写,数字字符的个数 并把每个种类拼接成一个新的字符打印输出</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1 统计一个字符串中大写,小写,数字字符的个数 并把每个种类拼接成一个新的字符打印输出</span></span><br><span class="line">        <span class="comment">//思路  说明这个字符串中有大写 小写 数字  其他</span></span><br><span class="line">        String s=<span class="string">&quot;122ERTVCFsraf%^&amp;*1241 EREssfaaa&quot;</span>;</span><br><span class="line">        <span class="comment">//思路:  定义统计遍历</span></span><br><span class="line">        <span class="type">int</span> count1=<span class="number">0</span>;<span class="comment">//大写</span></span><br><span class="line">        <span class="type">int</span> count2=<span class="number">0</span>;<span class="comment">//小写</span></span><br><span class="line">        <span class="type">int</span> count3=<span class="number">0</span>;<span class="comment">//数字</span></span><br><span class="line">        <span class="comment">//定义三个新的字符串去接受不同的数据</span></span><br><span class="line">        String s1=<span class="string">&quot;&quot;</span>;<span class="comment">//大写</span></span><br><span class="line">        String s2=<span class="string">&quot;&quot;</span>;<span class="comment">//小写</span></span><br><span class="line">        String s3=<span class="string">&quot;&quot;</span>;<span class="comment">//数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="comment">//遍历字符串中的每个字符进行判断</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="comment">//先判断是否是大写</span></span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                count1++;</span><br><span class="line">                s1+=c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">                count2++;</span><br><span class="line">                s2+=c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                count3++;</span><br><span class="line">                s3+=c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;小写有&quot;</span>+count2+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;大写有&quot;</span>+count1+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;数字有&quot;</span>+count3+<span class="string">&quot;个&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;小写有&quot;</span>+s2);</span><br><span class="line">        System.out.println(<span class="string">&quot;大写有&quot;</span>+s1);</span><br><span class="line">        System.out.println(<span class="string">&quot;数字有&quot;</span>+s3);</span><br><span class="line">        System.out.println(s2+s1+s3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 大写转小写 小写转大写</span><br><span class="line">AAbbAAbb   --&gt;aaBBaabb</span><br><span class="line"><span class="comment">//AAbbAAbbca   --&gt;aaBBaabbCA</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;AAbbAAbbca&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] arr = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">//小写</span></span><br><span class="line">                <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> (<span class="type">char</span>) (c - <span class="number">32</span>);</span><br><span class="line">                str+=c1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">//大写</span></span><br><span class="line">                <span class="type">char</span> c1=(<span class="type">char</span>)(c+<span class="number">32</span>);</span><br><span class="line">                str+=c1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(str);</span><br></pre></td></tr></table></figure><h4 id="9、手机号屏蔽-字符串截取">9、手机号屏蔽-字符串截取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 字符串的截取方法如何使用</span><br><span class="line">    方法:</span><br><span class="line">    从传入的索引位置开始截取到字符串的末尾,并将得到的字符串返回</span><br><span class="line">    substring(<span class="type">int</span> beginIndex)</span><br><span class="line">    截取[beginIndex,endIndex),并将得到的字符串返回包头不包尾</span><br><span class="line">    substring(<span class="type">int</span> beginIndex,<span class="type">int</span> endIndex),</span><br><span class="line"></span><br><span class="line">    如果有截取不存在的索引 有异常</span><br><span class="line">    substring(<span class="number">0</span>,<span class="number">0</span>)<span class="comment">//&quot;&quot; 截取一个寂寞</span></span><br><span class="line">    substring(<span class="number">5</span>,<span class="number">4</span>)<span class="comment">//报错</span></span><br><span class="line">    </span><br><span class="line"><span class="number">2</span> 手机号屏蔽思路是什么</span><br><span class="line"><span class="number">158</span>****<span class="number">2477</span></span><br><span class="line">获取一个手机号 截取前<span class="number">3</span>位 截取后四位  然后拼接的时候中间加上<span class="string">&quot;****&quot;</span></span><br></pre></td></tr></table></figure><h4 id="10、敏感词替换-字符串替换">10、敏感词替换-字符串替换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 字符串的替换方法有哪些</span><br><span class="line">    方法</span><br><span class="line">    使用新值替换旧值并返回替换完成后的字符串</span><br><span class="line">replace(<span class="string">&quot;旧值&quot;</span>,<span class="string">&quot;新值&quot;</span>):</span><br><span class="line">使用给定的 replacement 字符串替换此字符串匹配给定的正则表达式的每个子字符串。</span><br><span class="line">replaceAll(String regex,String replacement)</span><br><span class="line">    替换第一次出现的</span><br><span class="line">replaceFirst(String regex,String replacement)</span><br><span class="line">        </span><br><span class="line"><span class="number">2</span> 字符串如何去掉所有空格</span><br><span class="line"><span class="string">&quot;   aaaaa   aaaaaa  &quot;</span>.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>):</span><br></pre></td></tr></table></figure><h4 id="11、切割字符串">11、切割字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 字符串的切割方法如何使用</span><br><span class="line">    split(切割的规则):返回的是切割之后得到的字符串数组</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span> 字符串在切割的时候要注意什么</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;,,,,,,,,&quot;</span>; </span><br><span class="line">    String[] strs1 = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="comment">//打印数组元素</span></span><br><span class="line">    System.out.println(Arrays.toString(strs1));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;1,2,,,,,3,,,,,&quot;</span>;</span><br><span class="line">    String[] strs2 = s2.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    System.out.println(Arrays.toString(strs2));<span class="comment">//[1, 2, , , , , 3]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意:</span></span><br><span class="line">    <span class="comment">//如果切割之后得到的全是空字符串,认为都是无效的数据,都不要了</span></span><br><span class="line">    <span class="comment">//如果是中间夹杂的空字符串,认为是有效数据会进行保留,但是最后一个非空字符串的元素,后面的空字符串认为是无效的不进行保留</span></span><br></pre></td></tr></table></figure><h4 id="12、String方法小结">12、String方法小结</h4><ul><li>String类用于比较的方法 :</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(String anObject)</span> : 字符串之间做内容的比较, 返回<span class="literal">true</span>, <span class="literal">false</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equalsIgnoreCase</span><span class="params">(String anotherString)</span> : 字符串之间做内容的比较, 返回<span class="literal">true</span>, <span class="literal">false</span> (忽略大小写)</span><br></pre></td></tr></table></figure><ul><li>String字符串转换为字符数组的方法 :</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">char</span>[] toCharArray() : 将字符串拆分为字符数组并返回.</span><br></pre></td></tr></table></figure><ul><li>String类用于遍历方法 :</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">char</span> <span class="title function_">charAt</span><span class="params">(<span class="type">int</span> index)</span> : 根据传入的索引, 获取对应的字符</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> 返回此字符串的长度</span><br></pre></td></tr></table></figure><ul><li>String类用于截取的方法 :</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">substring</span><span class="params">(<span class="type">int</span> beginIndex)</span>  :  根据传入的索引截取字符串, 截取到字符串的末尾</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">substring</span><span class="params">(<span class="type">int</span> beginIndex, <span class="type">int</span> endIndex)</span>  :  根据传入的开始和结束索引, 截取字符串</span><br><span class="line">                                                                            (包含头, 不包含尾)</span><br><span class="line"></span><br><span class="line">注意: 返回新的字符串, 千万别忘记接收 !!!</span><br></pre></td></tr></table></figure><ul><li>String类用于替换的方法 :</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">replace</span><span class="params">(String target, String replacement)</span> :</span><br><span class="line"></span><br><span class="line">                        参数<span class="number">1</span>: 原值</span><br><span class="line">                        参数<span class="number">2</span>: 新值</span><br></pre></td></tr></table></figure><ul><li>String类用于切割的方法 :</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] split(String regex) : 根据传入的字符串, 作为规则, 切割当前字符串, 返回字符串数组.</span><br><span class="line"></span><br><span class="line">建议: 今后在指定规则的时候, 尽量以 \\ 为开头</span><br></pre></td></tr></table></figure><h3 id="三、StringBuilder">三、StringBuilder</h3><h4 id="1、StringBuilder概述">1、StringBuilder概述</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> String类有什么缺点</span><br><span class="line">    和String的对比</span><br><span class="line">    String:<span class="string">&quot;&quot;</span>创建完成不可变,改变值就是对象的替换很浪费内存</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> s + <span class="string">&quot;4&quot;</span>;<span class="comment">//实际需要&quot;1234&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s1+<span class="string">&quot;5&quot;</span>;</span><br><span class="line"><span class="number">2</span> StringBuilder有什么好处</span><br><span class="line">StringBuilder:可变的字符串缓冲区,弥补字符串不可变的特点,</span><br><span class="line">用来操作字符串(改变字符串的内容)</span><br><span class="line"></span><br><span class="line">作用:操作字符串 提高效率,在缓冲区中,不会浪费对象</span><br></pre></td></tr></table></figure><h4 id="2、StringBuilder的构造方法">2、StringBuilder的构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 如何创建StringBuilder对象</span><br><span class="line">    空参构造</span><br><span class="line">        StringBuilder() <span class="comment">//空的</span></span><br><span class="line">    带参构造</span><br><span class="line">        StringBuilder(String str):<span class="comment">// 先添加一个str </span></span><br><span class="line">        <span class="comment">//通过这个构造方法是String转换为StringBuilder的方法</span></span><br></pre></td></tr></table></figure><h4 id="3、StringBuilder常用的成员方法">3、StringBuilder常用的成员方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>append(元素),返回当前的StringBuilder对象  </span><br><span class="line"><span class="number">2.</span>reverse(),反转</span><br><span class="line"><span class="number">3.</span>length(),统计StringBuilder中存储多少个字符</span><br><span class="line"><span class="number">4.</span>toString(),将StringBuilder转换为String类型,目的:为了使用String类中的方法</span><br><span class="line">                   链式编程</span><br></pre></td></tr></table></figure><h4 id="4、StringBuilder提高效率的原理">4、StringBuilder提高效率的原理</h4><p>每次使用StringBuilder的对象,进行append的时候,操作的都是同一个内存空间</p><h4 id="5、对称字符串案例-String和StringBuilder之间的转换">5、对称字符串案例-String和StringBuilder之间的转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 如何判断字符串是否是对称字符串思路</span><br><span class="line">    <span class="number">1.</span>判断字符串是否是对称字符串</span><br><span class="line">        String和StringBuilder的相互转化</span><br><span class="line">        <span class="number">1.</span>String -- StringBuilder</span><br><span class="line">        <span class="title function_">StringBuilder</span><span class="params">(String str)</span><span class="comment">//构造方法</span></span><br><span class="line">        <span class="number">2.</span>StringBuilder -- String</span><br><span class="line">        使用StringBuilder的toString方法</span><br><span class="line">操作步骤:</span><br><span class="line">    <span class="number">1.</span>String -- StringBuilder 目的是使用StringBuilder的reverse方法</span><br><span class="line">    <span class="number">2.</span>StringBuilder -- String 使用的是StringBuilder的toString方法</span><br><span class="line">     目的:为了使用String的equals方法</span><br><span class="line">     原因:因为StringBuilder没有自己的equals方法,此时使用StringBuilder参与    比较  比较的是地址值</span><br><span class="line">    String有自己的equals方法,比较的是内容</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span> 链式编程怎么用</span><br><span class="line">链式编程:</span><br><span class="line">        上一步方法的运行结果是能够调用下一个方法的对象</span><br></pre></td></tr></table></figure><h4 id="6、StringBuilder拼接字符串案例">6、StringBuilder拼接字符串案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == arr.length - <span class="number">1</span>)&#123;</span><br><span class="line">            sb.append(arr[i]).append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ssb.append(arr[i]).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sb.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Arrays.toString(arr); 源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">iMax</span> <span class="operator">=</span> a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (iMax == -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    b.append(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">        b.append(a[i]);</span><br><span class="line">        <span class="keyword">if</span> (i == iMax)</span><br><span class="line">            <span class="keyword">return</span> b.append(<span class="string">&#x27;]&#x27;</span>).toString();</span><br><span class="line">        b.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="day09-4">day09</h2><h3 id="一、集合-2">一、集合</h3><h4 id="01-对象数组">01-对象数组</h4><p>需求：将（张三，23）（李四，24）（王五，25）封装为3个学生对象并存入数组，随后遍历数组，将学生信息输出在控制台</p><p>思路：</p><p>① 定义学生类准备用于封装数据</p><p>② 动态初始化长度为3的数组，类型为Student类型</p><p>③ 根据需求创建3个学生对象</p><p>④ 将学生对象存入数组</p><p>⑤ 遍历数组，取出每一个学生对象</p><p>⑥ 调用对象的getXxx方法获取学生信息，并输出在控制台</p><p>如果此时需要再添加一个学生信息怎么办？？？</p><h4 id="02-集合介绍">02-集合介绍</h4><ul><li><p>集合就是一种容器</p></li><li><p>问题 : 和数组有什么区别 ?</p><ul><li><p>长度 :</p><ul><li>数组的长度是固定的</li><li>集合的长度是可变的</li></ul></li><li><p>存储 :</p><ul><li>数组可以存储基本数据类型, 也可以存储引用数据类型.</li><li>集合只能存储引用数据类型,  如果想要存储基本数据类型,  需要使用对应的==包装类==</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>Byte</span><br><span class="line"><span class="type">short</span>Short</span><br><span class="line"><span class="type">int</span>Integer  ***</span><br><span class="line"><span class="type">long</span>Long</span><br><span class="line"><span class="type">float</span>Float</span><br><span class="line"><span class="type">double</span>Double</span><br><span class="line"><span class="type">char</span>Character ***</span><br><span class="line"><span class="type">boolean</span>Boolean</span><br></pre></td></tr></table></figure></li></ul></li><li><p>什么时候使用集合容器 ?</p><ul><li>如果要存储数据的个数, 是经常发生改变的,  推荐使用集合容器.</li></ul></li></ul><h4 id="03-集合容器的创建和添加">03-集合容器的创建和添加</h4><ul><li>创建集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">&lt;&gt; : 泛型, 目前对于泛型的理解, 可以对集合中存储的数据类型进行限制</span><br><span class="line">    - 泛型类, 泛型方法, 泛型接口, 泛型通配符, 泛型的上下限定..</span><br></pre></td></tr></table></figure><ul><li>向集合中添加元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(元素)</span> : 向集合的尾部添加元素, 返回是否添加成功的状态 (返回一般来说, 都不接收)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, 元素)</span>; : 在指定的索引位置添加对应的元素 (插队添加)</span><br></pre></td></tr></table></figure><ul><li>打印集合的名字, 不会出现内存地址, 而是会看到元素的内容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [abc, 123]</span></span><br></pre></td></tr></table></figure><h4 id="04-ArrayList常用的增删改查方法">04-ArrayList常用的增删改查方法</h4><h5 id="增">增:</h5><p>​    boolean add(E e) : 向集合的尾部添加元素, 并返回是否添加成功的状态.<br>​    add(int index, E element) : 可以在指定的索引位置, 添加对应的元素 (插队)</p><h5 id="删">删:</h5><p>​    E remove(int index)  : 根据传入的索引, 删除集合中元素, 返回被删除的那个元素.<br>​    boolean remove(Object o) : 根据元素删除, 返回是否删除成功的状态</p><h5 id="改">改:</h5><p>​    E set(int index, E element) : 修改指定索引位置, 为对应的元素.</p><p>​    返回被覆盖掉的元素.</p><p>以上方法虽然存在返回值, 但返回的结果对我们来说, 意义不大, 可以不做接收.</p><h5 id="查">查:</h5><p>​    int size() : 返回集合中元素的个数</p><h5 id="找：">找：</h5><p>​    E get(int index) : 根据索引, 获取集合中的元素</p><h2 id="javaSE进阶day02">javaSE进阶day02</h2><h3 id="继承-抽象类-final">继承-抽象类-final</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  继承的概念是什么</span><br><span class="line">   让类与类之间产生关系（子父类关系），子类可以直接使用父类中非私有的成员</span><br><span class="line">   </span><br><span class="line"><span class="number">2</span>  继承在java中如何实现</span><br><span class="line">格式:  <span class="keyword">public</span> class 子类名称  extends 父类名称&#123;&#125;</span><br><span class="line">           继承的关键字: extends</span><br><span class="line">               </span><br><span class="line"><span class="number">3</span>  继承在java中的应用</span><br><span class="line">代码描述: </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Dog  d=<span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        d.eat();<span class="comment">//Dog类中没有eat方法，调用父类中的eat方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span>  <span class="title class_">Animal</span>&#123;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="二-继承的好处和弊端">二:继承的好处和弊端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">好处：提高了代码的（复用性、维护性），是多态的前提</span><br><span class="line">弊端：降低了代码灵活性，增强了代码的耦合性</span><br></pre></td></tr></table></figure><h3 id="三-继承的特点">三:继承的特点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> java只支持单继承和多层继承 不允许多继承</span><br><span class="line"><span class="number">2</span> 一个类可以被多个子类继承</span><br><span class="line"><span class="number">3</span> java中的单继承性:一个类只能有一个直接父类.</span><br><span class="line"><span class="number">4</span> 子父类是相对的概念   </span><br><span class="line">   A <span class="keyword">extends</span> <span class="title class_">B</span>  (A子 B父)     </span><br><span class="line">   c <span class="keyword">extends</span> <span class="title class_">A</span> (C子类  A父类)</span><br><span class="line"><span class="number">5</span> 子类直接继承父类 称之为:直接父类,  间接继承的父类称之为:间接父类 </span><br><span class="line"><span class="number">6</span> 子类继承父类之后,就获取了直接父类以及所有间接父类中声明的属性和方法</span><br></pre></td></tr></table></figure><h3 id="四-继承中成员变量的访问特点">四:继承中成员变量的访问特点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 在子类中访问一个变量的顺序是什么</span><br><span class="line">   就近原则</span><br><span class="line">   查找顺序: <span class="number">1</span> 子类局部</span><br><span class="line">            <span class="number">2</span> 子类成员</span><br><span class="line">            <span class="number">3</span> 父类成员 </span><br><span class="line">            </span><br><span class="line"><span class="number">2</span> 如果子类和父类出现了同名的变量怎么办</span><br><span class="line">如果子类和父类中出现了同名的成员变量 有就近原则优先使用本类的</span><br><span class="line">    <span class="built_in">this</span>.变量名 ==&gt;表示本类成员变量</span><br><span class="line">    <span class="built_in">super</span>.变量名==&gt;进行区分</span><br></pre></td></tr></table></figure><h3 id="五-this-和-super-访问成员的格式">五:this 和 super 访问成员的格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="built_in">this</span>的用法</span><br><span class="line">   <span class="built_in">this</span>.变量名   当本类局部变量和成员变量发生命名冲突的时候 <span class="built_in">this</span>.变量名代表成员变量</span><br><span class="line">   <span class="built_in">this</span>.方法名   调用本类的成员方法</span><br><span class="line">   <span class="built_in">this</span>(参数表)  在调用本类的其他构造方法(用参数表区分调用的是哪一个构造方法)<span class="comment">//必须是本类构造方法的第一句话</span></span><br><span class="line">   </span><br><span class="line"><span class="number">2</span>  <span class="built_in">super</span>的用法</span><br><span class="line"><span class="built_in">super</span>的用法: (代表父类对象的引用)</span><br><span class="line">    <span class="built_in">super</span>.变量名  调用父类中的成员变量</span><br><span class="line">    <span class="built_in">super</span>.方法名  调用父类中的成员方法</span><br><span class="line">    <span class="built_in">super</span>(参数表) 调用父类的构造方法 <span class="comment">//也必须是构造方法的第一句话</span></span><br></pre></td></tr></table></figure><h3 id="六-继承中成员方法的访问特点">六:继承中成员方法的访问特点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">通过子类对象调用一个方法</span><br><span class="line">       <span class="number">1</span> 会现在子类成员范围查找</span><br><span class="line">       <span class="number">2</span> 如果没有就去父类成员范围查找   </span><br><span class="line">       <span class="number">3</span> 如果都没有找到报错</span><br></pre></td></tr></table></figure><h3 id="七-方法重写">七:方法重写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 方法的重写的概念是什么</span><br><span class="line">子类继承父类之后,可以对同名同参数的方法.进行覆盖操作称为方法的重写</span><br><span class="line">    .</span><br><span class="line"><span class="number">2</span> 重写的格式是什么</span><br><span class="line">权限修饰符 返回值类型  方法名(形参列表)&#123;</span><br><span class="line">            <span class="comment">//方法体</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="number">3</span> 方法重写后在执行的时候有什么特点</span><br><span class="line">应用:重写后, 当创建子类对象之后,通过子类对象调用父类中同名同参数的方式时实际执行的是子类重写父类的方法</span><br></pre></td></tr></table></figure><h3 id="八-方法重写的注意事项">八:方法重写的注意事项:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">父类中私有方法不能被重写</span><br><span class="line">父类静态方法，子类必须通过静态方法进行重写，父类非静态方法，子类也必须通过非静态方法进行重写</span><br><span class="line">主义：静态方法不能被重写！如果子类中，也存在一个方法声明一模一样的方法，可以理解为，子类将父类中同名的方法，隐藏了起来，并非是方法重写！</span><br><span class="line">子类重写父类方法时，访问权限必须大于等于父类</span><br></pre></td></tr></table></figure><h3 id="九-权限修饰符">九:权限修饰符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 权限修饰符有哪些</span><br><span class="line">   <span class="keyword">private</span>  <span class="title function_">default</span><span class="params">(缺省不写)</span>  <span class="keyword">protected</span> <span class="keyword">public</span> </span><br><span class="line">    </span><br><span class="line"><span class="number">2</span> 权限修饰符能修饰什么</span><br><span class="line"><span class="keyword">private</span>        属性     方法    构造方法    </span><br><span class="line"><span class="keyword">default</span>        属性     方法    构造方法    类</span><br><span class="line"><span class="keyword">protected</span>      属性     方法    构造方法</span><br><span class="line"><span class="keyword">public</span>         属性     方法    构造方法    类</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> 权限修饰符的访问特点</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/20/IjG2OA1SFQ7ZMfh.png" alt=""></p><h3 id="十-继承中构造方法的访问特点">十:继承中构造方法的访问特点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 继承中构造方法的访问特点有哪些</span><br><span class="line">    子类的构造方法都会默认访问父类的无参构造方法</span><br><span class="line"> 子类在初始化的时候有可能会使用到父类中的数据,如果父类没有完成初始化子类将无法使用</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="built_in">super</span>()的如何使用</span><br><span class="line">通过构造<span class="built_in">super</span>()访问父类的构造方法完成父类成员的初始化 </span><br><span class="line"></span><br><span class="line"><span class="number">3</span> 一个类如果没有显示的继承一个类默认是什么</span><br><span class="line">Object类是所有类直接或者间接父类 </span><br></pre></td></tr></table></figure><h3 id="十一-父类没有空参数构造方法">十一:父类没有空参数构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">构造方法的第一句话有三种情况  <span class="built_in">this</span>()  <span class="built_in">super</span>()或者是一个其他的语句</span><br><span class="line">所以如果一个构造方法中的第一个语句不是<span class="built_in">this</span> 也不是<span class="built_in">super</span> 系统会默认添加 <span class="built_in">super</span>() 无参。默认调用父类的无参构造方法</span><br><span class="line">所有类的最终父类都是Object类</span><br></pre></td></tr></table></figure><h4 id="super的用法">super的用法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一个用法 <span class="built_in">super</span>. 用于调用父类的成员变量及成员方法</span><br><span class="line">第二个用法 <span class="built_in">super</span>() 用于调用父类的空参构造方法</span><br></pre></td></tr></table></figure><h2 id="day03-接口-多态">day03_接口,多态</h2><p>目录:<br>接口<br>1.接口产生的原因<br>2.接口中成员的特点<br>3.接口中的特有方法<br>4.接口的使用规则<br>多态<br>1.多态的前提条件<br>2.多态的使用场景***<br>3.多态的好处和弊端<br>4.向上转型以及向下转型,解决向下转型问题中存在的风险</p><h3 id="一-接口">一.接口</h3><h4 id="1-接口概述">1.接口概述</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.接口产生原因</span><br><span class="line">当一个类中所有的方法都是抽象方法,那么该类存在的意义就是为了制定规则,此时将类定义为接口</span><br><span class="line">2.接口存在的意义</span><br><span class="line">       </span><br><span class="line">        2.接口存在的意义:</span><br><span class="line">            1.定义规则 -- 想要拥有接口中的功能,必须按照接口规则进行重写</span><br><span class="line">            2.扩展功能,实现接口的类可以拥有接口指定的功能</span><br></pre></td></tr></table></figure><h4 id="2-接口定义格式及使用方式">2.接口定义格式及使用方式</h4><p>​    问题:<br>​        1.如何定义接口<br>​        2.类如何使用接口<br>​        3.类和接口之间的关系<br>​    答案:<br>​        1.定义接口<br>​        public interface 接口名{}<br>​        2.类使用接口:接口不能创建对象<br>​            1.非抽象类<br>​            单实现接口:<br>​            public class 类名 implements 接口名{<br>​                重写方法;<br>​            }<br>​            多实现接口:<br>​            public class 类名 implements 接口名1, 接口名2…{<br>​                重写方法;<br>​            }<br>​            2.抽象类:不需要重写接口中抽象方法<br>​            public abstract class 类名 implements 接口名{}<br>​            多实现接口:<br>​            public abstract class 类名 implements 接口名1, 接口名2…{}<br>​        3.类和接口之间的关系<br>​            has…a的关系<br>​            类实现接口,可以拥有接口描述的功能,具体实现要看重写之后的方法体</p><h4 id="3-接口中的成员特点">3.接口中的成员特点</h4><p>​    问题:<br>​        1.接口中成员变量特点<br>​        2.接口中构造方法特点<br>​        3.接口中成员方法特点<br>​    答案:<br>​        1.接口中成员变量只能定义为常量<br>​        默认修饰符:public static final</p><p>​直接使用接口.进行访问,使用方便</p><p>​        2.接口中没有构造方法(接口是可以多继承的) – 接口多继承接口可以扩展接口功能</p><p>​例如:usb扩展(1拖3) – 插1拖3 – 像鞭炮一样</p><p>​        3.接口中定义的方法<br>​            jdk7版本及之前:只能定义抽象方法,默认修饰符public abstract</p><p>​接口中添加功能导致接口升级问题,解决升级问题,使用新特性:</p><p>​            jdk8版本:增加默认方法及静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDK8默认方法编写格式</span></span><br><span class="line">    <span class="comment">//1.不需要被重写,不会直接影响接口实现类使用</span></span><br><span class="line">    <span class="comment">//2.方法的调用 接口实现类对象名.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        privateMethod();</span><br><span class="line">        System.out.println(<span class="string">&quot;默认方法的方法体&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​            jdk9版本:增加私有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态方法: 解决某个default方法需要被多个实现类进行使用</span></span><br><span class="line">    <span class="comment">//为了简化调用方式,定义为静态 接口名. 调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//提示接口使用者,正在使用静态方法</span></span><br><span class="line">        show();</span><br><span class="line">        System.out.println(<span class="string">&quot;接口中静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在使用static方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.当默认方法以及静态方法中出现重复内容,可以抽取方法</span></span><br><span class="line">    <span class="comment">//不希望外类进行使用,进行私有化操作</span></span><br><span class="line">    <span class="comment">//2.提供方法以支持接口中默认方法/静态方法使用</span></span><br></pre></td></tr></table></figure><h4 id="4-jdk8版本接口方法">4.jdk8版本接口方法</h4><p>​        1.默认方法<br>​            问题:<br>​                1.定义格式<br>​                2.作用<br>​                3.使用方式<br>​            答案:<br>​                1.定义格式:<br>​                public default 返回值类型 方法名(形式参数列表){<br>​                    方法体;<br>​                }<br>​                2.作用: 解决接口升级问题:<br>​                如果直接在接口中添加抽象方法,导致所有的接口实现类都要强制重写该方法,会影响程序的功能</p><p>使用默认方法,如果需要使用新功能,只需要创建[接口实现类对象进行调用],不调用则不会影响功能<br>3.使用方式<br>实现类对象名.默认方法名(实际参数);</p><p>​        注意事项:<br>​            1.一个类同时实现多个接口,这些接口中存在同名的默认方法(有方法体),此时需要接口实现类重写默认方法<br>​            2.在继承和实现关系同时存在的情况下,成员方法的使用顺序是怎样的?<br>​            3.当接口中和直接父类出现同名成员变量,如何区分?</p><p>2.静态方法<br>问题:<br>1.定义格式<br>2.作用<br>3.使用方式<br>答案:<br>1.定义格式:<br>public static 返回值类型 方法名(形式参数列表){<br>方法体;<br>}<br>2.作用:解决接口升级问题:<br>如果接口中书写的默认方法(default),所有的实现类都需要进行使用,需要创建每一个实现类对象进行调用</p><p>​定义为静态方法,不需要创建实现类对象,直接在使用位置通过<br>​[接口名.]调用方式,简化调用方式,同时节约内存,减少实现类对象的频繁创建<br>​3.使用方式:<br>​接口名.静态方法名(实际参数);<br>​问题:为什么只能使用该方式进行调用?<br>​1.静态方法不能被重写<br>​2.在继承关系下,如果使用子类对象调用静态方法<br>​    如果子类中存在静态方法,优先使用子类<br>​    如果子类中不存在静态方法,调用super空间中父类静态方法<br>​3.在实现关系下,[子类是不能从implements空间查找静态方法],implements空间中只能使用接口名进行访问</p><p>​建议:静态都是用类名.调用</p><h4 id="5-jdk9版本接口方法">5.jdk9版本接口方法</h4><p>​    1.私有方法<br>​        问题:<br>​            1.定义格式<br>​            2.作用<br>​            3.使用方式<br>​        答案:<br>​            1.定义格式<br>​            private 返回值类型 方法名(形式参数列表){<br>​                方法体;<br>​            }<br>​            2.作用<br>​            将默认方法中重复的代码进行抽取,提高复用性<br>​            3.使用方式<br>​            默认方法内,通过方法名进行调用<br>​    2.私有静态方法<br>​        问题:<br>​            1.定义格式<br>​            2.作用<br>​            3.使用方式<br>​        答案:<br>​            1.定义格式<br>​            private static 返回值类型 方法名(形式参数列表){<br>​                方法体;<br>​            }<br>​            2.作用<br>​            将静态方法中重复的代码进行抽取,提高复用性<br>​            3.使用方式<br>​            静态方法内,通过方法名进行调用</p><h4 id="6-类和类-类和接口-接口和接口之间的关系">6.类和类,类和接口,接口和接口之间的关系</h4><p>​    问题:<br>​        1.类和类之间关系<br>​        2.类和接口之间关系<br>​        3.接口和接口之间关系<br>​    答案:<br>​        1.类和类之间关系<br>​            继承关系:可以单继承,不可以多继承(super()),可以多层继承<br>​        2.类和接口之间关系<br>​            实现关系:可以单实现,也可以多实现,可以继承同时多实现<br>​        3.接口和接口之间关系<br>​            继承关系:可以单继承,可以多继承<br>​            例如:<br>​            interface A{}<br>​            interface B{}<br>​            interface C extends A{}<br>​            或者<br>​            interface C extends A,B{}</p><p>​            接口多继承的意义:扩展接口功能</p><p>​ 问题:为什么接口可以多继承?</p><p>​             没有构造,不存在不清楚访问哪一个父类情况</p><h3 id="二-多态">二.多态</h3><h4 id="1-多态的概述">1.多态的概述</h4><p>​        问题:<br>​            1.什么是多态<br>​            2.多态前提条件<br>​        答案:<br>​            1.多态指的是同一个对象在同一时刻的不同表现形式<br>​            例如:<br>​            对于猫个体,同一时刻有两种不同表现形式<br>​            1.猫是猫<br>​            2.猫是一种动物</p><p>​此时只创建一个猫的对象</p><p>​2.多态的前提条件<br>​            1.有继承(extends)或者实现(implements)关系<br>​            2.要有方法重写<br>​            3.要有父类引用指向子类对象或者接口引用指向实现类对象<br>​                理解:使用父类/接口类型变量接收子类/实现类对象的地址<br>​                例如:<br>​                    Fu f = new Zi();<br>​                    Inter i = new InterImpl();</p><h4 id="2-多态成员访问特点">2.多态成员访问特点</h4><p>​1.构造方法<br>​    new关键字调用哪个构造方法,就是创建哪个类的对象<br>​2.成员变量<br>​    编译看左边,运行看左边<br>​    因为成员变量不存在重写<br>​3.成员方法<br>​    编译看左边,运行看右边<br>​    成员方法存在重写,此时运行看子类是否重写父类方法<br>​    重写:执行子类重写后的方法<br>​    没有重写:执行父类方法</p><p>​Fu f = new Zi();</p><p>​f.变量 – 使用什么类型去访问,就在当前类型锁表示的空间进行查找</p><p>​编译时期看 Fu f;只知道变量是Fu类型</p><p>​要想编译通过,必须保证使用f访问的内容是存在的,才能通过编译</p><p>​运行时期,编译通过,执行new Zi(),会产生方法重写</p><p>​</p><h4 id="3-多态的好处和弊端">3.多态的好处和弊端</h4><p>​    问题:<br>​        1.多态的好处<br>​        2.多态的弊端<br>​    答案:<br>​        1.好处:<br>​            将父类类型/接口类型定义为方法的形式参数/返回值类型<br>​            1.提高方法的兼容性(可以接收所有子类/实现类对象)<br>​            2.减少重载方法的书写(System.out.println();)</p><p>​println();//基本类型 + char[] + String + Object</p><p>​        2.弊端:<br>​            不能使用子类/实现类的特有功能,只能使用父类/接口中存在的成员</p><p>​(只能使用编译时期可以找得到的,成员变量–看父类/接口,成员方法–看父类/接口)</p><h4 id="4-多态中的转型">4.多态中的转型</h4><p>​    问题:<br>​        1.转型的分类<br>​        2.转型的格式<br>​    答案:<br>​        1.分类:<br>​            1.自动类型提升(向上转型)<br>​            2.强制类型转换(向下转型)<br>​        2.格式:<br>​            1.自动类型提升:<br>​                1.使用父类类型变量接收子类对象<br>​                Fu f = new Zi();<br>​                2.使用接口类型变量接收实现类对象<br>​                Inter i = new InterImpl();<br>​            2.强制类型转换:<br>​                Fu f = new Zi();<br>​                Zi z = (Zi)f;<br>​                或者<br>​                Inter i = new InterImpl();<br>​                InterImpl ii = (InterImpl)i;</p><p>应用场景:</p><p>当方法形式参数定义为接口/父类类型,此时接收子类对象已经自动类型提升为接口/父类类型</p><p>在方法体中,想要使用子类/实现类[特有]功能,必须进行强制类型转换</p><p>非场景下使用:</p><p>如果是正常创建对象使用,推荐直接创建当前类对象即可</p><p>子类/实现类对象,不使用多态</p><p>​</p><h4 id="5-多态中的转型风险及解决方案">5.多态中的转型风险及解决方案</h4><p>​    问题:<br>​        1.强制类型转换的目的<br>​        2.多态强制类型转换会遇到什么风险<br>​        3.如何解决风险<br>​    答案:<br>​        1.目的:<br>​            为了使用子类/实现类特有的内容<br>​        2.遇到的风险:<br>​           强制类型转换时,会产生目标类型和转换类型不匹配情况<br>​           造成ClassCastException<br>​           例如:<br>​                父类-Perosn:<br>​                    子类1:Student<br>​                    子类2:Teacher<br>​                Person p = new Student();<br>​                Teacher t = (Teacher)p;<br>​                此时:p实际对象时Student,强转为Teacher<br>​                类型不匹配<br>​        3.解决:<br>​            使用instanceOf关键字进行转型前判断<br>​            变量名 instanceOf 目标类型<br>​            结果为true:类型匹配,可以进行强转为目标类型的操作<br>​            结果为false:类型不配,不能进行强转<br>​            例如:<br>​                if(p instanceOf Student){<br>​                    Student s = (Student)p;<br>​                }</p><p>如何去快速识别当前使用方法是不是多态形式:</p><p>看返回值类型和形式参数列表即可</p><p>将父类/接口类型定义为方法的形式参数/返回值类型 – 多态使用</p><h2 id="day04-内部类-Lambda表达式">day04_内部类,Lambda表达式</h2><p>目录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">内部类 重点掌握:匿名内部类产生及使用场景</span><br><span class="line">Lambda表达式: 如何使用idea完成书写</span><br><span class="line">API:</span><br><span class="line">API文档的使用</span><br><span class="line">Math类、System类</span><br><span class="line">Object和Objects</span><br><span class="line">BigDecimal类</span><br><span class="line">重点内容:</span><br><span class="line">1.匿名内部类使用场景</span><br><span class="line">2.lambda表达式的使用条件及优化</span><br><span class="line">3.toString()和equals()</span><br><span class="line">4.其余API方法查询手册,知道用法</span><br></pre></td></tr></table></figure><h3 id="一-内部类">一.内部类</h3><h4 id="1-内部类概述">1.内部类概述</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line">1.什么是内部类</span><br><span class="line">2.内部类的分类</span><br><span class="line">3.内部类访问特点</span><br><span class="line">答案:</span><br><span class="line">1.内部类指的是定义在类中的类</span><br><span class="line">2.分类:</span><br><span class="line">1.成员内部类:定义在类中方法外</span><br><span class="line">2.局部内部类:定义在方法中</span><br><span class="line">3.访问特点:</span><br><span class="line">1.内部类可以直接使用外部类成员,包括私有</span><br><span class="line">2.外部类想要使用内部类成员,需要创建内部类对象</span><br></pre></td></tr></table></figure><h4 id="2-成员内部类">2.成员内部类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line">1.成员内部类定义位置</span><br><span class="line">2.对象创建格式</span><br><span class="line">3.如何区分内部类和外部类中的同名成员</span><br><span class="line">答案:</span><br><span class="line">1.成员内部类定义在类中方法外</span><br><span class="line">2.对象创建格式:</span><br><span class="line">1.直接创建:</span><br><span class="line">外部类类名.内部类类名 对象名 = new 外部类名().new 内部类名();</span><br><span class="line">2.间接创建:</span><br><span class="line">外部类名 对象名 = new 外部类名(); // 先创建外部类对象</span><br><span class="line">外部类类名.内部类类名 内部类对象名 = 对象名.new 内部类名();</span><br><span class="line">3.如何区分内部类和外部类中的同名成员</span><br><span class="line">当内部类和外部类存在同名的成员变量,想要使用外部类的成员,需要通过 外部类名.this.成员</span><br></pre></td></tr></table></figure><h4 id="3-私有成员内部类和静态成员内部类">3.私有成员内部类和静态成员内部类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line">   1.私有成员内部类访问方式</span><br><span class="line">   2.静态成员内部类访问方式</span><br><span class="line">   3.静态成员内部类访问静态方法</span><br><span class="line">答案:</span><br><span class="line">    1.外部类中创建对象进行使用</span><br><span class="line">2.外部类类名.内部类类名 内部类对象名 = new  外部类类名.内部类名();          </span><br><span class="line">3.外部类类名.内部类名.内部类静态方法名();</span><br><span class="line">//什么时候把内部类当做类,什么时候当做成员?</span><br><span class="line">什么时候当做成员:创建外部类对象/使用外部类名进行访问</span><br><span class="line">当做类:需要使用内部类的成员,需要创建内部类对象,当做类考虑</span><br></pre></td></tr></table></figure><h4 id="4-局部内部类">4.局部内部类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line">   1.定义位置</span><br><span class="line">   2.访问方式</span><br><span class="line">答案:</span><br><span class="line">   1.定义在方法中</span><br><span class="line">   2.在定义完成之后,所在方法内部,创建局部内部类对象进行访问</span><br></pre></td></tr></table></figure><h4 id="5-匿名内部类">5.匿名内部类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line">    1.定义位置</span><br><span class="line">    2.格式</span><br><span class="line">    3.本质</span><br><span class="line">答案:</span><br><span class="line">    1.定义在方法中</span><br><span class="line">    2.格式</span><br><span class="line">            new 接口/抽象类()&#123;</span><br><span class="line">                方法重写;</span><br><span class="line">            &#125;</span><br><span class="line">          多态形式体现:</span><br><span class="line">            接口类型 j = new 接口()&#123;</span><br><span class="line">                重写方法;</span><br><span class="line">            &#125;;     </span><br><span class="line">            //将=右边部分看做是接口实现类对象</span><br><span class="line">            抽象类类型 c = new 抽象类()&#123;</span><br><span class="line">                重写方法;</span><br><span class="line">            &#125;; </span><br><span class="line">            //将=右边部分看做是抽象类的子类对象</span><br><span class="line">        3.本质</span><br><span class="line">            1.常规接口(抽象类)使用步骤</span><br><span class="line">                1.定义实现类/子类</span><br><span class="line">                2.实现关系/继承关系</span><br><span class="line">                3.重写方法</span><br><span class="line">                4.创建对象</span><br><span class="line">                5.调用</span><br><span class="line">            2.匿名内部类使用接口(抽象类)的步骤</span><br><span class="line">                将传统1-4步骤整合,简化代码</span><br></pre></td></tr></table></figure><h4 id="6-匿名内部类使用场景">6.匿名内部类使用场景</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">结合多态进行使用,体现为:</span><br><span class="line">将方法形式参数定义为接口/父类类型,在方法调用时,</span><br><span class="line">传递匿名内部类对象作为实际参数,简化代码</span><br><span class="line">        </span><br><span class="line">其余情况:</span><br><span class="line">    创建类实现接口</span><br><span class="line">    创建类继承抽象类</span><br><span class="line">    重写抽象方法,创建子类/实现类对象</span><br><span class="line">    再使用对象</span><br></pre></td></tr></table></figure><h3 id="二-Lambda表达式">二.Lambda表达式</h3><h4 id="1-函数式编程思想">1.函数式编程思想</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line">   函数式编程思想和面向对象编程思想的区别</span><br><span class="line">答案:</span><br><span class="line">   函数式编程思想:强调的是所完成的需求本身</span><br><span class="line">   面向对象编程思想:强调的是指挥对象完成需求</span><br></pre></td></tr></table></figure><h4 id="2-Lambda表达式使用格式及前提条件">2.Lambda表达式使用格式及前提条件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line">   1.Lambda表达式使用前提</span><br><span class="line">   2.格式组成</span><br><span class="line">   3.使用技巧</span><br><span class="line">答案:</span><br><span class="line">   1.前提条件:有且只有一个抽象方法的接口</span><br><span class="line">   2.格式 -- lambda表达式关注的数据输入和输出</span><br><span class="line">      (形式参数列表) -&gt; &#123;方法体;&#125;</span><br><span class="line">   3.使用技巧:</span><br><span class="line">     方法参数要什么类型对象,new 什么类型,查看参数类型 ctrl + p</span><br><span class="line">     在传递匿名内部类位置(方法调用),alt + enter</span><br><span class="line">         1.replace with lambda -- 改写为lambda </span><br><span class="line">         2.replace with method reference -- 改写为方法引用 -- 进一步优化lambda</span><br><span class="line">     注意:</span><br><span class="line">       如果都不出现,不能改写,</span><br><span class="line">       如果1和2同时出现,使用2</span><br><span class="line">       如果只出现1,就使用1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-Lambda表达式练习">3.Lambda表达式练习</h4><h4 id="4-Lambda表达式省略格式">4.Lambda表达式省略格式</h4><p>建议:在方法实际参数位置传递匿名内部类对象,结合alt + 回车进行优化使用</p><p>不建议手动进行书写和优化,因为出错误的概率很高,而且阅读性不好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">建议使用快捷键</span><br><span class="line">():</span><br><span class="line">无参数:不能省略</span><br><span class="line">一个参数:同时省略数据类型以及()</span><br><span class="line">多个参数:同时省略所有数据类型</span><br><span class="line">-&gt;:</span><br><span class="line">不能动</span><br><span class="line">&#123;&#125;:</span><br><span class="line">有且仅有一条语句,同时省略&#123;&#125;,return,;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-匿名内部类和Lambda表达式区别">5.匿名内部类和Lambda表达式区别</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">区别:</span><br><span class="line">    1.能适应的类型</span><br><span class="line">        匿名内部类:接口,抽象类,非抽象类</span><br><span class="line">        lambda表达式:接口</span><br><span class="line">    2.使用限制</span><br><span class="line">        匿名内部类:对抽象方法数量没有限制</span><br><span class="line">        lambda表达式:有且只有一个抽象方法</span><br><span class="line">    3.实现原理                           </span><br><span class="line">        匿名内部类:编译会得到内部类的.class文件,并进行存储</span><br><span class="line">        lambda表达式:编译会得到内部类的.class文件,临时存储在内存中,使用完成销毁     </span><br><span class="line">        </span><br><span class="line">        结论:能使用lambda表达式或者方法引用进行优化,就进行使用,提高性能,减少class文件存储</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三-API">三.API</h3><h4 id="1-API概述">1.API概述</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line">    1.什么是JavaAPI</span><br><span class="line">    2.API手册基本使用 </span><br><span class="line">答案:</span><br><span class="line">1.JavaAPI:针对JDK工具提供的类的使用说明书</span><br><span class="line">2.基本使用</span><br><span class="line">1.双击打开</span><br><span class="line">2.索引搜索类名</span><br><span class="line">3.看类所属包</span><br><span class="line"> 4.看类的基本描述及版本号</span><br><span class="line">5.看构造方法</span><br><span class="line">6.看成员方法</span><br><span class="line">    1.状态修饰符,例如是否为static方法</span><br><span class="line">    2.看返回值类型</span><br><span class="line">    3.看形式参数列表</span><br><span class="line">    4.看方法描述</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="四-Math类-System类">四.Math类,System类</h3><h4 id="1-Math类">1.Math类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line"><span class="number">1.</span>Math类的特点</span><br><span class="line"><span class="number">2.</span>Math类常用方法</span><br><span class="line">答案:</span><br><span class="line">   <span class="number">1.</span>特点:</span><br><span class="line">   <span class="number">1.</span>类是被<span class="keyword">final</span>修饰的,不能被继承</span><br><span class="line">           <span class="number">2.</span>所有的方法都是静态方法,使用[类名.]进行调用</span><br><span class="line">           <span class="number">3.</span>构造方法被私有化,不能创建对象,并且在API手册中不显示私有化构造方法</span><br><span class="line">       <span class="number">2.</span>常用方法</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">abs</span><span class="params">(<span class="type">int</span> a)</span>:求绝对值</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">ceil</span><span class="params">(<span class="type">double</span> a)</span>:向上取整</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">floor</span><span class="params">(<span class="type">double</span> a)</span>:向下取整</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">round</span><span class="params">(<span class="type">float</span> a)</span>:四舍五入</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>:最大值</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>:最小值</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">pow</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span>:a的b次方</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">random</span><span class="params">()</span>:随机数,范围[<span class="number">0.0</span>,<span class="number">1.0</span>) </span><br><span class="line">       问题:如何使用Math.random()生成[<span class="number">1</span>-<span class="number">10</span>]之间的随机数?</span><br><span class="line">       生成[a,b]之间随机数                                    </span><br><span class="line">      (<span class="type">int</span>)(Math.random()*(b - a + <span class="number">1</span>)) + a                                      </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-System类">2.System类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line"><span class="number">1.</span>System类的特点</span><br><span class="line"><span class="number">2.</span>System类的常用方法</span><br><span class="line">答案:</span><br><span class="line">   <span class="number">1.</span>特点:</span><br><span class="line">   <span class="number">1.</span>类是被<span class="keyword">final</span>修饰的,不能被继承</span><br><span class="line">          <span class="number">2.</span>所有的方法都是静态方法,使用类名.进行调用</span><br><span class="line">          <span class="number">3.</span>构造方法被私有化,不能创建对象,并且在API手册中不显示私有化构造方法</span><br><span class="line">       <span class="number">2.</span>常用方法:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> status)</span> :结束JVM虚拟机,非<span class="number">0</span>表示异常终止</span><br><span class="line"><span class="keyword">static</span> <span class="type">long</span> <span class="title function_">currentTimeMillis</span><span class="params">()</span> :获取当前系统时间的毫秒值(从计算机时间原点开始)</span><br><span class="line">单位精确度:毫秒 (<span class="number">1</span>秒 = <span class="number">1000</span>毫秒)</span><br><span class="line">           </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src, <span class="type">int</span> srcPos, Object dest, <span class="type">int</span> destPos, <span class="type">int</span> length)</span> :</span><br><span class="line">       src:数据源数组(数据从哪里来)</span><br><span class="line">       srcPos:从哪个索引开始</span><br><span class="line">       dest:目的地数组(到哪里去)</span><br><span class="line">       destPos:到哪个索引位置</span><br><span class="line">       length:拷贝多少个</span><br><span class="line">   注意事项:</span><br><span class="line"><span class="number">1.</span>操作数组的方法,都要注意索引越界,并且传递的数组地址不能为<span class="literal">null</span></span><br><span class="line"><span class="number">2.</span>目的地数组可以装不满,但是不能装不下</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="五-Object和Objects">五.Object和Objects</h3><h4 id="1-Object类">1.Object类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line"><span class="number">1.</span>Object类的特点</span><br><span class="line"><span class="number">2.</span>Object类toString()方法的特点</span><br><span class="line"><span class="number">3.</span>Object类equals()方法特点</span><br><span class="line">答案:</span><br><span class="line">    <span class="number">1.</span>所有类都直接或间接继承自Object类,都可以使用Object类中的方法</span><br><span class="line">    <span class="number">2.</span>toString()</span><br><span class="line">  如果一个类没有重写toString(),默认使用Object类toString(),打印对象地址</span><br><span class="line">  如果一个类重写toString(),打印对象属性值</span><br><span class="line">  <span class="number">3.</span>equals() </span><br><span class="line">  如果一个类没有重写equals(),默认使用Object类equals(),内部使用==比较地址</span><br><span class="line">    如果一个类重写equals(),比较属性值</span><br><span class="line">    </span><br><span class="line">面试题:</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result1</span> <span class="operator">=</span> s.equals(sb);<span class="comment">//结果是?</span></span><br><span class="line"><span class="comment">//false</span></span><br><span class="line"><span class="comment">//String类中的equals()方法内部,会使用instanceof检测参数类型是不是String类型</span></span><br><span class="line"><span class="comment">//如果不是,返回false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">result2</span> <span class="operator">=</span> sb.equals(s);<span class="comment">//结果是?</span></span><br><span class="line"><span class="comment">//StringBuilder没有重写equals()方法,此时使用的是Object类的equals()</span></span><br><span class="line"><span class="comment">//内部是使用==比较对象地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-Objects类">2.Objects类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line">Objects类的作用</span><br><span class="line">答案:</span><br><span class="line">将Object类中操作对象的相关方法进行抽取,并简化调用方式</span><br><span class="line">方法:</span><br><span class="line"><span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(Object o)</span>: 如果对象为<span class="literal">null</span>,只能返回<span class="string">&quot;null&quot;</span></span><br><span class="line">        Object中的toString():</span><br><span class="line">打印对象,内部调用Stirng.valueOf(Object o)</span><br><span class="line">                如果参数传递的是<span class="literal">null</span>,返回的是<span class="string">&quot;null&quot;</span></span><br><span class="line">       Objects类中toString()</span><br><span class="line">            o对象调用toString()</span><br><span class="line">                <span class="number">1.</span>没有重写,使用的是Object类的,打印的对象地址</span><br><span class="line">                <span class="number">2.</span>重写,打印的是对象属性值</span><br><span class="line"><span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(Object o, String nullDefault)</span>:如果对象为<span class="literal">null</span>,可以返回自定义字符串</span><br><span class="line">            判断o是否为<span class="literal">null</span></span><br><span class="line">                不为<span class="literal">null</span>,调用toString()</span><br><span class="line">                为<span class="literal">null</span>,返回String nullDefault</span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNull</span><span class="params">(Object obj)</span>:判断对象的地址值是否为<span class="literal">null</span> 底层:== <span class="literal">null</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">nonNull</span><span class="params">(Object obj)</span>:判断对象的地址值是否不为<span class="literal">null</span> 底层:!=<span class="literal">null</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="五-BigDecimal类">五.BigDecimal类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line"><span class="number">1.</span>BigDecimal类的作用</span><br><span class="line"><span class="number">2.</span>哪种构造方法精度高</span><br><span class="line"><span class="number">3.</span>如何进行精确小数位的操作</span><br><span class="line">答案:</span><br><span class="line">    <span class="number">1.</span>作用:进行数据精确运算</span><br><span class="line">    <span class="number">2.</span>构造方法:</span><br><span class="line">BigDecimal(<span class="type">double</span> val):将<span class="type">double</span>类型数据封装为BigDecimal</span><br><span class="line"><span class="title function_">BigDecimal</span><span class="params">(String val)</span>:将String类型的数值封装为BigDecimal</span><br><span class="line">其中,使用String类型参数构造方法,精确度更高</span><br><span class="line">注意:构造方法内传递的字符串,只能是数值,不能有字母等其他字符</span><br><span class="line"><span class="number">3.</span>四则运算方法</span><br><span class="line">加法:BigDecimal <span class="title function_">add</span><span class="params">(BigDecimal augend)</span></span><br><span class="line">减法:BigDecimal <span class="title function_">subtract</span><span class="params">(BigDecimal subtrahend)</span></span><br><span class="line">乘法:BigDecimal <span class="title function_">multiply</span><span class="params">(BigDecimal multiplicand)</span></span><br><span class="line">除法BigDecimal <span class="title function_">divide</span><span class="params">(BigDecimal divisor)</span></span><br><span class="line"></span><br><span class="line">特殊方法:除法精确小数点位数</span><br><span class="line">BigDecimal <span class="title function_">divide</span><span class="params">(BigDecimal divisor, <span class="type">int</span> scale, RoundingMode roundingMode)</span></span><br><span class="line">        BigDecimal divisor:分母,被除数</span><br><span class="line">        <span class="type">int</span> scale:保留小数点后几位</span><br><span class="line">        RoundingMode roundingMode:舍入模式</span><br><span class="line">            RoundingMode.UP : 进一法</span><br><span class="line">            RoundingMode.FLOOR : 去尾法</span><br><span class="line">            RoundingMode.HALF_UP :四舍五入   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="day05-API">day05_API</h2><h3 id="一-基本类型包装类">一.基本类型包装类</h3><h4 id="1-概述-2">1.概述</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line"><span class="number">1.</span>基本类型包装类作用</span><br><span class="line"><span class="number">2.</span>基本类型对应包装类是什么</span><br><span class="line">答案:</span><br><span class="line">   <span class="number">1.</span>作用:</span><br><span class="line">   <span class="number">1.</span>集合容器只能存储引用数据类型,需要将基本数据类型进行转换才能存储</span><br><span class="line">   <span class="number">2.</span>基本数据类型没有操作数据的相关方法</span><br><span class="line">       <span class="number">2.</span>    </span><br><span class="line">整数</span><br><span class="line">               <span class="type">byte</span> -- Byte</span><br><span class="line">               <span class="type">short</span> -- Short</span><br><span class="line">               <span class="type">int</span> -- (Integer)</span><br><span class="line">               <span class="type">long</span> -- Long</span><br><span class="line">           浮点</span><br><span class="line">               <span class="type">float</span> -- Float</span><br><span class="line">               <span class="type">double</span> -- Double</span><br><span class="line">           字符</span><br><span class="line">               <span class="type">char</span> -- (Character)</span><br><span class="line">           布尔</span><br><span class="line">               <span class="type">boolean</span> -- Boolean</span><br><span class="line">               </span><br></pre></td></tr></table></figure><h4 id="2-Integer类">2.Integer类</h4><h5 id="1-构造方法-过时">1.构造方法(过时)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer(<span class="type">int</span> value):将<span class="type">int</span>数据封装为Integer对象</span><br><span class="line">Integer(String s):将String数值封装为Integer对象</span><br></pre></td></tr></table></figure><h5 id="2-静态方法">2.静态方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span>:将<span class="type">int</span>数据封装为Integer对象</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> Integer.valueOf(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(String s)</span>:将String数值封装Integer对象</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> Integer.valueOf(<span class="string">&quot;100&quot;</span>);<span class="comment">//注意:必须传递整数数值字符串</span></span><br></pre></td></tr></table></figure><h5 id="3-自动装箱和自动拆箱">3.自动装箱和自动拆箱</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line"><span class="number">1.</span>什么是自动拆箱?</span><br><span class="line">    <span class="number">2.</span>什么是自动装箱?</span><br><span class="line">答案:</span><br><span class="line"><span class="number">1.</span>自动拆箱: Integer对象调用<span class="type">int</span> <span class="title function_">intValue</span><span class="params">()</span></span><br><span class="line">使用包装类类型数据可以直接给对应基本类型变量赋值</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="number">2.</span>自动装箱:Integer.valueOf(<span class="type">int</span> i)</span><br><span class="line">使用基本数据类型可以直接给对应的包装类类型变量赋值</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> num;</span><br><span class="line">案例:</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">i += <span class="number">100</span>;</span><br><span class="line">数据转换过程?</span><br><span class="line">   <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//Integer i = Integer.valueOf(100);</span></span><br><span class="line">i += <span class="number">100</span>; <span class="comment">//i + (Integer)(i + 100)    </span></span><br><span class="line"><span class="comment">//自动拆箱 i转换为int类型 -- int类型 200</span></span><br><span class="line"><span class="comment">//自动装箱 Integer.valueOf(200)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-String和int类型转换">4.String和int类型转换</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="type">int</span>转换为String</span><br><span class="line"><span class="number">1.</span><span class="string">&quot;&quot;</span>+ 字符串拼接</span><br><span class="line"><span class="number">2.</span>String.valueOf(<span class="type">int</span>类型数据) -- 推荐使用</span><br><span class="line"><span class="number">2.</span>String转换为<span class="type">int</span></span><br><span class="line">Integer.parseInt(字符串类型整数) -- 推荐使用</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.valueOf(String s) -- 能用,但是不太行</span><br><span class="line">    <span class="comment">//性能不行</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> Integer.valueOf(String s);</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> i.intValue();</span><br></pre></td></tr></table></figure><h5 id="5-练习">5.练习</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;1 2 3 4 5&quot;</span>;</span><br><span class="line">将字符串中每一个数据存储到<span class="type">int</span>[]中,并遍历数组,打印数据</span><br><span class="line">操作步骤:</span><br><span class="line"><span class="number">1.</span>将字符串按照<span class="string">&quot;空格&quot;</span>进行切割</span><br><span class="line">String[] split(String regex)</span><br><span class="line">    <span class="number">2.</span>创建<span class="type">int</span>[],和String[]长度相同</span><br><span class="line">    <span class="number">3.</span>遍历String[],获取每一个字符串(数值型)</span><br><span class="line">    <span class="number">4.</span>转换为<span class="type">int</span>, Integer.parseInt(数值型字符串)</span><br><span class="line">    <span class="number">5.</span>存储数据到<span class="type">int</span>[]</span><br><span class="line">    <span class="number">6.</span>遍历<span class="type">int</span>[]</span><br></pre></td></tr></table></figure><h3 id="二-数组高级操作">二.数组高级操作</h3><h4 id="1-二分查找法">1.二分查找法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line">二分查找法使用前提条件</span><br><span class="line">答案:</span><br><span class="line">数组元素要有顺序</span><br><span class="line"></span><br><span class="line">思路分析:</span><br><span class="line"><span class="number">1.</span>查找范围索引[min,max],如果要是查询整个数组,范围[<span class="number">0</span>,数组长度-<span class="number">1</span>]</span><br><span class="line"><span class="number">2.</span>查找的结束条件</span><br><span class="line">循环时,当min&gt;max 结束循环,返回-<span class="number">1</span>,表明不存在该元素</span><br><span class="line">      当min&lt;=max,继续循环</span><br><span class="line"><span class="number">3.</span>可以查找的情况下(min&lt;=max)</span><br><span class="line">   <span class="number">1.</span>计算中间索引位置 mid = (min + max)/<span class="number">2</span> -- 注意:mid表示的是索引位置不是元素</span><br><span class="line">   <span class="number">2.</span>使用要查找的元素和mid索引位置的元素进行比较</span><br><span class="line">          <span class="number">1.</span>查找的元素 &gt; mid位置元素 在mid位置的右边下次查找范围[mid+<span class="number">1</span>,max]</span><br><span class="line">          <span class="number">2.</span>查找的元素 &lt; mid位置元素 在mid位置的左边下次查找范围[min,mid-<span class="number">1</span>]</span><br><span class="line">          <span class="number">3.</span>相等 找到了 返回当前mid值</span><br><span class="line">          </span><br><span class="line">          <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span> <span class="number">5</span> <span class="number">6</span> <span class="number">6</span> <span class="number">7</span> <span class="number">7</span> <span class="number">8</span> <span class="number">8</span> <span class="number">9</span> <span class="number">9</span> <span class="number">10</span> <span class="number">10</span></span><br><span class="line">    遍历:<span class="number">19</span>次</span><br><span class="line">二分:<span class="number">4</span>次</span><br><span class="line">代码实现:</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-冒泡排序">2.冒泡排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">思路分析:</span><br><span class="line"><span class="number">1.</span>相邻元素两两进行比较,大的放在右边,小的放在左边进行交换</span><br><span class="line"><span class="number">2.</span>每一轮确定当前轮次的最大值,放在最右边</span><br><span class="line"><span class="number">3.</span>下一轮比较会少一个元素,少的是上一轮得到的最大值</span><br><span class="line"><span class="number">4.</span>最后一次自己和自己比较,不需要进行的</span><br><span class="line"></span><br><span class="line">结论:</span><br><span class="line">      n个数据参与比较,比较n-<span class="number">1</span>次</span><br><span class="line">      每一轮会得到一个最大值,不参与下一轮的比较</span><br><span class="line">      </span><br><span class="line">代码实现:</span><br><span class="line"><span class="number">1.</span>外层循环作用:控制交换的轮次,长度为n的数组交换n-<span class="number">1</span>次</span><br><span class="line"><span class="number">2.</span>内层循环作用:获取元素进行交换操作</span><br><span class="line">-<span class="number">1</span>:为了防止索引越界</span><br><span class="line">-i:每一轮少一个最大值参与下一次比较</span><br></pre></td></tr></table></figure><h4 id="3-递归">3.递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line"><span class="number">1.</span>什么是递归</span><br><span class="line"><span class="number">2.</span>递归的作用</span><br><span class="line"><span class="number">3.</span>递归的注意事项</span><br><span class="line">答案:</span><br><span class="line"><span class="number">1.</span>递归在程序中体现为方法调用自身</span><br><span class="line"><span class="number">2.</span>作用:</span><br><span class="line">解决复杂问题,复杂问题可以拆解为解决思路相同的小问题,以极少的代码实现需求</span><br><span class="line"><span class="number">3.</span>注意事项:</span><br><span class="line"><span class="number">1.</span>必须要有出口,否则栈内存溢出</span><br><span class="line">            <span class="number">2.</span>小问题解决思路要和大问题相同 -- 方法体可以复用的</span><br><span class="line">练习:</span><br><span class="line"><span class="number">1.</span>求<span class="number">1</span>-<span class="number">100</span>之间数据和</span><br><span class="line"><span class="number">2.</span>求<span class="number">5</span>的阶乘</span><br><span class="line">场景:</span><br><span class="line"><span class="number">1.</span>数组快速排序</span><br><span class="line"><span class="number">2.</span>IO统计文件/文件夹</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="4-Arrays数组工具类">4.Arrays数组工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>toString(数组名):</span><br><span class="line">思考:如果存储的元素是自定义类对象,想要打印的数组格式中是元素内容,怎么做?</span><br><span class="line">     <span class="number">1.</span>数组中存储的是基本数据类型</span><br><span class="line">          打印出来的是[数据值, 数据值, ...]</span><br><span class="line">     <span class="number">2.</span>数组中存储的是引用数据类型</span><br><span class="line">         如果重写Object的toString(),打印[属性值, 属性值, ...]</span><br><span class="line">         没有重写,[地址值, 地址值, ...]</span><br><span class="line"><span class="number">2.</span>sort(数组名):</span><br><span class="line">对数组中元素进行快速排序</span><br><span class="line">    目前为止只能排序基本数据类型,以及String字符串</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(数组名,查找的元素)</span>:</span><br><span class="line">先sort,再使用</span><br><span class="line">    二分查找法</span><br><span class="line">    使用前提:数组元素有顺序</span><br><span class="line">    返回值:元素存在,返回索引位置</span><br><span class="line">          元素不存在,返回[-插入点-<span class="number">1</span>]</span><br><span class="line">          插入点:元素如果存在,应该在数组中的哪个索引位置上</span><br><span class="line">          -<span class="number">1</span>:如果元素应该出现在<span class="number">0</span>索引位置,返回-<span class="number">0</span>证明出现在<span class="number">0</span>索引,返回的数据是错误的,此时-<span class="number">1</span>变成-<span class="number">1</span>,避免该问题产生</span><br><span class="line"></span><br><span class="line">补充:</span><br><span class="line">Arrays的数组拷贝方法</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三-异常">三.异常***</h3><h4 id="1-异常体系结构及分类">1.异常体系结构及分类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line"><span class="number">1.</span>什么是异常</span><br><span class="line"><span class="number">2.</span>异常体系结构</span><br><span class="line">答案:</span><br><span class="line"><span class="number">1.</span>异常指的是程序出现的不正常情况</span><br><span class="line"><span class="number">2.</span>体系结构</span><br><span class="line">Throwable</span><br><span class="line">--Error:错误,程序无法运行,通过更改程序无法解决问题,如栈内存溢出</span><br><span class="line">--Exception:异常</span><br><span class="line">--RuntimeException及其子类 -- 右键run会产生的</span><br><span class="line">运行时期异常,.class文件运行过程中可能会出现的异常</span><br><span class="line">--非RuntimeException -- 编译时期出现的方法使用红色波浪线</span><br><span class="line">编译时期异常,在.java文件编译成为可运行的.class文件的过程中出现的异常,编译时期不手动处理,不能通过编译</span><br></pre></td></tr></table></figure><h4 id="2-虚拟机默认异常处理方式">2.虚拟机默认异常处理方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">示例代码:</span><br><span class="line"><span class="type">int</span>[] arr = <span class="literal">null</span>;</span><br><span class="line">System.out.println(arr.length);<span class="comment">//产生空指针异常</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>在产生异常位置,创建当前异常类对象,剩余代码不执行</span><br><span class="line">此时:<span class="keyword">new</span> <span class="title class_">NullPointerException</span>()</span><br><span class="line"><span class="number">2.</span>检查程序中是否存在手动捕获该异常对象的代码   </span><br><span class="line">此时:没有手动捕获</span><br><span class="line"><span class="number">3.</span>虚拟机默认处理</span><br><span class="line"><span class="number">1.</span>将异常对象中的信息以红色字体打印在控制台</span><br><span class="line"><span class="number">2.</span>终止异常程序</span><br></pre></td></tr></table></figure><h4 id="3-throws">3.throws</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line"><span class="number">1.</span><span class="keyword">throws</span>的作用</span><br><span class="line"><span class="number">2.</span><span class="keyword">throws</span>使用格式</span><br><span class="line"><span class="number">3.</span><span class="keyword">throws</span>是否进行了手动异常处理</span><br><span class="line">答案:</span><br><span class="line"><span class="number">1.</span>作用:声明异常,使用<span class="keyword">throws</span>进行声明的方法表示该方法可能会产生被声明的异常</span><br><span class="line"><span class="number">2.</span>格式:</span><br><span class="line">修饰符 返回值类型 方法名(形式参数列表) <span class="keyword">throws</span> 异常类名&#123;</span><br><span class="line">          可能出现异常的代码;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">3.</span>注意:</span><br><span class="line"><span class="number">1.</span><span class="keyword">throws</span>只是声明方法可能存在的异常类型,但是并没有捕获并处理异常对象</span><br><span class="line"><span class="number">2.</span>如果当前方法声明的是编译时期异常,那么调用该方法的方法</span><br><span class="line"><span class="number">1.</span>手动编写捕获异常对象并处理</span><br><span class="line"><span class="number">2.</span>将方法添加<span class="keyword">throws</span>声明</span><br><span class="line"><span class="number">3.</span>如果当前方法声明的是运行时期异常,那么可以不添加<span class="keyword">throws</span>声明</span><br></pre></td></tr></table></figure><h4 id="4-throw">4.throw</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line"><span class="number">1.</span>throw的作用</span><br><span class="line"><span class="number">2.</span>throw使用格式</span><br><span class="line"><span class="number">3.</span>throw是否进行手动异常处理</span><br><span class="line">答案:</span><br><span class="line"><span class="number">1.</span>作用:抛出手动创建的异常对象(包括自定义异常类对象)</span><br><span class="line"><span class="number">2.</span>格式:</span><br><span class="line">方法内 <span class="keyword">throw</span> <span class="keyword">new</span> 异常类名(String 异常信息);</span><br><span class="line"><span class="number">3.</span>注意:</span><br><span class="line"><span class="keyword">throw</span>只是手动将异常对象进行抛出,但是并没有捕获并处理异常对象</span><br></pre></td></tr></table></figure><h4 id="5-try…catch">5.try…catch</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line"><span class="number">1.</span><span class="keyword">try</span>...<span class="keyword">catch</span>作用</span><br><span class="line"><span class="number">2.</span>使用<span class="keyword">try</span>...<span class="keyword">catch</span>处理异常的好处</span><br><span class="line"><span class="number">3.</span>使用格式</span><br><span class="line"><span class="number">4.</span>使用时的常见问题</span><br><span class="line">答案:</span><br><span class="line"><span class="number">1.</span>作用:手动捕获异常对象并进行相应的异常处理</span><br><span class="line"><span class="number">2.</span>好处:</span><br><span class="line"><span class="number">1.</span>可以针对捕获的异常对象进行针对性处理</span><br><span class="line"><span class="number">2.</span>不会结束程序运行</span><br><span class="line"><span class="number">3.</span>格式</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">                可能出现异常的代码<span class="number">1</span><span class="comment">//得到异常对象</span></span><br><span class="line">                可能出现异常的代码<span class="number">2</span></span><br><span class="line">                可能出现异常的代码<span class="number">3</span></span><br><span class="line">                可能出现异常的代码<span class="number">4</span></span><br><span class="line">            &#125;<span class="keyword">catch</span>(异常类名<span class="number">1</span> 对象名<span class="number">1</span>)&#123;</span><br><span class="line">                对异常的处理</span><br><span class="line">                <span class="number">1.</span>打印异常信息</span><br><span class="line">                <span class="number">2.</span>日志技术记录异常信息</span><br><span class="line">            &#125;<span class="keyword">catch</span>(异常类名<span class="number">2</span> 对象名<span class="number">2</span>)&#123;</span><br><span class="line">               ...</span><br><span class="line">            &#125;...</span><br><span class="line">                <span class="keyword">finally</span>&#123;<span class="comment">//IO流再讲解</span></span><br><span class="line">            释放资源</span><br><span class="line">            &#125;</span><br><span class="line"><span class="number">4.</span>常见问题:</span><br><span class="line"><span class="number">1.</span><span class="keyword">try</span>&#123;&#125;包裹的代码没有出现异常,此时程序正常执行,相当于没有书写<span class="keyword">try</span>..<span class="keyword">catch</span>语句结构</span><br><span class="line"><span class="number">2.</span><span class="keyword">try</span>&#123;&#125;包裹的代码出现异常,从产生异常的位置,跳转到对应的<span class="keyword">catch</span>语句,<span class="keyword">try</span>中剩余代码不会执行</span><br><span class="line"><span class="number">3.</span>如果<span class="keyword">catch</span>语句没能捕获到<span class="keyword">try</span>中出现的异常,此时<span class="keyword">try</span>...<span class="keyword">catch</span>语句失效,会采取虚拟机默认处理异常方式</span><br><span class="line"><span class="number">4.</span>如果<span class="keyword">try</span>&#123;&#125;中可能会出现多种异常,可以书写多个匹配的<span class="keyword">catch</span>语句进行捕获处理</span><br><span class="line">如果多个捕获的异常类型之间存在子父类关系,一定要将父类类型写在最下面的<span class="keyword">catch</span>中</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span>,<span class="keyword">throws</span>以及<span class="keyword">try</span>...<span class="keyword">catch</span>配合使用</span><br><span class="line"><span class="keyword">throw</span>产生对象</span><br><span class="line"><span class="keyword">throws</span>负责给<span class="keyword">catch</span>提供捕获类型</span><br><span class="line"><span class="keyword">try</span>...<span class="keyword">catch</span>根据捕获类型进行对应处理</span><br></pre></td></tr></table></figure><h4 id="6-throwable成员方法">6.throwable成员方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getMessage</span><span class="params">()</span>:获取异常的简短描述  [异常产生原因]</span><br><span class="line">String <span class="title function_">toString</span><span class="params">()</span>:异常的详细信息 [异常类型 + 异常产生原因]</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">printStackTrace</span><span class="params">()</span>:以红色字体将异常信息打印到控制台 [异常类型 + 异常产生原因 + 产生位置]</span><br></pre></td></tr></table></figure><h4 id="6-练习">6.练习</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">需求:</span><br><span class="line">键盘录入学生的姓名和年龄,</span><br><span class="line">其中年龄为 <span class="number">18</span> - <span class="number">25</span>岁,超出这个范围是异常数据不能赋值,需要重新录入,一直录到正确为止</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>设计Student类型</span><br><span class="line">在setAge(<span class="type">int</span> age)方法中,设置判断,满足条件,赋值</span><br><span class="line">否则抛出运行时异常</span><br><span class="line"><span class="number">2.</span>测试类中捕获异常对象并进行提示</span><br><span class="line"></span><br><span class="line">案例弊端:</span><br><span class="line">使用的是RuntimeException,不能见名知意</span><br></pre></td></tr></table></figure><h4 id="7-自定义异常">7.自定义异常</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line"><span class="number">1.</span>自定义异常的作用</span><br><span class="line"><span class="number">2.</span>编写格式</span><br><span class="line">答案:</span><br><span class="line"><span class="number">1.</span>作用:根据程序需求,创建所需的异常类型</span><br><span class="line"><span class="number">2.</span>格式</span><br><span class="line">编写格式:</span><br><span class="line"><span class="number">1.</span>编译时期异常</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxxException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">          <span class="keyword">public</span> <span class="title function_">XxxxException</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">          <span class="keyword">public</span> <span class="title function_">XxxxException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">          <span class="built_in">super</span>(message);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="number">2.</span>运行时期异常</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxxException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;<span class="comment">//运行时期异常</span></span><br><span class="line">           <span class="keyword">public</span> <span class="title function_">XxxxException</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">           <span class="keyword">public</span> <span class="title function_">XxxxException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">           <span class="built_in">super</span>(message);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    使用格式:</span><br><span class="line">方法内:<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">XxxxException</span>(<span class="string">&quot;异常信息&quot;</span>);</span><br><span class="line">方法调用处:</span><br><span class="line"><span class="number">1.</span>不手动处理,<span class="keyword">throws</span>声明,交给调用该方法的方法处理</span><br><span class="line"><span class="number">2.</span><span class="keyword">try</span>...<span class="keyword">catch</span>捕获处理</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="day06-4">day06</h2><h3 id="JDK8时间日期类">JDK8时间日期类</h3><h4 id="1-JDK8新增日期类-理解">1.JDK8新增日期类 (理解)</h4><ul><li>LocalDate       表示日期（年月日）</li><li>LocalTime       表示时间（时分秒）</li><li>LocalDateTime    表示时间+ 日期 （年月日时分秒）</li></ul><h4 id="2-LocalDateTime创建方法-应用">2. LocalDateTime创建方法 (应用)</h4><ul><li><p>方法说明</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static LocalDateTime now()</td><td>获取当前系统时间</td></tr><tr><td>public static LocalDateTime of  (年, 月 , 日, 时, 分, 秒)</td><td>使用指定年月日和时分秒初始化一个LocalDateTime对象</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDK8DateDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(now);</span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-LocalDateTime获取方法-应用">3. LocalDateTime获取方法 (应用)</h4><ul><li><p>方法说明</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public int getYear()</td><td>获取年</td></tr><tr><td>public int getMonthValue()</td><td>获取月份（1-12）</td></tr><tr><td>public int getDayOfMonth()</td><td>获取月份中的第几天（1-31）</td></tr><tr><td>public int getDayOfYear()</td><td>获取一年中的第几天（1-366）</td></tr><tr><td>public DayOfWeek getDayOfWeek()</td><td>获取星期</td></tr><tr><td>public int getMinute()</td><td>获取分钟</td></tr><tr><td>public int getHour()</td><td>获取小时</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDK8DateDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="comment">//public int getYear()           获取年</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> localDateTime.getYear();</span><br><span class="line">        System.out.println(<span class="string">&quot;年为&quot;</span> +year);</span><br><span class="line">        <span class="comment">//public int getMonthValue()     获取月份（1-12）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> localDateTime.getMonthValue();</span><br><span class="line">        System.out.println(<span class="string">&quot;月份为&quot;</span> + month);</span><br><span class="line"></span><br><span class="line">        <span class="type">Month</span> <span class="variable">month1</span> <span class="operator">=</span> localDateTime.getMonth();</span><br><span class="line"><span class="comment">//        System.out.println(month1);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public int getDayOfMonth()     获取月份中的第几天（1-31）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> localDateTime.getDayOfMonth();</span><br><span class="line">        System.out.println(<span class="string">&quot;日期为&quot;</span> + day);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public int getDayOfYear()      获取一年中的第几天（1-366）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">dayOfYear</span> <span class="operator">=</span> localDateTime.getDayOfYear();</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一年中的第&quot;</span> + dayOfYear + <span class="string">&quot;天&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public DayOfWeek getDayOfWeek()获取星期</span></span><br><span class="line">        <span class="type">DayOfWeek</span> <span class="variable">dayOfWeek</span> <span class="operator">=</span> localDateTime.getDayOfWeek();</span><br><span class="line">        System.out.println(<span class="string">&quot;星期为&quot;</span> + dayOfWeek);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public int getMinute()        获取分钟</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> localDateTime.getMinute();</span><br><span class="line">        System.out.println(<span class="string">&quot;分钟为&quot;</span> + minute);</span><br><span class="line">        <span class="comment">//public int getHour()           获取小时</span></span><br><span class="line">  </span><br><span class="line">        <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> localDateTime.getHour();</span><br><span class="line">        System.out.println(<span class="string">&quot;小时为&quot;</span> + hour);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-LocalDateTime转换方法-应用">4. LocalDateTime转换方法 (应用)</h4><ul><li><p>方法说明</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public LocalDate  toLocalDate ()</td><td>转换成为一个LocalDate对象</td></tr><tr><td>public LocalTime toLocalTime ()</td><td>转换成为一个LocalTime对象</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDK8DateDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="comment">//public LocalDate toLocalDate ()    转换成为一个LocalDate对象</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> localDateTime.toLocalDate();</span><br><span class="line">        System.out.println(localDate);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public LocalTime toLocalTime ()    转换成为一个LocalTime对象</span></span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">localTime</span> <span class="operator">=</span> localDateTime.toLocalTime();</span><br><span class="line">        System.out.println(localTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-LocalDateTime格式化和解析-应用">5. LocalDateTime格式化和解析 (应用)</h4><ul><li><p>方法说明</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public String format (指定格式)</td><td>把一个LocalDateTime格式化成为一个字符串</td></tr><tr><td>public LocalDateTime parse (准备解析的字符串, 解析格式)</td><td>把一个日期字符串解析成为一个LocalDateTime对象</td></tr><tr><td>public static DateTimeFormatter ofPattern(String pattern)</td><td>使用指定的日期模板获取一个日期格式化器DateTimeFormatter对象</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDK8DateDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//public static LocalDateTime parse (准备解析的字符串, 解析格式) 把一个日期字符串解析成为一个LocalDateTime对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;2020年11月12日 13:14:15&quot;</span>;</span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">pattern</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">parse</span> <span class="operator">=</span> LocalDateTime.parse(s, pattern);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">        <span class="comment">//public String format (指定格式)   把一个LocalDateTime格式化成为一个字符串</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">pattern</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> localDateTime.format(pattern);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-LocalDateTime增加或者减少时间的方法-应用">6. LocalDateTime增加或者减少时间的方法 (应用)</h4><ul><li><p>方法说明</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public LocalDateTime plusYears (long years)</td><td>添加或者减去年</td></tr><tr><td>public LocalDateTime plusMonths(long months)</td><td>添加或者减去月</td></tr><tr><td>public LocalDateTime plusDays(long days)</td><td>添加或者减去日</td></tr><tr><td>public LocalDateTime plusHours(long hours)</td><td>添加或者减去时</td></tr><tr><td>public LocalDateTime plusMinutes(long minutes)</td><td>添加或者减去分</td></tr><tr><td>public LocalDateTime plusSeconds(long seconds)</td><td>添加或者减去秒</td></tr><tr><td>public LocalDateTime plusWeeks(long weeks)</td><td>添加或者减去周</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK8 时间类添加或者减去时间的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDK8DateDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public LocalDateTime plusYears (long years)   添加或者减去年</span></span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>);</span><br><span class="line">        <span class="comment">//LocalDateTime newLocalDateTime = localDateTime.plusYears(1);</span></span><br><span class="line">        <span class="comment">//System.out.println(newLocalDateTime);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">newLocalDateTime</span> <span class="operator">=</span> localDateTime.plusYears(-<span class="number">1</span>);</span><br><span class="line">        System.out.println(newLocalDateTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-LocalDateTime减少或者增加时间的方法-应用">7. LocalDateTime减少或者增加时间的方法 (应用)</h4><ul><li><p>方法说明</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public LocalDateTime  minusYears (long years)</td><td>减去或者添加年</td></tr><tr><td>public LocalDateTime  minusMonths(long months)</td><td>减去或者添加月</td></tr><tr><td>public LocalDateTime minusDays(long days)</td><td>减去或者添加日</td></tr><tr><td>public LocalDateTime minusHours(long hours)</td><td>减去或者添加时</td></tr><tr><td>public LocalDateTime minusMinutes(long minutes)</td><td>减去或者添加分</td></tr><tr><td>public LocalDateTime minusSeconds(long seconds)</td><td>减去或者添加秒</td></tr><tr><td>public LocalDateTime minusWeeks(long weeks)</td><td>减去或者添加周</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK8 时间类减少或者添加时间的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDK8DateDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public LocalDateTime minusYears (long years)  减去或者添加年</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>);</span><br><span class="line">        <span class="comment">//LocalDateTime newLocalDateTime = localDateTime.minusYears(1);</span></span><br><span class="line">        <span class="comment">//System.out.println(newLocalDateTime);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">newLocalDateTime</span> <span class="operator">=</span> localDateTime.minusYears(-<span class="number">1</span>);</span><br><span class="line">        System.out.println(newLocalDateTime);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-LocalDateTime修改方法-应用">8. LocalDateTime修改方法 (应用)</h4><ul><li><p>方法说明</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public LocalDateTime withYear(int year)</td><td>直接修改年</td></tr><tr><td>public LocalDateTime withMonth(int month)</td><td>直接修改月</td></tr><tr><td>public LocalDateTime withDayOfMonth(int dayofmonth)</td><td>直接修改日期(一个月中的第几天)</td></tr><tr><td>public LocalDateTime withDayOfYear(int dayOfYear)</td><td>直接修改日期(一年中的第几天)</td></tr><tr><td>public LocalDateTime withHour(int hour)</td><td>直接修改小时</td></tr><tr><td>public LocalDateTime withMinute(int minute)</td><td>直接修改分钟</td></tr><tr><td>public LocalDateTime withSecond(int second)</td><td>直接修改秒</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK8 时间类修改时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDK8DateDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public LocalDateTime withYear(int year)   修改年</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>);</span><br><span class="line">       <span class="comment">// LocalDateTime newLocalDateTime = localDateTime.withYear(2048);</span></span><br><span class="line">       <span class="comment">// System.out.println(newLocalDateTime);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">newLocalDateTime</span> <span class="operator">=</span> localDateTime.withMonth(<span class="number">20</span>);</span><br><span class="line">        System.out.println(newLocalDateTime);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-Period-应用">9. Period (应用)</h4><ul><li><p>方法说明</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static Period between(开始时间,结束时间)</td><td>计算两个“时间&quot;的间隔</td></tr><tr><td>public int getYears()</td><td>获得这段时间的年数</td></tr><tr><td>public int getMonths(大坑)</td><td>获得此期间的总月数</td></tr><tr><td>public long until(Temporal endExclusive,                TemporalUnit unit)根据指定的单位计算直到另一个日期的时间量。</td><td>获得此期间的月数</td></tr><tr><td>public int getDays()(大坑)</td><td>获得此期间的天数</td></tr><tr><td>通常用public long toEpochDay()方法计算两个日期相隔时间</td><td>描述从接口<code>ChronoLocalDate</code>复制  将此日期转换为大纪元日。</td></tr><tr><td>public long toTotalMonths()</td><td>获取此期间的总月数</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  计算两个时间的间隔</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDK8DateDemo9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public static Period between(开始时间,结束时间)  计算两个&quot;时间&quot;的间隔</span></span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">localDate1</span> <span class="operator">=</span> LocalDate.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">localDate2</span> <span class="operator">=</span> LocalDate.of(<span class="number">2048</span>, <span class="number">12</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="type">Period</span> <span class="variable">period</span> <span class="operator">=</span> Period.between(localDate1, localDate2);</span><br><span class="line">        System.out.println(period);<span class="comment">//P28Y11M11D</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public int getYears()         获得这段时间的年数</span></span><br><span class="line">        System.out.println(period.getYears());<span class="comment">//28</span></span><br><span class="line">        <span class="comment">//public int getMonths()        获得此期间的月数</span></span><br><span class="line">        System.out.println(period.getMonths());<span class="comment">//11</span></span><br><span class="line">        <span class="comment">//public int getDays()          获得此期间的天数</span></span><br><span class="line">        System.out.println(period.getDays());<span class="comment">//11</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public long toTotalMonths()   获取此期间的总月数</span></span><br><span class="line">        System.out.println(period.toTotalMonths());<span class="comment">//347</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="10-Duration-应用">10. Duration (应用)</h4><ul><li><p>方法说明</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static Durationbetween(开始时间,结束时间)</td><td>计算两个“时间&quot;的间隔</td></tr><tr><td>public long toSeconds()</td><td>获得此时间间隔的秒</td></tr><tr><td>public int toMillis()</td><td>获得此时间间隔的毫秒</td></tr><tr><td>public int toNanos()</td><td>获得此时间间隔的纳秒</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  计算两个时间的间隔</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDK8DateDemo10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public static Duration between(开始时间,结束时间)  计算两个“时间&quot;的间隔</span></span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime1</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime2</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>);</span><br><span class="line">        <span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(localDateTime1, localDateTime2);</span><br><span class="line">        System.out.println(duration);<span class="comment">//PT21H57M58S</span></span><br><span class="line">        <span class="comment">//public long toSeconds()       获得此时间间隔的秒</span></span><br><span class="line">        System.out.println(duration.toSeconds());<span class="comment">//79078</span></span><br><span class="line">        <span class="comment">//public int toMillis()           获得此时间间隔的毫秒</span></span><br><span class="line">        System.out.println(duration.toMillis());<span class="comment">//79078000</span></span><br><span class="line">        <span class="comment">//public int toNanos()             获得此时间间隔的纳秒</span></span><br><span class="line">        System.out.println(duration.toNanos());<span class="comment">//79078000000000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exercises </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE_Exercises_Codes</title>
      <link href="/2022/07/03/JavaSE_Exercises_Codes/"/>
      <url>/2022/07/03/JavaSE_Exercises_Codes/</url>
      
        <content type="html"><![CDATA[<h2 id="day01-3">day01</h2><h3 id="三-Java入门程序">三.Java入门程序</h3><h4 id="3-HelloWorld案例">3.HelloWorld案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-Java语法">四.Java语法</h3><h4 id="3-常量-字面量">3.常量(字面量)</h4><h5 id="3-3-练习：输出常量">3.3 练习：输出常量</h5><p>需求：输出各种类型的常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">        System.out.println(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="number">12.3</span>);</span><br><span class="line">        System.out.println(<span class="string">&#x27;中&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="literal">false</span>);</span><br><span class="line">        System.out.println(<span class="number">10</span> &gt; <span class="number">20</span>);</span><br><span class="line">        <span class="comment">// System.out.println(null);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-4-练习：自报家门">3.4 练习：自报家门</h5><p>需求：将（姓名，年龄，性别，身高，婚姻状况）打印在控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1Constant</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        分析:</span></span><br><span class="line"><span class="comment">                姓名 --&gt; 字符串常量</span></span><br><span class="line"><span class="comment">                年龄 --&gt; 整数常量</span></span><br><span class="line"><span class="comment">                性别 --&gt; 字符常量</span></span><br><span class="line"><span class="comment">                身高 --&gt; 小数常量</span></span><br><span class="line"><span class="comment">                婚姻状况 --&gt; 布尔常量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(<span class="number">23</span>);</span><br><span class="line">        System.out.println(<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="number">182.1</span>);</span><br><span class="line">        System.out.println(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day02-3">day02</h2><h3 id="一-Java基础语法">一.Java基础语法</h3><h4 id="1-变量">1.变量</h4><h5 id="1-5-代码练习">1.5 代码练习</h5><p>需求：将（姓名，年龄，性别，身高，是否单身）定义为变量，随后打印在控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVariable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;<span class="comment">//姓名 --&gt; String</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">23</span>;<span class="comment">//年龄 --&gt; int</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;<span class="comment">//性别 --&gt; char</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">182.1</span>;<span class="comment">//身高 --&gt; double</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//是否单身 --&gt; boolean</span></span><br><span class="line"></span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        System.out.println(gender);</span><br><span class="line">        System.out.println(height);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-键盘录入">2.键盘录入</h4><h5 id="2-2-Scanner键盘录入">2.2 Scanner键盘录入</h5><p>需求：输入年龄，名字，随后将年龄和名字打印在控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步：导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//第二步：创建对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个整数:&quot;</span>);<span class="comment">//友情提示</span></span><br><span class="line">        <span class="comment">//第三步：接收数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(age);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串:&quot;</span>);</span><br><span class="line">        <span class="comment">//第三步：接收数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-类型转换-隐式转换">4.类型转换-隐式转换</h4><h5 id="4-2-练习1：">4.2 练习1：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//问变量c是什么数据类型？</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">12.3</span>;</span><br><span class="line">??? c = a + b;</span><br><span class="line"><span class="comment">//double的取值范围比int大，所以在计算的时候，变量a会自动提升为double。</span></span><br><span class="line"><span class="comment">//最终是两个double相加，结果就是double类型的。</span></span><br></pre></td></tr></table></figure><h5 id="4-3-练习2：">4.3 练习2：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line"><span class="comment">// 第三行代码会报错，a和b会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。</span></span><br><span class="line"><span class="comment">// 修改为:</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> b1 + b2;</span><br></pre></td></tr></table></figure><h5 id="4-4-练习3：">4.4 练习3：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">System.out.println(c);</span><br><span class="line"><span class="comment">//最终输出结果：98</span></span><br><span class="line"><span class="comment">//b会自动转换为int类型，字符变成int类型会查询码表，变成97</span></span><br><span class="line"><span class="comment">//第三行代码97 + 1 最终结果为98.</span></span><br></pre></td></tr></table></figure><h4 id="6-类型转换-案例">6.类型转换-案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 注意点<span class="number">1</span>: </span><br><span class="line">    <span class="type">long</span> num=<span class="number">12345L</span>;</span><br><span class="line">    System.out.println(num);</span><br><span class="line">    <span class="comment">//long 类型的数据不加L也可以输出 12345是int类型 赋值大类型发生了自动类型提升</span></span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> num2=<span class="number">123456789012345</span>;</span><br><span class="line">    System.out.println(num2);</span><br><span class="line"><span class="comment">//已经超过了int的取值范围 报错 这个就必须加L</span></span><br><span class="line">    <span class="comment">//不加L是按照4个字节存的  加L是按照8个字节存的</span></span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> f=<span class="number">12</span>;?   </span><br><span class="line">    <span class="type">float</span> f=<span class="number">12.5</span>;?  </span><br><span class="line">  </span><br><span class="line"><span class="number">2</span> 注意点<span class="number">2</span>:</span><br><span class="line">    整数常量默认是<span class="type">int</span>   小数常量默认是<span class="type">double</span></span><br><span class="line">    <span class="type">byte</span> b=<span class="number">12</span>;</span><br><span class="line">    <span class="type">byte</span> b2=b+<span class="number">11</span>; <span class="comment">//编译失败  </span></span><br><span class="line">    <span class="type">float</span> f=b+<span class="number">12.5</span>;<span class="comment">//编译失败</span></span><br><span class="line">    </span><br><span class="line"><span class="number">3</span> 注意点<span class="number">3</span></span><br><span class="line">    <span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>+<span class="number">4</span>;</span><br><span class="line">    常量优化机制:<span class="number">3</span>和<span class="number">4</span>都是常量直接拿一个<span class="number">7</span>出来<span class="comment">//有变量参加的运算，就不是常量优化机制</span></span><br><span class="line">    整数不是默认<span class="type">int</span>类型?怎么能用<span class="type">byte</span>进行存储呢?</span><br><span class="line">    看后面的常量值在不在<span class="type">byte</span>的取值范围之内</span><br><span class="line">    在,可以按照<span class="type">byte</span>的方式进行存储</span><br><span class="line">    不在,超出范围报错(进行强制类型转换)</span><br></pre></td></tr></table></figure><h3 id="二-运算符">二.运算符</h3><h4 id="3-字符串的-操作">3.字符串的+操作</h4><h5 id="3-3-练习">3.3 练习</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">int</span> num=<span class="number">10</span>;</span><br><span class="line">String s=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">System.out.println(c+num+s);</span><br><span class="line">System.out.println(c+s+num);</span><br><span class="line">System.out.println(c+(num+s));</span><br><span class="line">System.out.println(s+num+c);</span><br><span class="line">System.out.println(s+(num+c));</span><br></pre></td></tr></table></figure><h4 id="4-案例：数值拆分">4.案例：数值拆分</h4><h5 id="4-2-练习">4.2 练习</h5><p>键盘录入一个四位数，获取该数字各个位置上的数据值并打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个四位数：&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">10000</span> || num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> num % <span class="number">10</span>;<span class="comment">//个位 ：数值 % 10 </span></span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> num / <span class="number">10</span> % <span class="number">10</span>;<span class="comment">//十位 ：数值 / 10 % 10 </span></span><br><span class="line">            <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> num / <span class="number">100</span> % <span class="number">10</span>;<span class="comment">//百位 ：数值 / 10 / 10 % 10 </span></span><br><span class="line">            <span class="type">int</span> <span class="variable">qian</span> <span class="operator">=</span> num/<span class="number">1000</span>;<span class="comment">//千位 ：数值 / 10 / 10 / 10 % 10; </span></span><br><span class="line">          <span class="comment">//除法定位到？位，余数取？位上的数字（头尾除外）</span></span><br><span class="line">            System.out.println(<span class="string">&quot;个位是：&quot;</span> + ge);</span><br><span class="line">            System.out.println(<span class="string">&quot;十位是：&quot;</span>+ shi);</span><br><span class="line">            System.out.println(<span class="string">&quot;百位是：&quot;</span> + bai);</span><br><span class="line">            System.out.println(<span class="string">&quot;千位是：&quot;</span> + qian);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="5-自增自减运算符">5.自增自减运算符</h4><h5 id="5-3-练习">5.3 练习</h5><p>需求:看程序,不提前运行,说结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">代码<span class="number">1</span>:</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//这三个a是同一个,存储空间是一样的,其中一个改变其他的使用时候都变了</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++ + a++;</span><br><span class="line">分析:</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="number">1</span>) + (<span class="number">2</span>);<span class="comment">//表达式</span></span><br><span class="line">a值变化:<span class="number">1</span> -- <span class="number">2</span> -- <span class="number">3</span></span><br><span class="line">a值?b值?</span><br><span class="line"></span><br><span class="line">代码<span class="number">2</span>:</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> ++a + a++;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="number">2</span>) + (<span class="number">2</span>);<span class="comment">//表达式</span></span><br><span class="line">a值变化:<span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">a值?b值?</span><br><span class="line"></span><br><span class="line">代码<span class="number">3</span>:</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> ++a + ++a;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="number">2</span>) + (<span class="number">3</span>);</span><br><span class="line">a值变化:<span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">a值?b值?</span><br><span class="line">    </span><br><span class="line">注意点: </span><br><span class="line"><span class="type">short</span> s1=<span class="number">10</span>;</span><br><span class="line">s1++;<span class="comment">//自增1不会改变自身的变量的数据类型</span></span><br></pre></td></tr></table></figure><h4 id="11-案例：三个和尚">11.案例：三个和尚</h4><p>求三个数的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2Operator</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//1.使用Scanner键盘录入三个整数</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入三个整数：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="comment">//2：用三元运算符获取前两个整数的最大值，并用临时变量保存起来。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> num1 &gt; num2 ? num1 : num2;</span><br><span class="line"><span class="comment">//3：用三元运算符，让获取临时最大值和第三个数比较，得到结果。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> temp &gt; num3 ? temp : num3;</span><br><span class="line"><span class="comment">//4：输出结果</span></span><br><span class="line">System.out.println(<span class="string">&quot;最大值是:&quot;</span> + max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day03-3">day03</h2><h3 id="二、流程控制语句">二、流程控制语句</h3><h4 id="7-if案例-考试奖励">7. if案例-考试奖励</h4><p><strong>需求</strong>：</p><p>​键盘录入学生成绩，根据成绩程序给出不同的奖励</p><ul><li>95-100：自行车一辆</li><li>90-94：游乐场一次</li><li>80-89：变形金刚一个</li><li>80分以下：挨顿揍，这座城市又多了一个伤心的人</li></ul><p><strong>分析</strong>：</p><p>​①考试成绩未知，可以使用键盘录入的方式获取值</p><p>​②由于奖励种类较多，属于多种判断，采用if格式3实现</p><p>​③为每种判断设置对应的条件</p><p>​④为每种判断设置对应的奖励</p><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 键盘录入考试成绩</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入您的成绩:&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="comment">// 2. 由于奖励种类较多，属于多种判断，采用if...else...if格式实现</span></span><br><span class="line"><span class="comment">// 3. 为每种判断设置对应的条件</span></span><br><span class="line"><span class="keyword">if</span>(score &gt;= <span class="number">95</span> &amp;&amp; score &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">    <span class="comment">// 4. 为每种判断设置对应的奖励</span></span><br><span class="line">    System.out.println(<span class="string">&quot;山地自行车一辆&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">94</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;游乐场玩一次&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">80</span> &amp;&amp; score &lt;= <span class="number">89</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;变形金刚玩具一个&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;挨顿揍&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题分析：</strong></p><p>​如果分数是小于0或者大于100的都是挨顿揍，这个不合理。所以我们要过滤非法数据。</p><p><strong>改写代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入您的成绩:&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">0</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="comment">// 正确的成绩</span></span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">95</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;山地自行车一辆&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">94</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;游乐场玩一次&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span> &amp;&amp; score &lt;= <span class="number">89</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;变形金刚玩具一个&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;挨顿揍&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 错误的成绩</span></span><br><span class="line">    System.out.println(<span class="string">&quot;您的成绩输入有误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-switch案例-减肥计划">9 switch案例-减肥计划</h4><p><strong>课堂练习</strong></p><p>需求：键盘录入星期数，显示今天的减肥活动。(键盘录入数字输出对应的星期要有非法数据的判断)</p><p>周一：跑步</p><p>周二：游泳</p><p>周三：慢走</p><p>周四：动感单车</p><p>周五：拳击</p><p>周六：爬山</p><p>周日：好好吃一顿</p><h4 id="10-switch语句case穿透">10 switch语句case穿透</h4><p>需求：键盘录入星期数，输出工作日、休息日。1-5为工作日；6-7为休息日</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入星期数：&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="keyword">switch</span> (week)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;工作日&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;休息日&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;不合法！&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day04-3">day04</h2><h3 id="一、循环">一、循环</h3><h4 id="1、for循环">1、for循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(System.out.println(<span class="string">&quot;a&quot;</span>); a&lt;=<span class="number">3</span>; System.out.println(<span class="string">&quot;c&quot;</span>),a++)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制台打印结果是多少?</span></span><br></pre></td></tr></table></figure><h4 id="2、for案例-输出1-5">2、for案例-输出1-5</h4><p><strong>示例代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 正向</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span> 反向</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>; i &gt;= <span class="number">1</span>; i--)&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3、for案例-求1-5和">3、for案例-求1-5和</h4><p><strong>示例代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义求和变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//串羊肉串,你需要一根签子,上面肯定啥也没有</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义求和变量sum,初始化值为0,</span></span><br><span class="line"><span class="comment">//作用:将1-5之间的每一个数据累加到sum上进行求和操作</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.循环1-5,每循环一次,获取一个数据值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="comment">//3.累加求和</span></span><br><span class="line">    <span class="comment">//sum = sum + i;</span></span><br><span class="line">    <span class="comment">//简化操作</span></span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.输出结果</span></span><br><span class="line">System.out.println(<span class="string">&quot;数据1-5的和为:&quot;</span> + sum);</span><br></pre></td></tr></table></figure><h4 id="4、for案例-1-100偶数和">4、for案例-1-100偶数和</h4><p>**需求：**求1-100之间的偶数和，并把求和结果在控制台输出</p><p><strong>示例代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统写法</span></span><br><span class="line">        <span class="comment">//1.定义求和变量sum,初始化值为0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//2.循环1-100,每循环一次,获取一个数据值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//3.判断当前循环中变量i保存的数据值是不是偶数</span></span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//4.是偶数进行累加求和</span></span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.循环结束,数据求和完毕,打印求和结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;数据1-100的偶数和为:&quot;</span> + sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">//改进写法</span></span><br><span class="line">        <span class="comment">//1.定义求和变量sum,初始化值为0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i+=<span class="number">2</span>)&#123;<span class="comment">//0 2 4 6</span></span><br><span class="line">            sum += i;</span><br><span class="line">            <span class="comment">//System.out.println(&quot;数据1-100的偶数和为:&quot; + sum);</span></span><br><span class="line">            <span class="comment">//输出sum放在循环中打印的是求和的过程</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意:把求和变量定义在循环中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//在循环中,每循环一次,重新定义一次sum并初始化值为0</span></span><br><span class="line">            sum += i;</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*奇数</span></span><br><span class="line"><span class="comment">        for(int i = 1; i &lt;= 100; i+=2)&#123;//1 3 5 7</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br></pre></td></tr></table></figure><h4 id="5、for案例-水仙花数">5、for案例-水仙花数</h4><p>**需求：**在控制台输出所有的”水仙花数“</p><p>**解释：**什么是水仙花数？</p><p>​水仙花数，指的是一个三位数，个位、十位、百位的数字立方和等于原数</p><p>​例如：1533 * 3 * 3 + 5 * 5 * 5 + 1 * 1 * 1 = 153</p><p><strong>分析：</strong></p><ol><li>水仙花数是一个三位数</li><li>水仙花数的个位、十位、百位的数字立方和等于原数</li><li>获取所有的三位数，准备进行筛选，最小的三位数为100，最大的三位数为999，使用for循环获取</li><li>需要判定，获取每一个三位数的个位，十位，百位，做if语句判断是否是水仙花数</li></ol><p><strong>示例代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.for循环从100开始到999结束,每循环一次获取一个三位正整数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++)&#123;</span><br><span class="line">    <span class="comment">//2.循环内获取当前i保存的数据值的个位十位百位</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i % <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> i / <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//3.判断是否满足水仙花数的条件</span></span><br><span class="line">    <span class="keyword">if</span>(ge*ge*ge + shi*shi*shi + bai*bai*bai == i)&#123;</span><br><span class="line">        <span class="comment">//4.打印水仙花数</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、for案例-水仙花数-每行打印两个">6、for案例-水仙花数(每行打印两个)</h4><p>**需求：**在控制台输出所有的“水仙花数”，要求每行打印2个</p><p><strong>解释：</strong></p><ol><li><p>不换行打印，去掉ln</p><p>System.out.print(“打印内容”);</p></li><li><p>换行打印</p><p>System.out.println();//不加内容只起到换行的作用</p></li><li><p>计数器的使用</p></li></ol><ul><li>需要在循环外面定义统计变量(计数器)</li><li>用来统计已经打印了多少个水仙花数</li><li>根据当前打印的数量控制换行</li></ul><p><strong>分析：</strong></p><ol><li>定义变量count，用于保存“打印过”的数量，初始值为0</li><li>在判定和打印水仙花数的过程中，不换行，并在打印后让count变量+1，记录打印过的数量</li><li>在每一次count变量+1后，判断是否到达了2的倍数，是的话，换行。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 定义一个计数器，初始值为0</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2.for循环从100开始到999结束,每循环一次获取一个三位正整数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++)&#123;</span><br><span class="line">        <span class="comment">// 3.循环内获取当前i保存的数据值的个位十位百位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i % <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> i / <span class="number">10</span> / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 4.判断是否满足水仙花数的条件</span></span><br><span class="line">        <span class="keyword">if</span>((ge*ge*ge + shi*shi*shi + bai*bai*bai) == i)&#123;</span><br><span class="line">            <span class="comment">// 不换行打印水仙花数</span></span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">// 每打印一次水仙花数记录一次</span></span><br><span class="line">            count++;</span><br><span class="line">            <span class="comment">// 判断当前打印的是第几次</span></span><br><span class="line">            <span class="keyword">if</span>(count % <span class="number">2</span> == <span class="number">0</span>)&#123;<span class="comment">//2 4 6 8..</span></span><br><span class="line">                System.out.println();<span class="comment">//换行</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**总结：**今后如果需求带有统计xxx，请先想到计数器变量</p><h4 id="8、while案例-珠穆朗玛峰">8、while案例-珠穆朗玛峰</h4><p><strong>需求：</strong></p><p>​世界最高山峰是珠穆朗玛峰(8844.43米=8844430毫米)，假如我有一张足够大的纸，它的厚度是0.1毫米。 请问，我折叠多少次，可以折成珠穆朗玛峰的高度?</p><p><strong>分析：</strong></p><ol><li>因为要反复折叠，所以要使用循环，但是不知道折叠多少次，这种情况下更适合使用while循环</li><li>循环的执行过程中每次纸张折叠，纸张的厚度要加倍，因此需要先定义纸张厚度，在循环中使厚度加倍</li><li>折叠的过程中当纸张厚度大于珠峰就停止了，因此继续执行的要求是纸张厚度小于珠峰高度</li><li>设置一个计数器，在循环中执行累加，对应折叠了多少次</li></ol><p><strong>示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义计数器count,初始值为0</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用while循环,直到折叠厚度达到珠峰高度为止</span></span><br><span class="line"><span class="type">double</span> <span class="variable">paper</span> <span class="operator">=</span> <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(paper &lt;= <span class="number">8844430</span>)&#123;</span><br><span class="line">    paper *= <span class="number">2</span>;<span class="comment">//条件控制语句,纸张厚度每次折叠是原来的2倍</span></span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">System.out.println(<span class="string">&quot;一共需要折叠&quot;</span> + count + <span class="string">&quot;次&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>练习：</strong></p><p>for循环改写珠穆朗玛峰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for循环改写珠穆朗玛峰案例</span></span><br><span class="line"><span class="comment">//1.定义计数器count,初始值为0</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">double</span> <span class="variable">paper</span> <span class="operator">=</span> <span class="number">0.1</span>; paper &lt;= <span class="number">8844430</span> ;paper *= <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//条件控制语句,纸张厚度每次折叠是原来的2倍</span></span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">System.out.println(<span class="string">&quot;一共需要折叠&quot;</span> + count + <span class="string">&quot;次&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="13、循环标号-减肥计划改进版">13、循环标号-减肥计划改进版</h4><p><strong>需求：</strong></p><p>程序运行后，用户可多次查询星期对应的减肥计划，直到输入0，程序结束</p><p><strong>实现思路：</strong></p><p>① 业务功能是多次进行，此处需要循环</p><p>② 不明确循环次数，采用while循环</p><p>③ 匹配到0的时候，使用break结束循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建键盘录入对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        loop:<span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入您要查看的星期数:&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;如无需查看其它,请输入0退出&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="comment">//退出方式1:</span></span><br><span class="line">            <span class="comment">/*if(choice == 0)&#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;感谢您的使用!&quot;);</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">            <span class="keyword">switch</span>(choice)&#123;</span><br><span class="line">                    <span class="comment">//退出方式2:</span></span><br><span class="line">                    <span class="comment">/*case 0:</span></span><br><span class="line"><span class="comment">System.out.println(&quot;感谢您的使用!&quot;);</span></span><br><span class="line"><span class="comment">System.exit(0);//结束JVM</span></span><br><span class="line"><span class="comment">break;*/</span></span><br><span class="line">                    <span class="comment">//退出方式3:</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;感谢您的使用!&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span> loop;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;珍珠奶茶&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;海底捞&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;撸串&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;麻辣香锅&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;水煮鱼&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;来顿牛蛙&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;哈啤酒&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入错误!&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>break和continue只能跳出、跳过自己所在的那一层关系，如果想要跳出、跳过指定的一层，就可以加入标号loop。</p><h4 id="15、案例-猜数字">15、案例-猜数字</h4><p><strong>需求：</strong></p><p>程序自动生成一个1-100之间的数字，使用程序实现猜出这个数字是多少？</p><p>当猜错的时候根据不同情况给出相应的提示</p><ul><li>如果猜的数字比真实数字大，提示你猜的数据大了</li><li>如果猜的数字比真实数字小，提示你猜的数据小了</li><li>如果猜的数字与真实数字相等，提示恭喜你猜中了</li></ul><p><strong>实现思路 :</strong></p><ul><li>使用 Random 产生 1-100之间的随机数</li><li>使用 Scanner 键盘录入用户猜的数据</li><li>使用 if 语句进行比对</li><li>将【录入数据】+ 【 if 判断】 使用循环包裹</li><li>猜中后，通过break结束循环</li></ul><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 使用 Random 产生 1-100之间的随机数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">randomNum</span> <span class="operator">=</span> r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 使用 Scanner 键盘录入用户猜的数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 将【录入数据】+ 【if 判断】 使用循环包裹</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">scNum</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="comment">// 3. 使用 if 语句进行比对</span></span><br><span class="line">            <span class="keyword">if</span> (scNum &gt; randomNum) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;猜大了&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (scNum &lt; randomNum) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;猜小了&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;猜中了&quot;</span>);</span><br><span class="line">                <span class="comment">// 5. 猜中后，通过break结束循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16、补充循环嵌套">16、补充循环嵌套</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 打印<span class="number">5</span>行<span class="number">5</span>列的星星</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    * * * * * </span><br><span class="line">    * * * * * </span><br><span class="line">    * * * * * </span><br><span class="line">    * * * * * </span><br><span class="line">    * * * * * </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;=i; j++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    * </span><br><span class="line">    * * </span><br><span class="line">    * * * </span><br><span class="line">    * * * * </span><br><span class="line">    * * * * * </span><br><span class="line"><span class="number">2</span> ==九九乘法表==</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            System.out.print(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+(j*i)+<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="number">1</span>*<span class="number">1</span>=<span class="number">1</span></span><br><span class="line">    <span class="number">1</span>*<span class="number">2</span>=<span class="number">2</span><span class="number">2</span>*<span class="number">2</span>=<span class="number">4</span></span><br><span class="line">    <span class="number">1</span>*<span class="number">3</span>=<span class="number">3</span><span class="number">2</span>*<span class="number">3</span>=<span class="number">6</span><span class="number">3</span>*<span class="number">3</span>=<span class="number">9</span></span><br><span class="line">    <span class="number">1</span>*<span class="number">4</span>=<span class="number">4</span><span class="number">2</span>*<span class="number">4</span>=<span class="number">8</span><span class="number">3</span>*<span class="number">4</span>=<span class="number">12</span><span class="number">4</span>*<span class="number">4</span>=<span class="number">16</span></span><br><span class="line">    <span class="number">1</span>*<span class="number">5</span>=<span class="number">5</span><span class="number">2</span>*<span class="number">5</span>=<span class="number">10</span><span class="number">3</span>*<span class="number">5</span>=<span class="number">15</span><span class="number">4</span>*<span class="number">5</span>=<span class="number">20</span><span class="number">5</span>*<span class="number">5</span>=<span class="number">25</span></span><br><span class="line">    <span class="number">1</span>*<span class="number">6</span>=<span class="number">6</span><span class="number">2</span>*<span class="number">6</span>=<span class="number">12</span><span class="number">3</span>*<span class="number">6</span>=<span class="number">18</span><span class="number">4</span>*<span class="number">6</span>=<span class="number">24</span><span class="number">5</span>*<span class="number">6</span>=<span class="number">30</span><span class="number">6</span>*<span class="number">6</span>=<span class="number">36</span></span><br><span class="line">    <span class="number">1</span>*<span class="number">7</span>=<span class="number">7</span><span class="number">2</span>*<span class="number">7</span>=<span class="number">14</span><span class="number">3</span>*<span class="number">7</span>=<span class="number">21</span><span class="number">4</span>*<span class="number">7</span>=<span class="number">28</span><span class="number">5</span>*<span class="number">7</span>=<span class="number">35</span><span class="number">6</span>*<span class="number">7</span>=<span class="number">42</span><span class="number">7</span>*<span class="number">7</span>=<span class="number">49</span></span><br><span class="line">    <span class="number">1</span>*<span class="number">8</span>=<span class="number">8</span><span class="number">2</span>*<span class="number">8</span>=<span class="number">16</span><span class="number">3</span>*<span class="number">8</span>=<span class="number">24</span><span class="number">4</span>*<span class="number">8</span>=<span class="number">32</span><span class="number">5</span>*<span class="number">8</span>=<span class="number">40</span><span class="number">6</span>*<span class="number">8</span>=<span class="number">48</span><span class="number">7</span>*<span class="number">8</span>=<span class="number">56</span><span class="number">8</span>*<span class="number">8</span>=<span class="number">64</span></span><br><span class="line">    <span class="number">1</span>*<span class="number">9</span>=<span class="number">9</span><span class="number">2</span>*<span class="number">9</span>=<span class="number">18</span><span class="number">3</span>*<span class="number">9</span>=<span class="number">27</span><span class="number">4</span>*<span class="number">9</span>=<span class="number">36</span><span class="number">5</span>*<span class="number">9</span>=<span class="number">45</span><span class="number">6</span>*<span class="number">9</span>=<span class="number">54</span><span class="number">7</span>*<span class="number">9</span>=<span class="number">63</span><span class="number">8</span>*<span class="number">9</span>=<span class="number">72</span><span class="number">9</span>*<span class="number">9</span>=<span class="number">81</span></span><br></pre></td></tr></table></figure><h2 id="day05-3">day05</h2><h3 id="一-数组">一.数组</h3><h4 id="11-数组获取最大值">11.数组获取最大值</h4><p>**需求：**获取数组中元素的最大值</p><p><strong>思路：</strong></p><ol><li>定义一个变量，用于保存最大值</li><li>假设数组中第一个元素就是最大值</li><li>逐个进行比较，找到更大的，max变量记录更大的数据</li><li>循环结束后打印变量的值</li></ol><p><strong>示例代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">9</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line">    <span class="comment">//1.从数组中获取一个元素作为参照物</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//2.遍历数组,获取其他元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">//3.判断剩余元素是否大于参照物</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">            <span class="comment">//4.如果大于,替换参照物</span></span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.循环结束,比较完毕,打印最大值</span></span><br><span class="line">    System.out.println(<span class="string">&quot;max:&quot;</span> + max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-数组元素求和">12.数组元素求和</h4><p>**需求：**键盘录入5个整数，存储到数组中，并对数组求和</p><p><strong>思路：</strong></p><p>① 定义一个求和变量，准备记录累加后的结果</p><p>② 动态初始化一个长度为5的int数组，准备存储键盘录入的数值</p><p>③ 将键盘录入的数值存储到数组中</p><p>④ 遍历数组，取出每一个元素，并求和</p><p>⑤ 输出总和</p><p><strong>示例代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建键盘录入对象</span></span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">//动态初始化一个长度为5的数组</span></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="comment">//将键盘录入的数值存储到数组中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;个整数：&quot;</span>);</span><br><span class="line">        arr[i] = sc.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历数组，取出每个元素，并求和</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        sum += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印求和变量</span></span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13-数组基本查找">13.数组基本查找</h4><p><strong>需求：</strong></p><p>​已知一个数组 <strong>arr = {19, 28, 37, 46, 50};</strong> 键盘录入一个数据，查找该数据在数组中的索引，并在控制台输出找到的索引值</p><p><strong>思路：</strong></p><p>① 定义一个数组，用静态初始化完成数组元素的初始化</p><p>② 键盘录入要查找的数据，用一个变量接收</p><p>③ 定义一个索引变量，初始值为-1</p><p>④ 遍历数组，获取到数组中的每一个元素</p><p>⑤ 拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量，并结束循环</p><p>⑥ 输出索引变量</p><p><strong>示例代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">19</span>, <span class="number">28</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">46</span>, <span class="number">50</span>&#125;;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请录入要查找的数据：&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == num) &#123;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;没有找到&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;该数在数组中的索引位置为：&quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14-评委打分">14.评委打分</h4><p><strong>需求：</strong></p><p>​在编程竞赛中，有6个评委为参赛的选手打分，分数为0-100的整数分。选手的最后得分为：去掉一个最高分和一个最低分后的4个评委平均值 (不考虑小数部分)。</p><p><strong>思路：</strong></p><p>① 定义一个数组，用动态初始化完成数组元素的初始化，长度为6</p><p>② 键盘录入评委分数</p><p>③ 由于是6个评委打分，所以，接收评委分数的操作，用循环改进</p><p>④ 求出数组最大值</p><p>⑤ 求出数组最小值</p><p>⑥ 求出数组总和</p><p>⑦ 按照计算规则进行计算得到平均分</p><p>⑧ 输出平均分</p><p><strong>示例代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">//数组赋值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; ) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;个评委的打分&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">0</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            arr[i] = score;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的值不合法，请输入0-100之间的整数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数组求最大值.最小值.和</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        sum += arr[i];</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">            min = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">avg</span> <span class="operator">=</span> (sum - max - min) / (arr.length - <span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;平均分：&quot;</span> + avg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15-数组反转">15.数组反转</h4><p><strong>需求：</strong></p><p>​数组反转：已知一个数组 arr = {19, 28, 37, 46, 50}；用程序实现把数组中的元素值交换，交换后的数组</p><p>arr = {50, 46, 37, 28, 19}；并在控制台输出交换后的数组元素。</p><p><strong>思路：</strong></p><p>定义两个指针,一个从头到尾,一个从尾到头</p><p>交换两个指针指向的数据值</p><p>指针不能重叠,不能交换位置(不能头变成尾部,尾部变成头)</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方案一：</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>,end = arr.length - <span class="number">1</span>;start &lt; end;start++,end--)&#123;</span><br><span class="line">    <span class="comment">//交换</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">    arr[start] = arr[end];</span><br><span class="line">    arr[end] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方案二：</span></span><br><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">    a[i] = a[a.length - <span class="number">1</span> - i];</span><br><span class="line">    a[a.length - <span class="number">1</span> - i] = t;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br></pre></td></tr></table></figure><h3 id="二-二维数组">二.二维数组</h3><h4 id="5-二维数组遍历">5.二维数组遍历</h4><p><strong>需求：</strong></p><p>已知一个二维数组 arr = { {11 , 22 , 33} , {33 , 44 , 55} }; 遍历该数组，取出所有元素并打印</p><p><strong>思路：</strong></p><p>①：遍历二维数组，取出里面每一个一维数组</p><p>②：在遍历的过程中，对每一个一维数组继续完成遍历，获取内部存储的每一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = &#123;&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;, &#123;<span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;&#125;;</span><br><span class="line"><span class="comment">// 1. 遍历二维数组，取出里面每一个一维数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 2. 在遍历的过程中，对每一个一维数组继续完成遍历，获取内部存储的每一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">        System.out.println(arr[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-二维数组求和">6.二维数组求和</h4><p>**需求：**公司年销售额求和</p><p>某公司季度和月份统计的数据如下：单位(万元)</p><p>第一季度：22,66,44</p><p>第二季度：77,33,88</p><p>第三季度：25,45,65</p><p>第四季度：11,66,99</p><p><strong>思路：</strong></p><p>①：定义求和变量，准备记录最终累加结果</p><p>②：使用二维数组来存储数据，每个季度是一个一维数组，再将4个一维数组装起来</p><p>③：遍历二维数组，获取所有元素，累加求和</p><p>④：输出最终结果</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] arr = &#123;&#123;<span class="number">22</span>, <span class="number">66</span>, <span class="number">44</span>&#125;, &#123;<span class="number">77</span>, <span class="number">33</span>, <span class="number">88</span>&#125;, &#123;<span class="number">25</span>, <span class="number">45</span>, <span class="number">65</span>&#125;, &#123;<span class="number">11</span>, <span class="number">66</span>, <span class="number">99</span>&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">            sum += arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day06-2">day06</h2><h3 id="一-方法">一.方法</h3><h4 id="3-方法的调用过程">3.方法的调用过程</h4><h5 id="3-3-代码练习">3.3 代码练习</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">下列程序的输出结果为?</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;main方法开始执行&quot;</span>);</span><br><span class="line">    System.out.println(<span class="number">1</span>);</span><br><span class="line">    method();</span><br><span class="line">    System.out.println(<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;main方法执行结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;method方法执行&quot;</span>);</span><br><span class="line">    System.out.println(<span class="number">3</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;method方法执行结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行流程:</span><br><span class="line"><span class="number">1.</span>main方法进栈</span><br><span class="line"><span class="number">2.</span>main方法开始执行 <span class="number">1</span></span><br><span class="line"><span class="number">3.</span>method方法进栈</span><br><span class="line"><span class="number">4.</span>method方法执行 <span class="number">3</span> method方法执行结束</span><br><span class="line"><span class="number">5.</span>method弹栈</span><br><span class="line"><span class="number">6.</span>main方法执行结束</span><br><span class="line"><span class="number">7.</span>main弹栈</span><br><span class="line"></span><br><span class="line">以下程序的执行过程是什么?</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;main1&quot;</span>);  </span><br><span class="line">    ma();</span><br><span class="line">    System.out.println(<span class="string">&quot;main2&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ma</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;ma-1&quot;</span>);</span><br><span class="line">    mb();</span><br><span class="line">    System.out.println(<span class="string">&quot;ma-2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">mb</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;mb-1&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;mb-2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-方法练习-奇偶判断">4.方法练习-奇偶判断</h4><p><strong>需求：</strong></p><pre><code>设计一个方法method，方法中定义一个变量(数值随意)，判断这个变量是奇数还是偶数，并在main方法中调用method</code></pre><p><strong>思路：</strong></p><ol><li>定义方法，名称为method</li><li>方法中定义变量，使用if语句判断是奇数还是偶数</li><li>main方法中调用method方法</li></ol><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//调用</span></span><br><span class="line">    method();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;偶数&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奇数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-带参数方法的练习-打印n-m之间的奇数">7.带参数方法的练习(打印n-m之间的奇数)</h4><p><strong>需求：</strong></p><p>设计一个方法（print） 用于打印 n 到 m 之间所有的奇数</p><p><strong>思路：</strong></p><p>①：定义方法，名称为print</p><p>②：为方法添加两个int类型的形参，准备接受调用者传递过来的实参</p><p>③：方法中设计for循环，循环从n开始，到m结束</p><p>④：循环中加入if判断，是奇数，则打印</p><p>⑤：main方法中调用print方法，传入两个实际参数</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    print(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-带返回值方法的练习-求两个数的最大值">9.带返回值方法的练习(求两个数的最大值)</h4><p><strong>需求：</strong></p><p>设计一个方法，求两个数的最大值</p><p><strong>思路：</strong></p><ol><li>定义一个方法，声明两个形参接收计算的数值，求出结果并返回</li><li>使用 if 语句 得出 a 和 b 之间的最大值，根据情况return具体结果</li><li>在main()方法中调用定义好的方法并使用变量保存</li></ol><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> getMax(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-方法重载">12.方法重载</h4><h5 id="12-3-练习">12.3 练习</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">(<span class="type">int</span> i,<span class="type">double</span> d)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//以下能够和方法methodA构成方法重载的是?  </span></span><br><span class="line">A: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">(<span class="type">int</span> i)</span>&#123;&#125;</span><br><span class="line">B: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">(<span class="type">int</span> i,<span class="type">double</span> d,<span class="type">int</span> b)</span>&#123;&#125;</span><br><span class="line">C: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">(<span class="type">int</span> x,<span class="type">double</span> y)</span>&#123;&#125;</span><br><span class="line">D: <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>  <span class="title function_">methodA</span><span class="params">(<span class="type">double</span> y,<span class="type">int</span> x)</span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">E: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">F: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">G: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">METHODA</span><span class="params">(<span class="type">double</span> d)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="13-方法重载练习">13.方法重载练习</h4><p><strong>需求：</strong></p><p>使用方法重载的思想，设计比较两个整数是否相同的方法，兼容全整数类型（byte,short,int,long）</p><p><strong>思路：</strong></p><p>① 定义一个比较的方法compare() ，参数选择两个int型参数</p><p>② 定义对应的重载方法，变更对应的参数类型，参数变更为两个long型参数</p><p>③ 定义所有的重载方法，两个byte类型与两个short类型参数</p><p>④ 完成方法的调用，测试运行结果</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="type">return</span> <span class="variable">a</span> <span class="operator">=</span>= b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span> &#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">a</span> <span class="operator">=</span>= b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">byte</span> a, <span class="type">byte</span> b)</span> &#123;</span><br><span class="line"><span class="type">return</span> <span class="variable">a</span> <span class="operator">=</span>= b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">short</span> a, <span class="type">short</span> b)</span> &#123;</span><br><span class="line"><span class="type">return</span> <span class="variable">a</span> <span class="operator">=</span>= b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(compare(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16-数组遍历">16.数组遍历</h4><p><strong>需求：</strong></p><p>设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55]</p><p><strong>思路：</strong></p><p>① 定义一个数组，用静态初始化完成数组元素初始化</p><p>② 定义一个方法，用数组遍历通用格式对数组进行遍历</p><p>③ 遍历打印的时候，数据不换行</p><p>④ 调用遍历方法</p><h4 id="17-获取数组最大值">17.获取数组最大值</h4><p><strong>需求：</strong></p><p>设计一个方法用于获取数组中元素的最大值</p><p><strong>思路：</strong></p><p>① 定义一个数组，用静态初始化完成数组元素初始化</p><p>② 定义一个方法，用来获取数组中的最大值</p><p>③ 调用获取最大值方法，用变量接收返回结果</p><p>④ 把结果输出在控制台</p><h4 id="18-方法同时获取数组最大值和最小值">18.方法同时获取数组最大值和最小值</h4><p><strong>需求：</strong></p><p>设计一个方法用于获取数组中元素的最大值，和最小值</p><p><strong>思路：</strong></p><p>① 定义一个数组，用静态初始化完成数组元素初始化</p><p>② 定义一个方法，用来获取数组中的最大值和最小值</p><p>③ 方法中定义一个数组，将最大值和最小值存入数组中，并将整个数组返回</p><p>④ 调用该方法，将数组中的最大值和最小值取出进行打印</p><h2 id="day07-3">day07</h2><h3 id="一、面向对象">一、面向对象</h3><h4 id="2、类和对象的关系">2、类和对象的关系</h4><h5 id="5、案例手机类的创建和使用">5、案例手机类的创建和使用</h5><p><strong>需求：</strong></p><p>​首先定义一个手机类，然后定义一个手机测试类，在手机测试类中通过对象完成成员变量和成员方法的使用</p><p><strong>思路：</strong></p><p>①定义一个手机类（成员变量：品牌，价格；成员方法：打电话，发短信）</p><p>②定义手机测试类</p><p>③在手机测试类中通过对象完成成员变量和成员方法的使用</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手机类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String brand;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;给&quot;</span> + name + <span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;群发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPhone</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        编写一个手机测试类（TestPhone）创建手机类对象</span></span><br><span class="line"><span class="comment">       并调用成员变量并打印，调用成员方法执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        p.brand = <span class="string">&quot;华为手机&quot;</span>;</span><br><span class="line">        p.price = <span class="number">5999</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(p.brand);</span><br><span class="line">        System.out.println(p.price);</span><br><span class="line"></span><br><span class="line">        p.call(<span class="string">&quot;阿强&quot;</span>);</span><br><span class="line">        p.sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十九、练习：使用标准-JavaBean-封装数据">十九、练习：使用标准 JavaBean 封装数据</h3><p><img src="https://s2.loli.net/2022/07/09/mOZn14PcyqYtsKo.png" alt=""></p><ul><li><p>步骤：</p><p>1.编写饮水机类 WaterDispenser</p><p>2.定义四个成员变量（品牌 brand）（颜色 color）（容量 capacity）（模式 model）</p><p>3.私有成员变量，提供 setXxx\getXxx 方法</p><p>4.提供空参、带参构造方法</p><p>5.提供成员方法 show - 用于展示出所有成员变量所记录的值</p><p>6.编写测试类 Test</p><p>7.使用带参构造方法创建对象，给属性赋值为（美的，红色，5L，手动净水）</p><p>8.调用show方法执行</p><p>9.将容量获取出来，并判断容量是否大于3L.</p></li><li><p>运行结果：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">品牌为:美的</span><br><span class="line">颜色为:红色</span><br><span class="line">容量为:<span class="number">5</span></span><br><span class="line">模式为:手动净水</span><br><span class="line">容量大于<span class="number">3L</span></span><br></pre></td></tr></table></figure><ul><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WaterDispenser</span> &#123;</span><br><span class="line">    <span class="comment">// 定义四个成员变量（品牌 brand）（颜色 color）（容量 capacity）（模式 model）</span></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> String model;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 空参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WaterDispenser</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WaterDispenser</span><span class="params">(String brand, String color, <span class="type">int</span> capacity, String model)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setXxx\getXxx</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrand</span><span class="params">(String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCapacity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCapacity</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getModel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setModel</span><span class="params">(String model)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// show 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;品牌为:&quot;</span> + brand);</span><br><span class="line">        System.out.println(<span class="string">&quot;颜色为:&quot;</span> + color);</span><br><span class="line">        System.out.println(<span class="string">&quot;容量为:&quot;</span> + capacity);</span><br><span class="line">        System.out.println(<span class="string">&quot;模式为:&quot;</span> + model);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestWaterDispenser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WaterDispenser</span> <span class="variable">wd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WaterDispenser</span>(<span class="string">&quot;美的&quot;</span>,<span class="string">&quot;红色&quot;</span>,<span class="number">5</span>,<span class="string">&quot;手动净水&quot;</span>);</span><br><span class="line">        wd.show();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(wd.getCapacity() &gt; <span class="number">3</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;容量大于3L&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;容量没有大于3L&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day08-3">day08</h2><h3 id="二、String">二、String</h3><h5 id="练习1">练习1 :</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">需求：已知用户名和密码，请用程序实现模拟用户登录。总共给三次机会，登录之后，给出相应的提示</span><br><span class="line">分析:</span><br><span class="line"><span class="number">1.</span> 定义出两个已有的字符串, 模拟数据库中已经存在的用户名和密码</span><br><span class="line"><span class="number">2.</span> 键盘录入用户输入的用户名和密码</span><br><span class="line"><span class="number">3.</span> 字符串比较 (equals)</span><br><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 定义出两个已有的字符串, 模拟数据库中已经存在的用户名和密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 2. 键盘录入用户输入的用户名和密码</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入用户和密码:&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">scUsername</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="type">String</span> <span class="variable">scPassword</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 字符串比较 (equals)</span></span><br><span class="line">            <span class="keyword">if</span> (username.equals(scUsername) &amp;&amp; password.equals(scPassword)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登陆成功!&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;明儿再来吧&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;登陆失败, 您还剩余&quot;</span> + (<span class="number">3</span> - i) + <span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习2">练习2 :</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*需求：键盘录入一个字符串，使用程序实现在控制台遍历该字符串</span></span><br><span class="line"><span class="comment"> * String类型方法：</span></span><br><span class="line"><span class="comment"> *    对象.toCharArray() : 将此字符串转换为一个新的字符数组*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将字符串转换为字符数组</span></span><br><span class="line">        <span class="type">char</span>[] chars = content.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            System.out.println(chars[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习3">练习3 :</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*需求：键盘录入一个字符串，使用程序实现在控制台遍历该字符串</span></span><br><span class="line"><span class="comment"> * String类方法：</span></span><br><span class="line"><span class="comment"> *      charAt(int index) : 根据传入的索引, 获取对应的字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> 返回此字符串的长度</span><br><span class="line">注意:</span><br><span class="line">字符串中的length() 是方法</span><br><span class="line">数组中length 是属性</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;itheima&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; content.length(); i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> content.charAt(i);</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习4">练习4 :</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">需求：键盘录入一个字符串，统计该字符串中大写字母字符，小写字母字符，数字字符出现的次数(不考虑其他字符)</span><br><span class="line">a1bQ2Wc3E4&amp;^!&amp;d</span><br><span class="line">小写字符: <span class="number">4</span>个</span><br><span class="line">大写字符: <span class="number">3</span>个</span><br><span class="line">数字字符: <span class="number">4</span>个</span><br><span class="line">核心思路: 字符串中每一个字符, 都需要判断和统计, 就需要遍历字符串.</span><br><span class="line">分析:</span><br><span class="line"><span class="number">1.</span> 准备<span class="number">3</span>个计数器变量</span><br><span class="line"><span class="number">2.</span> 键盘录入字符串</span><br><span class="line"><span class="number">3.</span> 将其拆分为字符数组</span><br><span class="line"><span class="number">4.</span> 遍历字符数组, 获取到每一个字符</span><br><span class="line"><span class="number">5.</span> 判断当前字符是哪一种类别</span><br><span class="line"><span class="number">6.</span> 对应的计数器变量自增</span><br><span class="line"><span class="number">7.</span> 在遍历结束后, 打印<span class="number">3</span>个计数器变量的值.</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest4</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 准备3个计数器变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">smallCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bigCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 键盘录入字符串</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 将其拆分为字符数组</span></span><br><span class="line">        <span class="type">char</span>[] chars = content.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 遍历字符数组, 获取到每一个字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> chars[i];</span><br><span class="line">            <span class="comment">// 5. 判断当前字符是哪一种类别</span></span><br><span class="line">            <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 6. 对应的计数器变量自增</span></span><br><span class="line">                smallCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">                bigCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                numCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 在遍历结束后, 打印3个计数器变量的值.</span></span><br><span class="line">        System.out.println(<span class="string">&quot;小写字符:&quot;</span> + smallCount);</span><br><span class="line">        System.out.println(<span class="string">&quot;大写字符:&quot;</span> + bigCount);</span><br><span class="line">        System.out.println(<span class="string">&quot;数字字符:&quot;</span> + numCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习5">练习5 :</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">需求：以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽</span><br><span class="line">最终效果为：<span class="number">156</span>****<span class="number">1234</span></span><br><span class="line">思路:</span><br><span class="line"><span class="number">1.</span> 截取字符串前三位</span><br><span class="line"><span class="number">2.</span> 截取字符串后四位</span><br><span class="line"><span class="number">3.</span> 中间拼接上固定的 ****</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入手机号:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tel</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 截取字符串前三位</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">start</span> <span class="operator">=</span> tel.substring(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 2. 截取字符串后四位</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">end</span> <span class="operator">=</span> tel.substring(<span class="number">7</span>);</span><br><span class="line">        <span class="comment">// 3. 中间拼接上固定的 ****</span></span><br><span class="line">        System.out.println(start + <span class="string">&quot;****&quot;</span> + end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习6">练习6 :</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">需求：键盘录入一个字符串，如果字符串中包含（TMD），则使用***替换</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">        content = content.replace(<span class="string">&quot;TMD&quot;</span>,<span class="string">&quot;***&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习7 :</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需求：以字符串的形式从键盘录入学生信息，例如：“张三,23” 从该字符串中切割出有效数据封装为Student学生对象</span><br><span class="line">public String[] split(String regex)&#123;...&#125;</span><br><span class="line">String类型对象调用split方法返回值是String类型的数组；</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest7</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">stuInfo</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据逗号切割当前字符串</span></span><br><span class="line">        <span class="comment">// sArr[0] : 张三</span></span><br><span class="line">        <span class="comment">// sArr[1] : 23</span></span><br><span class="line">        String[] sArr = stuInfo.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数据封装为Student学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(sArr[<span class="number">0</span>], sArr[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        System.out.println(stu.getName() + <span class="string">&quot;---&quot;</span> + stu.getAge());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="day09-3">day09</h2><h3 id="一、集合">一、集合</h3><h4 id="05-案例代码">05-案例代码</h4><h5 id="案例1：存储字符串并遍历"><strong>案例1：存储字符串并遍历</strong></h5><p>需求：创建一个存储字符串的集合，存储3个字符串元素，使用程序实现在控制台遍历该集合</p><p>思路：</p><p>① 创建集合对象</p><p>② 往集合中添加字符串对象</p><p>③ 遍历集合，首先要能够获取到集合中的每一个元素，这个通过get(int index)方法实现</p><p>④ 遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现</p><p>⑤ 遍历集合的通用格式</p><h5 id="案例2：存储学生对象并遍历"><strong>案例2：存储学生对象并遍历</strong></h5><p>需求：创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合。学生的姓名和年龄来自于键盘录入</p><p>思路：</p><p>① 定义学生类，为了键盘录入数据方便，把学生类中的成员变量都定义为String类型</p><p>② 创建集合对象</p><p>③ 键盘录入学生对象所需要的数据</p><p>④ 创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</p><p>⑤ 往集合中添加学生对象</p><p>⑥ 遍历集合，采用通用遍历格式实现</p><h5 id="案例3：集合删除元素"><strong>案例3：集合删除元素</strong></h5><p>需求：创建一个存储String的集合，内部存储（test，张三，李四，test，test）字符串</p><p>删除所有的test字符串，删除后，将集合剩余元素打印在控制台</p><p>思路：</p><p>① 创建集合对象</p><p>② 调用add方法，添加字符串</p><p>③ 遍历集合，取出每一个字符串元素</p><p>④ 加入if判断，如果是test字符串，调用remove方法删除</p><p>⑤ 打印集合元素</p><h5 id="案例4：集合元素筛选05-案例代码"><strong>案例4：集合元素筛选</strong>05-案例代码</h5><p>需求：定义一个方法，方法接收一个集合对象（泛型为Student），方法内部将年龄低于18的学生对象找出</p><p>并存入新集合对象，方法返回新集合。</p><p>思路：</p><p>① 定义方法，方法的形参定义为ArrayList<Student> list</p><p>② 方法内部定义新集合，准备存储筛选出的学生对象 ArrayList<Student> newList</p><p>③ 遍历原集合，获取每一个学生对象</p><p>④ 通过学生对象调用getAge方法获取年龄，并判断年龄是否低于18</p><p>⑤ 将年龄低于18的学生对象存入新集合</p><p>⑥ 返回新集合</p><p>⑦ main方法中测试该方法</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exercises </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JaveSE_Exercises_ErrorQuestions</title>
      <link href="/2022/07/02/JaveSE_Exercises_ErrorQuestions/"/>
      <url>/2022/07/02/JaveSE_Exercises_ErrorQuestions/</url>
      
        <content type="html"><![CDATA[<h1>JavaSE_ErrorQuestions</h1><h2 id="day01-day02">day01-day02</h2><p>13<strong>下列哪个选项代码可以正常编译？</strong> <s>C</s></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">A: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    a += <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">B: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">  System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">C: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">    b--;</span><br><span class="line">    System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">D: <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> a + b + c;</span><br><span class="line">    System.out.println(d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正确答案：A 错选原因：<span class="type">byte</span>类型值的取值范围为-<span class="number">128</span> ~ <span class="number">127</span>。</span><br></pre></td></tr></table></figure><p>25下列哪些写法是正确的：（ ）  <s>AB</s></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A: <span class="type">byte</span> a=<span class="number">3</span>;</span><br><span class="line">B: <span class="type">byte</span> b=<span class="number">4</span>;</span><br><span class="line">C: <span class="type">byte</span> c=a+b;</span><br><span class="line">D: <span class="type">byte</span> d=<span class="number">3</span>+<span class="number">4</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正确答案：ABD C选项错误原因：a、b变量为<span class="type">byte</span>型，相加类型提升为<span class="type">int</span>型，需要强制转换符，D选项<span class="number">3</span>+<span class="number">4</span>在<span class="type">byte</span>取值范围内，故正确。</span><br></pre></td></tr></table></figure><h2 id="day03-day06">day03-day06</h2><p>6.下面的代码执完后x的值是:（）<s>B</s></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>,j = <span class="number">25</span>,x = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">switch</span>(j-i) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">15</span>: </span><br><span class="line">          x++;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">          x+=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">          x+=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          --x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A: <span class="number">35</span></span><br><span class="line">B: <span class="number">36</span></span><br><span class="line">C: <span class="number">34</span></span><br><span class="line">D: <span class="number">16</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正确答案：A </span><br><span class="line"><span class="keyword">switch</span>的穿透是从匹配到的<span class="keyword">case</span>至下一直到达<span class="keyword">break</span>或程序结束</span><br></pre></td></tr></table></figure><p>7.下面一段代码中break语句起到（  ）的作用，请选择表述最准确的一项    <s>A</s></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> pointer=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(poinrer&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(poinrer%<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            pointer+=<span class="number">1</span>;   <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            pointer+=<span class="number">2</span>;   <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            pointer+=<span class="number">3</span>;   <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A: 结束当次循环，使控制权直接转移到控制循环的条件表达式</span><br><span class="line">B: 从嵌套循环内部跳出最里面的循环</span><br><span class="line">C: 终止<span class="keyword">switch</span>语句的语句序列</span><br><span class="line">D: 退出循环</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正确答案：C</span><br></pre></td></tr></table></figure><p>18下列代码会出现死循环的是（） <s>AC</s></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">A.</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我爱上海明珠塔。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">B.</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我爱上海明珠塔。&quot;</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">C.</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我爱上海明珠塔。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">D.</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我爱上海明珠塔。&quot;</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">while</span> (i&gt;<span class="number">10</span>);</span><br><span class="line">E.</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我爱上海明珠塔。&quot;</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">while</span> (i&lt;<span class="number">10</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正确答案：ACD</span><br><span class="line">未选D</span><br></pre></td></tr></table></figure><p>19.下列数组定义的方法正确的是（ ）<s>BC</s></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A: <span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line">B: <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">C: <span class="type">int</span> arr2[] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">D: <span class="type">int</span>[] arr4 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正确答案：ABC</span><br><span class="line">字符型会以Ascii码形式储存在<span class="type">int</span>型数组中</span><br></pre></td></tr></table></figure><p>20定义数组：int[] arr = new int[4];，下面代码错误的是（  ）<s>AD</s></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A: arr(<span class="number">0</span>) = <span class="number">100</span>;</span><br><span class="line">B: arr[<span class="number">4</span>] = <span class="number">2</span>;</span><br><span class="line">C:  arr[<span class="number">0</span>] = <span class="number">10</span> * <span class="number">10</span>;</span><br><span class="line">D: arr[<span class="number">1</span>] = arr[<span class="number">2</span>] + arr[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正确答案：AB</span><br><span class="line">B选项数组角标越界</span><br><span class="line">D选项引用数据类型有初始默认值</span><br></pre></td></tr></table></figure><p>21.switch（）中可以为什么类型的值？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>,<span class="type">short</span>,<span class="type">int</span>,<span class="type">char</span>,枚举,String</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exercises </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software_Eclipse_Settings</title>
      <link href="/2022/07/01/Software_Eclipse_Settings/"/>
      <url>/2022/07/01/Software_Eclipse_Settings/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>Eclipse</th><th style="text-align:center">常用快捷键</th></tr></thead><tbody><tr><td>补全代码的声明</td><td style="text-align:center">alt + /</td></tr><tr><td>快速修复</td><td style="text-align:center">ctrl + 1</td></tr><tr><td>批量导包</td><td style="text-align:center">ctrl + shift + o</td></tr><tr><td>使用单行注释</td><td style="text-align:center">ctrl + /</td></tr><tr><td>使用多行注释</td><td style="text-align:center">ctrl + shift + /</td></tr><tr><td>取消多行注释</td><td style="text-align:center">ctrl + shift + |</td></tr><tr><td>复制指定行的代码</td><td style="text-align:center">ctrl + alt + down 或 ctrl + alt + up</td></tr><tr><td>删除指定行的代码</td><td style="text-align:center">ctrl + d</td></tr><tr><td>上下移动代码</td><td style="text-align:center">alt + up  或 alt + down</td></tr><tr><td>向下插入行</td><td style="text-align:center">shift + enter</td></tr><tr><td>向上插入行</td><td style="text-align:center">ctrl + shift + enter</td></tr><tr><td>如何查看源码</td><td style="text-align:center">ctrl + 选中指定的结构   或  ctrl + shift + t</td></tr><tr><td>退回到前一个编辑的页面</td><td style="text-align:center">alt + left</td></tr><tr><td>进入到下一个编辑的页面(针对于上面那条来说的)</td><td style="text-align:center">alt + right</td></tr><tr><td>光标选中指定的类，查看继承树结构</td><td style="text-align:center">ctrl + t</td></tr><tr><td>复制代码</td><td style="text-align:center">ctrl + c</td></tr><tr><td>撤销</td><td style="text-align:center">ctrl + z</td></tr><tr><td>反撤销</td><td style="text-align:center">ctrl + y</td></tr><tr><td>剪切</td><td style="text-align:center">ctrl + x</td></tr><tr><td>粘贴</td><td style="text-align:center">ctrl + v</td></tr><tr><td>保存</td><td style="text-align:center">ctrl + s</td></tr><tr><td>全选</td><td style="text-align:center">ctrl + a</td></tr><tr><td>格式化代码</td><td style="text-align:center">ctrl + shift + f</td></tr><tr><td>选中数行，整体往后移动</td><td style="text-align:center">tab</td></tr><tr><td>选中数行，整体往前移动</td><td style="text-align:center">shift + tab</td></tr><tr><td>在当前类中，显示类结构，并支持搜索指定的方法、属性等</td><td style="text-align:center">ctrl + o</td></tr><tr><td>批量修改指定的变量名、方法名、类名等</td><td style="text-align:center">alt + shift + r</td></tr><tr><td>选中的结构的大小写的切换</td><td style="text-align:center">变成大写</td></tr><tr><td>选中的结构的大小写的切换</td><td style="text-align:center">变成小写</td></tr><tr><td>调出生成getter/setter/构造器等结构</td><td style="text-align:center">alt + shift + s</td></tr><tr><td>显示当前选择资源(工程 or 文件)的属性</td><td style="text-align:center">alt + enter</td></tr><tr><td>快速查找</td><td style="text-align:center">参照选中的Word快速定位到下一个</td></tr><tr><td>关闭当前窗口</td><td style="text-align:center">ctrl + w</td></tr><tr><td>关闭所有的窗口</td><td style="text-align:center">ctrl + shift + w</td></tr><tr><td>查看指定的结构使用过的地方</td><td style="text-align:center">ctrl + alt + g</td></tr><tr><td>查找与替换</td><td style="text-align:center">ctrl + f</td></tr><tr><td>最大化当前的View</td><td style="text-align:center">ctrl + m</td></tr><tr><td>直接定位到当前行的首位</td><td style="text-align:center">home</td></tr><tr><td>直接定位到当前行的末位</td><td style="text-align:center">end</td></tr></tbody></table><h3 id="超级常用：">超级常用：</h3><table><thead><tr><th>Ctrl + C</th><th>复制</th></tr></thead><tbody><tr><td>Ctrl + V</td><td>粘贴</td></tr><tr><td>Ctrl + X</td><td>剪切</td></tr><tr><td>Ctrl + Z</td><td>撤销</td></tr><tr><td>Ctrl + Y</td><td>反撤销</td></tr><tr><td>Ctrl + S</td><td>保存</td></tr><tr><td>Ctrl + A</td><td>全选</td></tr><tr><td>Ctrl + 1</td><td>快速修复</td></tr><tr><td>Alt + /</td><td>内容提示</td></tr></tbody></table><h3 id="非常常用：">非常常用：</h3><table><thead><tr><th>alt + up  或 alt + down</th><th>上下移动代码</th></tr></thead><tbody><tr><td>shift + enter</td><td>向下插入行</td></tr><tr><td>ctrl + shift + enter</td><td>向上插入行</td></tr><tr><td>ctrl + d</td><td>删除指定行的代码</td></tr><tr><td>ctrl + o</td><td>在当前类中，显示类结构，并支持搜索指定的方法、属性等</td></tr><tr><td>ctrl + alt + down 或 ctrl + alt + up</td><td>复制指定行的代码</td></tr><tr><td>ctrl + shift + o</td><td>批量导包</td></tr><tr><td>ctrl + /</td><td>使用单行注释</td></tr><tr><td>ctrl + shift + /</td><td>使用多行注释</td></tr><tr><td>ctrl + shift + \</td><td>取消多行注释</td></tr><tr><td>ctrl + shift + f</td><td>格式化代码</td></tr></tbody></table><h3 id="比较常用：">比较常用：</h3><table><thead><tr><th>alt + left</th><th>退回到前一个编辑的页面</th></tr></thead><tbody><tr><td>alt + right</td><td>进入到下一个编辑的页面</td></tr><tr><td>ctrl + t</td><td>光标选中指定的类，查看继承树结构</td></tr><tr><td>alt + shift + s</td><td>调出生成getter/setter/构造器等结构</td></tr><tr><td>ctrl + k</td><td>快速查找：参照选中的Word快速定位到下一个</td></tr><tr><td>tab</td><td>选中数行，整体往后移动</td></tr><tr><td>shift + tab</td><td>选中数行，整体往前移动</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software_IntelliJ Idea_Settings</title>
      <link href="/2022/06/30/Software_IntelliJ%20Idea_Settings/"/>
      <url>/2022/06/30/Software_IntelliJ%20Idea_Settings/</url>
      
        <content type="html"><![CDATA[<h2 id="Intellij-Idea常用快捷键列表">Intellij Idea常用快捷键列表</h2><table><thead><tr><th>Ctrl+Shift + Enter</th><th>语句完成</th></tr></thead><tbody><tr><td>“！”</td><td>否定完成</td></tr><tr><td>Ctrl+E</td><td>最近的文件</td></tr><tr><td>Ctrl+Shift+E</td><td>最近更改的文件</td></tr><tr><td>Shift+Click</td><td>可以关闭文件</td></tr><tr><td>Ctrl+[ OR ]</td><td>可以跑到大括号的开头与结尾</td></tr><tr><td>Ctrl+F12</td><td>可以显示当前文件的结构</td></tr><tr><td>Ctrl+F7</td><td>可以查询当前元素在当前文件中的引用</td></tr><tr><td>Ctrl+N</td><td>可以快速打开类</td></tr><tr><td>Ctrl+Shift+N</td><td>可以快速打开文件</td></tr><tr><td>Alt+Q</td><td>可以看到当前方法的声明</td></tr><tr><td>Ctrl+P</td><td>可以显示参数信息</td></tr><tr><td>Ctrl+Shift+Insert</td><td>可以选择剪贴板内容并插入</td></tr><tr><td>Alt+Insert</td><td>可以生成构造器/Getter/Setter等</td></tr><tr><td>Ctrl+Alt+V</td><td>可以引入变量。例如：new String(); 自动导入变量定义</td></tr><tr><td>Ctrl+Alt+T</td><td>可以把代码包在一个块内</td></tr><tr><td>Ctrl+Enter</td><td>导入包</td></tr><tr><td>Ctrl+Alt+L</td><td>格式化代码</td></tr><tr><td>Ctrl+Alt+I</td><td>将选中的代码进行自动缩进编排</td></tr><tr><td>Ctrl+Alt+O</td><td>优化导入的类和包</td></tr><tr><td>Ctrl+R</td><td>替换文本</td></tr><tr><td>Ctrl+F</td><td>查找文本</td></tr><tr><td>Ctrl+Shift+Space</td><td>自动补全代码</td></tr><tr><td>Ctrl+空格</td><td>代码提示（与系统输入法快捷键冲突）</td></tr><tr><td>Ctrl+Shift+Alt+N</td><td>查找类中的方法或变量</td></tr><tr><td>Alt+Shift+C</td><td>最近的更改</td></tr><tr><td>Alt+Shift+Up/Down</td><td>上/下移一行</td></tr><tr><td>Shift+F6</td><td>重构 – 重命名</td></tr><tr><td>Ctrl+X</td><td>删除行</td></tr><tr><td>Ctrl+D</td><td>复制行</td></tr><tr><td>Ctrl+/或Ctrl+Shift+/</td><td>注释（//或者/**/）</td></tr><tr><td>Ctrl+J</td><td>自动代码（例如：serr）</td></tr><tr><td>Ctrl+Alt+J</td><td>用动态模板环绕</td></tr><tr><td>Ctrl+H</td><td>显示类结构图（类的继承层次）</td></tr><tr><td>Ctrl+Q</td><td>显示注释文档</td></tr><tr><td>Alt+F1</td><td>查找代码所在位置</td></tr><tr><td>Alt+1</td><td>快速打开或隐藏工程面板</td></tr><tr><td>Ctrl+Alt+left/right</td><td>返回至上次浏览的位置</td></tr><tr><td>Alt+left/right</td><td>切换代码视图</td></tr><tr><td>Alt+Up/Down</td><td>在方法间快速移动定位</td></tr><tr><td>Ctrl+Shift+Up/Down</td><td>向上/下移动语句</td></tr><tr><td>F2 或 Shift+F2</td><td>高亮错误或警告快速定位</td></tr><tr><td>Tab</td><td>代码标签输入完成后</td></tr><tr><td>Ctrl+Shift+F7</td><td>高亮显示所有该文本</td></tr><tr><td>Alt+F3</td><td>逐个往下查找相同文本</td></tr><tr><td>Ctrl+Up/Down</td><td>光标中转到第一行或最后一行下</td></tr><tr><td>Ctrl+B/Ctrl+Click</td><td>快速打开光标处的类或方法（跳转到定义处）</td></tr><tr><td>Ctrl+Alt+B</td><td>跳转到方法实现处</td></tr><tr><td>Ctrl+Shift+Backspace</td><td>跳转到上次编辑的地方</td></tr><tr><td>Ctrl+O</td><td>重写方法</td></tr><tr><td>Ctrl+Alt+Space</td><td>类名自动完成</td></tr><tr><td>Ctrl+Alt+Up/Down</td><td>快速跳转搜索结果</td></tr><tr><td>Ctrl+Shift+J</td><td>整合两行</td></tr><tr><td>Alt+F8</td><td>计算变量值</td></tr><tr><td>Ctrl+Shift+V</td><td>可以将最近使用的剪贴板内容选择插入到文本</td></tr><tr><td>Ctrl+Alt+Shift+V</td><td>简单粘贴</td></tr><tr><td>Shift+Esc</td><td>不仅可以把焦点移到编辑器上</td></tr><tr><td>F12</td><td>把焦点从编辑器移到最近使用的工具窗口</td></tr><tr><td>Shift+F1</td><td>要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</td></tr><tr><td>Ctrl+W</td><td>可以选择单词继而语句继而行继而函数</td></tr><tr><td>Ctrl+Shift+W</td><td>取消选择光标所在词</td></tr><tr><td>Alt+F7</td><td>查找整个工程中使用地某一个类、方法或者变量的位置</td></tr><tr><td>Ctrl+I</td><td>实现方法</td></tr><tr><td>Ctrl+Shift+U</td><td>大小写转化</td></tr><tr><td>Ctrl+Y</td><td>删除当前行</td></tr><tr><td>Shift+Enter</td><td>向下插入新行</td></tr><tr><td>psvm/sout</td><td>main/System.out.println()</td></tr><tr><td>Ctrl+J</td><td>查看更多</td></tr><tr><td>Ctrl+Shift+F</td><td>全局查找</td></tr><tr><td>Ctrl+F</td><td>查找/Shift+F3</td></tr><tr><td>Ctrl+Shift+S</td><td>高级搜索</td></tr><tr><td>Ctrl+U</td><td>转到父类</td></tr><tr><td>Ctrl+Alt+S</td><td>打开设置对话框</td></tr><tr><td>Alt+Shift+Inert</td><td>开启/关闭列选择模式</td></tr><tr><td>Ctrl+Alt+Shift+S</td><td>打开当前项目/模块属性</td></tr><tr><td>Ctrl+G</td><td>定位行</td></tr><tr><td>Alt+Home</td><td>跳转到导航栏</td></tr><tr><td>Ctrl+Enter</td><td>上插一行</td></tr><tr><td>Ctrl+Backspace</td><td>按单词删除</td></tr><tr><td>Ctrl+”+/-”</td><td>当前方法展开、折叠</td></tr><tr><td>Ctrl+Shift+”+/-”</td><td>全部展开、折叠</td></tr></tbody></table><h2 id="【调试部分、编译】">【调试部分、编译】</h2><table><thead><tr><th>Ctrl+F2</th><th>停止</th></tr></thead><tbody><tr><td>Alt+Shift+F9</td><td>选择 Debug</td></tr><tr><td>Alt+Shift+F10</td><td>选择 Run</td></tr><tr><td>Ctrl+Shift+F9</td><td>编译</td></tr><tr><td>Ctrl+Shift+F10</td><td>运行</td></tr><tr><td>Ctrl+Shift+F8</td><td>查看断点</td></tr><tr><td>F8</td><td>步过</td></tr><tr><td>F7</td><td>步入</td></tr><tr><td>Shift+F7</td><td>智能步入</td></tr><tr><td>Shift+F8</td><td>步出</td></tr><tr><td>Alt+Shift+F8</td><td>强制步过</td></tr><tr><td>Alt+Shift+F7</td><td>强制步入</td></tr><tr><td>Alt+F9</td><td>运行至光标处</td></tr><tr><td>Ctrl+Alt+F9</td><td>强制运行至光标处</td></tr><tr><td>F9</td><td>恢复程序</td></tr><tr><td>Alt+F10</td><td>定位到断点</td></tr><tr><td>Ctrl+F8</td><td>切换行断点</td></tr><tr><td>Ctrl+F9</td><td>生成项目</td></tr><tr><td>Alt+1</td><td>项目</td></tr><tr><td>Alt+2</td><td>收藏</td></tr><tr><td>Alt+6</td><td>TODO</td></tr><tr><td>Alt+7</td><td>结构</td></tr><tr><td>Ctrl+Shift+C</td><td>复制路径</td></tr><tr><td>Ctrl+Alt+Shift+C</td><td>复制引用</td></tr><tr><td>Ctrl+Alt+Y</td><td>同步</td></tr><tr><td>Ctrl+~</td><td>快速切换方案（界面外观、代码风格、快捷键映射等菜单）</td></tr><tr><td>Shift+F12</td><td>还原默认布局</td></tr><tr><td>Ctrl+Shift+F12</td><td>隐藏/恢复所有窗口</td></tr><tr><td>Ctrl+F4</td><td>关闭</td></tr><tr><td>Ctrl+Shift+F4</td><td>关闭活动选项卡</td></tr><tr><td>Ctrl+Tab</td><td>转到下一个拆分器</td></tr><tr><td>Ctrl+Shift+Tab</td><td>转到上一个拆分器</td></tr></tbody></table><h2 id="【重构】">【重构】</h2><table><thead><tr><th>Ctrl+Alt+Shift+T</th><th>弹出重构菜单</th></tr></thead><tbody><tr><td>Shift+F6</td><td>重命名</td></tr><tr><td>F6</td><td>移动</td></tr><tr><td>F5</td><td>复制</td></tr><tr><td>Alt+Delete</td><td>安全删除</td></tr><tr><td>Ctrl+Alt+N</td><td>内联</td></tr></tbody></table><h2 id="【查找】">【查找】</h2><table><thead><tr><th>Ctrl+F</th><th>查找</th></tr></thead><tbody><tr><td>Ctrl+R</td><td>替换</td></tr><tr><td>F3</td><td>查找下一个</td></tr><tr><td>Shift+F3</td><td>查找上一个</td></tr><tr><td>Ctrl+Shift+F</td><td>在路径中查找</td></tr><tr><td>Ctrl+Shift+R</td><td>在路径中替换</td></tr><tr><td>Ctrl+Shift+S</td><td>搜索结构</td></tr><tr><td>Ctrl+Shift+M</td><td>替换结构</td></tr><tr><td>Alt+F7</td><td>查找用法</td></tr><tr><td>Ctrl+Alt+F7</td><td>显示用法</td></tr><tr><td>Ctrl+F7</td><td>在文件中查找用法</td></tr><tr><td>Ctrl+Shift+F7</td><td>在文件中高亮显示用法</td></tr></tbody></table><h2 id="超级常用：-2">超级常用：</h2><table><thead><tr><th>Ctrl+N</th><th>可以快速打开类</th></tr></thead><tbody><tr><td>Alt+Insert</td><td>可以生成构造器/Getter/Setter等（通过Shift可以多选构造，选择select none制造空参的构造器）</td></tr><tr><td>Ctrl+Alt+L</td><td>格式化代码</td></tr><tr><td>Ctrl+R</td><td>替换文本</td></tr><tr><td>Ctrl+F</td><td>查找文本</td></tr><tr><td>Ctrl+Shift+Space</td><td>自动补全代码</td></tr><tr><td>Ctrl+空格</td><td>代码提示（与系统输入法快捷键冲突）</td></tr><tr><td>Alt+Shift+Up/Down</td><td>上/下移一行</td></tr><tr><td>Ctrl+X</td><td>删除行</td></tr><tr><td>Ctrl+D</td><td>复制行</td></tr><tr><td>Ctrl+/或Ctrl+Shift+/</td><td>注释（//或者/**/）</td></tr><tr><td>Ctrl+Shift+Up/Down</td><td>向上/下移动语句</td></tr><tr><td>Ctrl+Up/Down</td><td>光标中转到第一行或最后一行下</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IntelliJ Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE_Exercises_Words</title>
      <link href="/2022/06/30/JavaSE_Exercises_Words/"/>
      <url>/2022/06/30/JavaSE_Exercises_Words/</url>
      
        <content type="html"><![CDATA[<h1>JavaSE_Exercises_Words</h1><h2 id="day01-2">day01</h2><table><thead><tr><th>Java virtual machine</th><th>Java 虚拟机</th></tr></thead><tbody><tr><td>Java Runtime Environment</td><td>Java 运行环境</td></tr><tr><td>Java Development kit</td><td>Java 开发工具</td></tr><tr><td>config</td><td>配置</td></tr><tr><td>include</td><td>包含</td></tr><tr><td>change directory</td><td>切换目录</td></tr><tr><td>clean screen</td><td>清屏</td></tr><tr><td>exit</td><td>退出</td></tr><tr><td>path</td><td>路径</td></tr><tr><td>Hello World</td><td>你好世界</td></tr><tr><td>public</td><td>公开的</td></tr><tr><td>class</td><td>类</td></tr><tr><td>static</td><td>静态</td></tr><tr><td>main</td><td>主要</td></tr><tr><td>string</td><td>字符串</td></tr></tbody></table><h2 id="day02-2">day02</h2><table><thead><tr><th>argments</th><th>参数</th></tr></thead><tbody><tr><td>System</td><td>系统</td></tr><tr><td>print</td><td>打印</td></tr><tr><td>line</td><td>行</td></tr><tr><td>bug</td><td>虫子</td></tr><tr><td>bit</td><td>位</td></tr><tr><td>byte</td><td>字节</td></tr><tr><td>short</td><td>短</td></tr><tr><td>int</td><td>整数</td></tr><tr><td>long</td><td>长</td></tr><tr><td>float</td><td>浮动</td></tr><tr><td>double</td><td>双重，两倍</td></tr><tr><td>char</td><td>字符</td></tr><tr><td>boolean</td><td>布尔</td></tr><tr><td>util</td><td>工具</td></tr></tbody></table><h2 id="day03-2">day03</h2><table><thead><tr><th>Scanner</th><th>扫描器</th></tr></thead><tbody><tr><td>new</td><td>新建</td></tr><tr><td>in</td><td>输入</td></tr><tr><td>next</td><td>下一个</td></tr><tr><td>username</td><td>用户名</td></tr><tr><td>student number</td><td>学号</td></tr><tr><td>Number</td><td>数字</td></tr><tr><td>Test</td><td>测试</td></tr><tr><td>true</td><td>真</td></tr><tr><td>false</td><td>假</td></tr><tr><td>Operation</td><td>操作</td></tr><tr><td>height</td><td>高度</td></tr><tr><td>temp</td><td>临时</td></tr><tr><td>max</td><td>最大值</td></tr></tbody></table><h2 id="day04-2">day04</h2><table><thead><tr><th>if</th><th>如果</th></tr></thead><tbody><tr><td>else</td><td>否则</td></tr><tr><td>while</td><td>在…期间</td></tr><tr><td>do</td><td>做，执行</td></tr><tr><td>switch</td><td>分支</td></tr><tr><td>Demo</td><td>例子</td></tr><tr><td>score</td><td>分数</td></tr><tr><td>case</td><td>案例、具体情况</td></tr><tr><td>break</td><td>中断</td></tr><tr><td>default</td><td>默认</td></tr><tr><td>week</td><td>星期</td></tr><tr><td>foreach</td><td>循环</td></tr><tr><td>sum</td><td>求和</td></tr><tr><td>count</td><td>统计</td></tr><tr><td>paper</td><td>纸</td></tr><tr><td>continue</td><td>继续</td></tr></tbody></table><h2 id="day05-2">day05</h2><table><thead><tr><th style="text-align:left">Random</th><th style="text-align:left">随机数</th></tr></thead><tbody><tr><td style="text-align:left">Array</td><td style="text-align:left">数组</td></tr><tr><td style="text-align:left">Index</td><td style="text-align:left">索引</td></tr><tr><td style="text-align:left">Null Pointer Exception</td><td style="text-align:left">空指针异常</td></tr><tr><td style="text-align:left">length</td><td style="text-align:left">长度</td></tr><tr><td style="text-align:left">avg</td><td style="text-align:left">平均数</td></tr><tr><td style="text-align:left">method</td><td style="text-align:left">方法</td></tr><tr><td style="text-align:left">even number</td><td style="text-align:left">偶数</td></tr><tr><td style="text-align:left">return</td><td style="text-align:left">返回</td></tr><tr><td style="text-align:left">compare</td><td style="text-align:left">比较</td></tr><tr><td style="text-align:left">change</td><td style="text-align:left">改变</td></tr><tr><td style="text-align:left">max</td><td style="text-align:left">最大值</td></tr><tr><td style="text-align:left">min</td><td style="text-align:left">最小值</td></tr><tr><td style="text-align:left">Debug</td><td style="text-align:left">调试</td></tr><tr><td style="text-align:left">console</td><td style="text-align:left">控制台</td></tr></tbody></table><h2 id="day06">day06</h2><table><thead><tr><th>step into</th><th>单步进入</th></tr></thead><tbody><tr><td>Binary coded</td><td>二进制</td></tr><tr><td>Decimal</td><td>十进制</td></tr><tr><td>end</td><td>结束</td></tr><tr><td>start</td><td>开始</td></tr><tr><td>class</td><td>类</td></tr><tr><td>student</td><td>学生</td></tr><tr><td>name</td><td>名字</td></tr><tr><td>age</td><td>年龄</td></tr><tr><td>study</td><td>学习</td></tr><tr><td>Phone</td><td>手机</td></tr><tr><td>brand</td><td>品牌</td></tr><tr><td>price</td><td>价格</td></tr><tr><td>call</td><td>打电话</td></tr><tr><td>send message</td><td>发送消息</td></tr></tbody></table><h2 id="day07-2">day07</h2><table><thead><tr><th>private</th><th>私有</th></tr></thead><tbody><tr><td>set</td><td>设置</td></tr><tr><td>get</td><td>获取</td></tr><tr><td>show</td><td>显示</td></tr><tr><td>this</td><td>这、自身</td></tr><tr><td>constructor</td><td>构造方法</td></tr><tr><td>Application Programming interface</td><td>应用程序编程接口</td></tr><tr><td>String</td><td>字符串</td></tr><tr><td>equals</td><td>相等</td></tr><tr><td>equals Ignore Case</td><td>相等忽略大小写</td></tr><tr><td>username</td><td>用户名</td></tr><tr><td>password</td><td>密码</td></tr><tr><td>substring</td><td>截取字串</td></tr><tr><td>replace</td><td>替换</td></tr><tr><td>CharSequence</td><td>字符序列</td></tr></tbody></table><h2 id="day08-2">day08</h2><table><thead><tr><th>target</th><th>目标</th></tr></thead><tbody><tr><td>length</td><td>长度</td></tr><tr><td>split</td><td>分割</td></tr><tr><td>Buileder</td><td>构建</td></tr><tr><td>append</td><td>追加</td></tr><tr><td>reverse</td><td>反转</td></tr><tr><td>to string</td><td>变成字符串</td></tr><tr><td>Array List</td><td>数组集合</td></tr><tr><td>add</td><td>添加</td></tr><tr><td>element</td><td>元素</td></tr><tr><td>remove</td><td>移除、删除</td></tr><tr><td>set</td><td>设置</td></tr><tr><td>get</td><td>获取</td></tr><tr><td>size</td><td>大小</td></tr><tr><td>id</td><td>唯一标识</td></tr></tbody></table><h2 id="day09-2">day09</h2><table><thead><tr><th>name</th><th>姓名</th></tr></thead><tbody><tr><td>age</td><td>年龄</td></tr><tr><td>birthday</td><td>生日</td></tr><tr><td>Student</td><td>学生</td></tr><tr><td>Manager</td><td>经理</td></tr><tr><td>while</td><td>在…期间</td></tr><tr><td>true</td><td>真</td></tr><tr><td>switch</td><td>分支</td></tr><tr><td>choice</td><td>选择</td></tr><tr><td>break</td><td>终止</td></tr><tr><td>case</td><td>分支</td></tr><tr><td>delete</td><td>删除</td></tr><tr><td>update</td><td>更新</td></tr><tr><td>query</td><td>查询</td></tr><tr><td>index</td><td>索引</td></tr></tbody></table><h2 id="常用">常用</h2><table><thead><tr><th>choice</th><th>选择</th></tr></thead><tbody><tr><td>result</td><td>结果</td></tr><tr><td>isExist</td><td>是否存在</td></tr><tr><td>Controller</td><td>客服</td></tr><tr><td>Service</td><td>业务员</td></tr><tr><td>Dao(Data Access Object)</td><td>库管</td></tr><tr><td>JavaBean</td><td>标准类</td></tr><tr><td>entry</td><td>进入方法</td></tr><tr><td>domain</td><td>存储标准类</td></tr><tr><td>input</td><td>输入</td></tr><tr><td>info</td><td>信息</td></tr><tr><td>update</td><td>修改，更新</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exercises </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software_Typora_Settings</title>
      <link href="/2022/06/28/Software_Typora_Settings/"/>
      <url>/2022/06/28/Software_Typora_Settings/</url>
      
        <content type="html"><![CDATA[<h2 id="此方法用于Page-index-md文章页面设置">此方法用于Page index.md文章页面设置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="title class_">page</span> <span class="string">&quot;页面标题&quot;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>title</th><th>【必需】页面标题</th></tr></thead><tbody><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标籤、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table><h2 id="Typora-Post-Front-matter">Typora_Post Front-matter</h2><h3 id="此方法用于Post文章内容的创建">此方法用于Post文章内容的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&quot;文章标题&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">tags:</span><br><span class="line">- </span><br><span class="line">category:</span><br><span class="line">- </span><br></pre></td></tr></table></figure><table><thead><tr><th>title</th><th>【必需】文章标题</th></tr></thead><tbody><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><p>##Typora Keymap</p><h3 id="编辑">编辑</h3><table><thead><tr><th>Ctrl + Z 撤销</th><th>Ctrl + Y 重做</th><th style="text-align:center">Ctrl + X 剪切</th></tr></thead><tbody><tr><td>Ctrl + C 复制</td><td>Ctrl + V 粘贴</td><td style="text-align:center">Ctrl + A 全选</td></tr><tr><td>Ctrl + L 选中当前行/句</td><td>Ctrl + E 选中当前格式文本</td><td style="text-align:center">Ctrl + D 选中当前词</td></tr><tr><td>Ctrl + J 跳转到所选内容</td><td>Ctrl + End 跳转到文末</td><td style="text-align:center"></td></tr></tbody></table><h3 id="段落">段落</h3><table><thead><tr><th>Ctrl + 0 段落</th><th>Ctrl + 1 一级标题</th><th>Ctrl + 2 二级标题</th></tr></thead><tbody><tr><td>Ctrl + 3 三级标题</td><td>Ctrl + 4 四级标题</td><td>Ctrl + 5 五级标题</td></tr><tr><td>Ctrl + 6 六级标题</td><td>Ctrl + = 提升标题级别</td><td>Ctrl + - 降低标题级别</td></tr><tr><td>Ctrl + T 表格</td><td>Ctrl + Shift + K 代码块</td><td>Ctrl + Shift + M 公式块</td></tr><tr><td>Ctrl + Shift + Q 引用</td><td>Ctrl + Shift + [ 有序列表</td><td>Ctrl + Shift + ] 无序列表</td></tr></tbody></table><h3 id="格式">格式</h3><table><thead><tr><th>Ctrl + B 加粗</th><th>Ctrl + I 斜体</th><th>Ctrl + U 下划线</th></tr></thead><tbody><tr><td>Ctrl + K 超链接</td><td>Ctrl + \ 清除样式</td><td>Ctrl + Shift + ` 代码</td></tr><tr><td>Alt + Shift + 5 删除线</td><td>Ctrl + Shift + I 图像</td><td></td></tr></tbody></table><p>###视图</p><table><thead><tr><th>F8 专注模式</th><th>F9 打字机模式</th><th>F11切换全屏</th></tr></thead><tbody><tr><td>Ctrl + / 源代码模式</td><td>Ctrl + Tab 应用内窗口切换</td><td>Shift + F12 开发者模式</td></tr><tr><td>Ctrl + Shift + L 显示/隐藏侧边栏</td><td>Ctrl + Shift + 1 大纲列表视图</td><td>Ctrl + Shift + 2 文件列表视图</td></tr><tr><td>Ctrl + Shift + 3 文件档案视图</td><td>Ctrl + Shift + F 搜索</td><td>Ctrl + Shift + 0 实际大小</td></tr><tr><td>Ctrl + Shift + = 放大</td><td>Ctrl + Shift + - 缩小</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
